<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>让美的事情发生</title><link>//imziv.com/</link><description>Recent content on 让美的事情发生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2012-2020 Ziv小威</copyright><lastBuildDate>Thu, 16 Dec 2021 14:00:00 +0000</lastBuildDate><atom:link href="//imziv.com/index.xml" rel="self" type="application/rss+xml"/><item><title>又见南京 - JSConf 之行</title><link>//imziv.com/posts/2016/%E5%8F%88%E8%A7%81%E5%8D%97%E4%BA%AC-jsconf%E4%B9%8B%E8%A1%8C/</link><pubDate>Tue, 06 Sep 2016 00:22:28 +0000</pubDate><guid>//imziv.com/posts/2016/%E5%8F%88%E8%A7%81%E5%8D%97%E4%BA%AC-jsconf%E4%B9%8B%E8%A1%8C/</guid><description>让美的事情发生 //imziv.com/posts/2016/%E5%8F%88%E8%A7%81%E5%8D%97%E4%BA%AC-jsconf%E4%B9%8B%E8%A1%8C/ -&lt;p>杭州因为这几天要举办&lt;a href="http://www.g20.org/">G20&lt;/a>峰会，所以杭州掀起了出行潮，为大会腾空间。在放假的前天我其实都未决定要离开杭州，准备留杭州泡泡图书馆什么的。而在一顿中午饭过后，得知能聚集人的地方都得关门，我便匆忙的在 12306APP 上购买了回武汉的车票，决定回家。因为票买的太晚，显然这个时候回武汉的车票早已售罄，我便买了一张杭州出发到南京南，然后准备从南京南转车回武汉。&lt;/p>
&lt;p>记得在放假前几天我在公司群里跟小伙伴分享了&lt;a href="http://2016.jsconf.cn/">JSConf&lt;/a>在南京举办的消息，并且正好在&lt;a href="http://www.g20.org/">G20&lt;/a>我们放假期间。并且我们开发组尊崇的&lt;a href="http://vuejs.org/">Vuejs&lt;/a>的作者&lt;code>尤雨溪&lt;/code>大神也会过来，分享关于&lt;code>Vuejs2.0&lt;/code>相关的主题。然而&lt;a href="http://2016.jsconf.cn/">JSConf&lt;/a>官网上的门票已经早早卖完了。所以当时也并没有多想了。而且由于过去的一些参会经历，我对这种会议并没有太多好的印象。所以当时并未太想参与。&lt;/p>
&lt;p>当我乘上动车，在抵达南京前，看到几个技术圈里面都在讲明天再南京举办的&lt;a href="http://2016.jsconf.cn/">JSConf&lt;/a>的事情，而我想想我回武汉后只能呆在我姐家中，也并没有什么事情可做。所以遂想既然我都要到南京了，就不回去了吧，反正这座城市我也不陌生，不如就去参加&lt;a href="http://2016.jsconf.cn/">JSConf&lt;/a>吧，顺便见见老同学，老朋友。没有门票，我想，总会有办法的。&lt;/p>
&lt;p>一切都来得太突然，从中午我突然决定买票回家，然后并在回家的途中，又突然决定在南京停留。这 2 次突然的决定我自己都决定有点随性。不过所幸的是，我突然联系在南京的同学，将可能在他那边宿留的消息告诉他后，并得到了肯定肯定的回答。而第二天，我又幸运的从一位因病不能参会的 JSER 手中获得了一张早鸟票（只有 300 元，其他的票都 4 到 5 百左右）.一切都太突然，而一切又如此顺理成章。&lt;/p>
&lt;p>体验过南京的便捷地铁后，真的不得不吐槽下杭州地铁方面的落后。当然多达 20 多个出站口的新街口地铁站，依然让我找不着北，纵使我是一个方向感比较好的人。出了新街口地铁站，各种高楼大厦汇聚眼前，颇有纽约时代广场的感觉啊（哈哈，我并没有去过纽约时代广场，随意意淫）。秋天的玄武湖，满是金黄的银杏叶，非常漂亮。春秋季节的紫金山，是南京市民户外散步，骑车，放风筝，爬山的好去处。南京与武汉很像，大学城。像历史悠久的南大，美女如云文艺气息浓厚的南师大等等。更是有例如张嘉佳，李志，先锋书店这等文艺典范。总而言之，众多的因素，促使了南京这座城市的浓郁的文艺气息。&lt;/p>
&lt;p>JSConf 还是比我想象中的要好的，还是挺有收获的。不管是干货还是湿货，我觉得这次 JSConf 之行对我而言是次挺难忘的经历。具体的技术点梳理，知乎已经有很多不错的回答了。而且这次来此 Facebook 的分享嘉宾&lt;a href="http://thejameskyle.com/">James Kyle&lt;/a>的 Presentation 着实把大家的研究给辣瞎了。本身也在知乎上回复了关于自己 Presentation 的看法(&lt;a href="https://www.zhihu.com/question/50244455">详情可以点击&lt;/a>)。参加 JSConf 前，我也就参加过 D2 前端论坛，基本上其他大大小小的也参与过，也看过不少视频，很多的感觉并不是太好。但是这次我还是看到了很多不同东西，看到了很多分享嘉宾大老远从地球的一端飞过来，而给我们分享的内容也就那么几十分钟，其实这一切都挺不易的。具体的技术内容我就不讲了，嘉宾各具特色，精美的 PPT, 各类的开发者，有高中生，还有类似医生转开发者的，还有拖家带口的，例如朴灵大大，当然还有在大会上直接点评甚至喷嘉宾的那位童鞋，等等。很多的因素，让我除了技术上的收获外，更多的是体会到了这个社区很多不一样的一面，很多东西变得更立体，更鲜活。&lt;/p>
&lt;p>另外这次也跟很多开发者也相互交流过自己所在做的东西，所用到的技术，然后相互获取一些灵感。我觉得这种大会除去一些干货以外，更多的是提供一种平台，促成许多面对面的交流，然后认识一些新的朋友。毕竟线上和现实还是有区别的。&lt;/p>
&lt;p>嗯，最后希望 JSConf 越办越好， 南京，再见。&lt;/p>
- //imziv.com/posts/2016/%E5%8F%88%E8%A7%81%E5%8D%97%E4%BA%AC-jsconf%E4%B9%8B%E8%A1%8C/ - 2012-2020 Ziv小威</description></item><item><title>不要给自己制造过多的心理包袱</title><link>//imziv.com/posts/2016/%E4%B8%8D%E8%A6%81%E7%BB%99%E8%87%AA%E5%B7%B1%E5%88%B6%E9%80%A0%E8%BF%87%E5%A4%9A%E7%9A%84%E5%BF%83%E7%90%86%E5%8C%85%E8%A2%B1/</link><pubDate>Mon, 01 Aug 2016 00:38:08 +0000</pubDate><guid>//imziv.com/posts/2016/%E4%B8%8D%E8%A6%81%E7%BB%99%E8%87%AA%E5%B7%B1%E5%88%B6%E9%80%A0%E8%BF%87%E5%A4%9A%E7%9A%84%E5%BF%83%E7%90%86%E5%8C%85%E8%A2%B1/</guid><description>让美的事情发生 //imziv.com/posts/2016/%E4%B8%8D%E8%A6%81%E7%BB%99%E8%87%AA%E5%B7%B1%E5%88%B6%E9%80%A0%E8%BF%87%E5%A4%9A%E7%9A%84%E5%BF%83%E7%90%86%E5%8C%85%E8%A2%B1/ -&lt;p>碰巧在《旅行的艺术》中读到&lt;code>斯曼&lt;/code>的小说《逆流》的故事，主人公是一个愤世嫉俗的人，为了避免遇见他所认为人的丑陋和愚蠢，便足不出户，一人呆在家里阅读各种文学经典。突然某天透过狄更新的小说，被书中描述的伦敦所吸引，所以决定亲自去伦敦一睹真容。于是他换上了行装，坐火车到达了巴黎。然而就在开往伦敦的火车发车前，他突然想到到达伦敦后会面对各种吃穿住行的问题，脑补到各种不好的情况，于是思考一番后，觉着通过书籍一样可以达到了解伦敦的各种情况，遂又决然的带着行李返回到了家中。&lt;/p>
&lt;p>读到这个故事时候，我觉得跟生活中遇到的很多情况太相似了。当我们原本想去做一件事后，如果思考过多，带来了过度的思想包袱，很容易造成这件事情最后不了了之。但是如果当你对某个想法付诸实践行动后，由于现实的情况太过复杂，往往碰到的情况会大大超过你的预期，往往会造成开始即结束的局面。例如像天气，心情，甚至一阵风这样的因素都能影响你所要做的事情的方向和结果，就像蝴蝶效应一样。所以过高的心理预期，往往会阻碍事情的发生和发展。我们可以列举几个生活中的例子。&lt;/p>
&lt;p>例如和朋友出去游玩，出发前被各大旅游网站的宣传照片和文字描述所深深打动和吸引，很容易产生过高的预期，一切都想起起来那么美好。然而很可能当你从出门的那一刻开始，一切都变得可能不那么美好了。因为有可能一出门你就会碰到诸如堵车，需要乘坐长途汽车等等令人焦虑和疲乏的事情。当你抵达景点后，你很可能会发现，实际的风景好像和照片上的有出入，没有想象的那么震撼，为什么我拍不出宣传图上的效果。然后你可能会在某个景区走上一整天，人山人海，据说的&lt;code>美食&lt;/code>并没有你想象中该有的味道。心里面有那么一刻：“我这个 SB 为什么不呆在家睡觉&amp;quot;的感觉。&lt;/p>
&lt;p>又譬如曾经喜爱的小说要被改编成影视作品了。曾经看这部小说的时候，自己被感动的泪流满面，被故事的构思和情节所深深吸引，你甚至幻想过这些事情发生在自己身上。你用自己的想象力完成了男女主角的塑造，在自己内心烙上了深深的印记。当改编好的作品被搬上银幕时，你发现男主角是自己讨厌的演员，你感觉故事情节好像没有原小说那么感人深受，而宣传方所谓的大片效果也只值 5 毛钱，跟自己的想象的画面大相径庭。总之，你很失望，以致后来你对此类作品越来越不抱有任何期待，也越来越少的去影院类似小说改编的影视作品了。&lt;/p>
&lt;p>当期望的事情总不能完成或者实现后，这样很容易让生活堆积空虚的情绪。&lt;/p>
&lt;p>有时候周末会有些想法想去做，但最后都会由于各种原因而放弃。很多时候都是由于自己过多的思考，产生了心理包袱，从一开始的兴奋，到决定放弃。当然我并不是说当我们有想法做些事情的时候，就不需要理性的去思考，只是想说思考也需要克制，不要给自己设置过高的期望值，也不要给自己造成过度的心理负担，这个度掌握能力是需要长期锻炼的。然而当事情如果已经发生时，我们应该积极的响应，而不是发现跟预想不一样之后就选择逃避问题。既选之，则安之。&lt;/p>
- //imziv.com/posts/2016/%E4%B8%8D%E8%A6%81%E7%BB%99%E8%87%AA%E5%B7%B1%E5%88%B6%E9%80%A0%E8%BF%87%E5%A4%9A%E7%9A%84%E5%BF%83%E7%90%86%E5%8C%85%E8%A2%B1/ - 2012-2020 Ziv小威</description></item><item><title>实现图片的异步加载</title><link>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%9A%84%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/</link><pubDate>Mon, 27 Jun 2016 11:01:48 +0000</pubDate><guid>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%9A%84%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/</guid><description>让美的事情发生 //imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%9A%84%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/ -&lt;p>图片异步加载功能是现在 web 中非常常见的一个针对 web 做优化的方法。尤其是在移动端，面对大量的图片列表的时候，如果没有做相应的优化，会直接导致页面滑动和加载的卡顿，而且用户会莫名的发现当前应用占用的流量会很大，因为他可能都没有浏览到很多图片，而程序就自动加载了所以的图片，对于一个流量吃紧的人来讲，这个也是很讨厌的。所以实现按浏览需求加载时十分有必要的。&lt;/p>
&lt;p>其实实现图片异步加载的核心思路十分简单，就是通过判断当图片元素是否出现在视窗范围内后，则去加载图片资源，否则不加载。所以我们需要首先解决判断 img 元素是否处于视图范围内的这个核心问题。让我们看看下面的图：&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>通过抓取 img 元素，js 提供了相应的方法让我们可以获取到 img 元素距离视图 top，和 left 的距离，viewport 的高度和宽度等数据。然后通过监听窗口滚动事件，当页面滚动的时候，我们就去动态检测 img 元素的 top 和 left 值，与视窗的高度和宽度作比较，从而判断当前的 img 是否处于视窗范围。计算如下：&lt;/p>
&lt;blockquote>
&lt;p>处于垂直范围： 图片距离视窗顶部距离 &amp;gt; 0 &amp;amp;&amp;amp; 图片距离视窗顶部距离 &amp;lt;= 视窗高度 &lt;!-- raw HTML omitted -->
处于水平范围： 图片距离视窗左边距离 &amp;gt; 0 &amp;amp;&amp;amp; 图片距离视窗左边距离 &amp;lt;= 视窗宽度&lt;/p>
&lt;/blockquote>
&lt;p>解决了这个判断图片在可视范围内的核心问题后，那么其他的问题都是否简单了。我们看下详细代码：&lt;/p>
&lt;h4 id="获取视窗的高度和宽度">获取视窗的高度和宽度&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> _viewPortHeight = &lt;span style="color:#658b00">Math&lt;/span>.max(&lt;span style="color:#658b00">document&lt;/span>.documentElement.clientHeight, &lt;span style="color:#658b00">window&lt;/span>.innerHeight || &lt;span style="color:#b452cd">0&lt;/span>),
_viewPortWidth = &lt;span style="color:#658b00">Math&lt;/span>.max(&lt;span style="color:#658b00">document&lt;/span>.documentElement.clientWidth, &lt;span style="color:#658b00">window&lt;/span>.innerWidth || &lt;span style="color:#b452cd">0&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="是否处于垂直范围">是否处于垂直范围&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> isOnVerticalViewPort(ele) {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> rect = ele.getBoundingClientRect(); &lt;span style="color:#228b22">// 获取距离视窗的位置信息
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> rect.top &amp;gt; &lt;span style="color:#b452cd">0&lt;/span> &amp;amp;&amp;amp; rect.top &amp;lt;= _viewPortHeight;
};
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="是否处于水平范围">是否处于水平范围&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> isOnHorizontalViewPort(ele) {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> rect = ele.getBoundingClientRect();
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> rect.left &amp;gt; &lt;span style="color:#b452cd">0&lt;/span> &amp;amp;&amp;amp; rect.left &amp;lt;= _viewPortWidth;
};
&lt;/code>&lt;/pre>&lt;/div>&lt;p>有了这核心代码，我们只需要在滚动事件触发后，去动态的判断 img 元素了, 判断的示例代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> load(images) {
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> i = &lt;span style="color:#b452cd">0&lt;/span>; i &amp;lt; images.length; i++) {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> img = images[i];
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (isOnVerticalViewPort(img) &amp;amp;&amp;amp; isOnHorizontalViewPort(img)) {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> url = img.getAttribute(&lt;span style="color:#cd5555">&amp;#39;lz-src&amp;#39;&lt;/span>); &lt;span style="color:#228b22">// 获取图片资源的地址
&lt;/span>&lt;span style="color:#228b22">&lt;/span> img.setAttribute(&lt;span style="color:#cd5555">&amp;#34;src&amp;#34;&lt;/span>, url);
img.isload = &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>; &lt;span style="color:#228b22">// 加载过后的图片设置加载标记，以免重复加载
&lt;/span>&lt;span style="color:#228b22">&lt;/span> }
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="在-html-页面中的-img-元素的引用">在 html 页面中的 img 元素的引用&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html"> &amp;lt;&lt;span style="color:#8b008b;font-weight:bold">img&lt;/span> &lt;span style="color:#658b00">lz-src&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;http://s.cn.bing.net/az/hprichbg/rb/SkunkKit_ZH-CN10809503929_1920x1080.jpg&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">img&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过给 img 元素添加&lt;code>lz-src&lt;/code>标记，告诉异步脚本，这个元素需要异步加载图片。&lt;/p>
&lt;h4 id="监听滚动事件">监听滚动事件&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript"> &lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> images = &lt;span style="color:#658b00">document&lt;/span>.querySelectorAll(&lt;span style="color:#cd5555">&amp;#39;img[&amp;#39;&lt;/span> + lz-src + &lt;span style="color:#cd5555">&amp;#39;]&amp;#39;&lt;/span>); &lt;span style="color:#228b22">// 按标记获取图片元素
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#658b00">window&lt;/span>.addEventListener(&lt;span style="color:#cd5555">&amp;#34;scroll&amp;#34;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>(e) {
load(images);
}, &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="总结">总结&lt;/h4>
&lt;p>以上就是图片异步加载的主要代码了。当然里面可以进行跟多的性能优化，例如我这里每次都需要重新遍历图片列表，只是通过单独的加载标记来确认图片是否加载过，我们当然可以用不同的数组列表分别装载加载过和未加载的图片元素，从而降低遍历次数等等。另外也可以给图片添加过度的 loading 动画等等，让这个异步加载插件更完善。我这里有个较为完整的异步加载的代码，有兴趣的朋友可以查看：&lt;a href="https://github.com/wewoor/sloth">https://github.com/wewoor/sloth&lt;/a>&lt;/p>
- //imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%9A%84%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/ - 2012-2020 Ziv小威</description></item><item><title>Cordova 开发总结(插件篇）</title><link>//imziv.com/posts/2016/cordova-%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%E6%8F%92%E4%BB%B6%E7%AF%87/</link><pubDate>Fri, 24 Jun 2016 14:57:57 +0000</pubDate><guid>//imziv.com/posts/2016/cordova-%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%E6%8F%92%E4%BB%B6%E7%AF%87/</guid><description>让美的事情发生 //imziv.com/posts/2016/cordova-%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%E6%8F%92%E4%BB%B6%E7%AF%87/ -&lt;p>最近刚刚做完一个用 Cordova 开发了一款电子商务的应用。在选用 Cordova 前，我有考察过，国内的 Appcan, Apicloud 等等的解决方案。其实 Appcan，ApiCloud 的混合方案挺完整的，从开发，框架，到打包测试，数据统计都包含了，但是我还是更倾向于开源的 Cordova, 我相信开源社区的力量应该更强大，所以最终选择了 Cordova 作为解决方案。事实上，我用 Cordova 开发遇到目前所以需要的插件都是可以通过 Google 查找到的。在此总结下我用到的插件。&lt;/p>
&lt;h4 id="crosswalkhttpscrosswalk-projectorg">&lt;a href="https://crosswalk-project.org/">Crosswalk&lt;/a>&lt;/h4>
&lt;p>这是一个单独定制的 Webview 插件，包含了大部分最新的 HTML5 特性。Crosswork Cordova 插件目前只支持 Android, iOS 需要自己手动的集成。在如今安卓机这种测试机可以装一箱子都不止的情况下，使用统一的 Webview 是十分有必要的。可以避免大部分的兼容性问题，而且可以保持不错的性能。当然有个弊端就是添加这个插件，打包的 apk 会增加 20MB 左右。&lt;/p>
&lt;h4 id="极光推送jpushhttpsgithubcomjpushjpush-phonegap-plugin">&lt;a href="https://github.com/jpush/jpush-phonegap-plugin">极光推送(JPush)&lt;/a>&lt;/h4>
&lt;p>极光的推送插件在 Cordova 上的集成也是非常的方便，顺利的话 1 个小时就可以搞定。刚开始的时候我还有点慌，担心推送插件的集成问题，没想到看了下官网，有从 Cordova 的集成版本，还支持自动安装。&lt;/p>
&lt;h4 id="切页转场动画httppluginstelerikcomcordovapluginnative-page-transitions">&lt;a href="http://plugins.telerik.com/cordova/plugin/native-page-transitions">切页转场动画&lt;/a>&lt;/h4>
&lt;p>刚开始我利用 Angularjs 集成了 CSS3 的转场动画，打包跑在 iOS 上时其实还好，但是到 Android 端的时候，弊端尽显，实在不理想，最好我把转场动画都直接撤掉了，留下个 loading 动画。显然整个界面的切换就变的干巴巴了。最后找到&lt;a href="http://plugins.telerik.com/cordova/plugin/native-page-transitions">com.telerik.plugins.nativepagetransitions&lt;/a>这个转场插件。这个插件支持&lt;code>Slide&lt;/code>,&lt;code>Flip&lt;/code>,&lt;code>Fade&lt;/code>, &lt;code>Drawer&lt;/code>, &lt;code>Curl&lt;/code>等 5 种效果，集成和调用也很简单。&lt;/p>
&lt;h4 id="键盘插件keyboardhttpsgithubcomdriftycoionic-plugin-keyboard">&lt;a href="https://github.com/driftyco/ionic-plugin-keyboard">键盘插件（Keyboard)&lt;/a>&lt;/h4>
&lt;p>大家都知道在移动端调出键盘输入操作时，调出的键盘会挤出自己当前的界面，造成页面的样式错乱的问题。Keyboard 插件可以监听键盘的展示隐藏事件，禁止 input 时键盘出现界面滚动等等问题。&lt;/p>
&lt;h4 id="支付-alipayhttpsgithubcomcharleywcordova-plugin-alipay">&lt;a href="https://github.com/charleyw/cordova-plugin-alipay">支付 Alipay&lt;/a>&lt;/h4>
&lt;p>做移动应用肯定少不了支付，支付宝的 Cordova 插件其实很多，但我搜索了一圈还是这个比较好使~&lt;/p>
&lt;h4 id="总结">总结&lt;/h4>
&lt;p>以上是我用的几个主要插件，因为 Cordova 里面像&lt;code>Camera&lt;/code>, &lt;code>File&lt;/code>, 其他类型的插件太多太多了。完全可以根据自己的喜好来选择。总而言之，Cordova 本身由于这么多年时间的积累，造就了它在插件等等资源上的很多的优势。另外，微软刚刚开源的&lt;a href="https://www.xamarin.com/">Xamarin&lt;/a>据说也是个非常不错的混合开发方案，用 C#编写源码， 有机会试试~&lt;/p>
- //imziv.com/posts/2016/cordova-%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%E6%8F%92%E4%BB%B6%E7%AF%87/ - 2012-2020 Ziv小威</description></item><item><title>使用 iScroll 实现上拉或者下拉刷新</title><link>//imziv.com/posts/2016/%E4%BD%BF%E7%94%A8-iscroll-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E6%88%96%E8%80%85%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/</link><pubDate>Tue, 07 Jun 2016 11:56:52 +0000</pubDate><guid>//imziv.com/posts/2016/%E4%BD%BF%E7%94%A8-iscroll-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E6%88%96%E8%80%85%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/</guid><description>让美的事情发生 //imziv.com/posts/2016/%E4%BD%BF%E7%94%A8-iscroll-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E6%88%96%E8%80%85%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/ -&lt;p>上拉或者下拉刷新的需求在移动端是非常常见的需求，大部分情况下，实现这个效果都使用网上现有的解决方案，例如有人使用&lt;code>swiper&lt;/code>这个插件，
也有人使用&lt;code>iScroll&lt;/code>这个滚动插件。本文的示例是利用 iscroll 实现的下拉刷新效果。&lt;/p>
&lt;h2 id="iscroll-简介">iScroll 简介&lt;/h2>
&lt;p>&lt;code>iScrool&lt;/code>是目前最成熟的自定义滚动解决方案之一，在移动端和 PC 有很好的兼容性。iScroll 官方提供了 5 个不同的版本：&lt;/p>
&lt;ul>
&lt;li>iscroll.js 通用版 包含了大部分公共特性&lt;/li>
&lt;li>iscroll-lite.js 缩减版 削减了一些功能特性，例如：滚动条，鼠标滚轮等等&lt;/li>
&lt;li>iscroll-probe.js 探索版 此版本可以满足你获取滚动条位置的需求。&lt;/li>
&lt;li>iscroll-zoom.js 滚动缩放版&lt;/li>
&lt;li>iscroll-infinite.js 无限制版&lt;/li>
&lt;/ul>
&lt;p>根据不同的需求，选择相应的版本，当前的示例中，我们选择的是&lt;code>iscroll-probe.js&lt;/code>版。&lt;!-- raw HTML omitted -->
Gitbook 地址：&lt;a href="https://iiunknown.gitbooks.io/iscroll-5-api-cn/content/versions.html">iScroll API 中文版&lt;/a>&lt;/p>
&lt;h2 id="详细使用">详细使用&lt;/h2>
&lt;p>代码思路则是：利用监听滚动条的&lt;code>scroll&lt;/code>事件，判断下拉或者上拉的距离，做上触发距离标记，当&lt;code>scrollEnd&lt;/code>事件触发时，执行数据加载。让我们看核心部分代码：&lt;/p>
&lt;h3 id="html-代码结构">HTML 代码结构&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;MyScroller&amp;#34;&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;main&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;warpper&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;PullDown&amp;#34;&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;scroller-pullDown&amp;#34;&lt;/span> &lt;span style="color:#658b00">style&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;display: none;&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">img&lt;/span> &lt;span style="color:#658b00">style&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;width: 20px; height: 20px;&amp;#34;&lt;/span> &lt;span style="color:#658b00">src&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;rolling.svg&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">span&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;pullDown-msg&amp;#34;&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;pull-down-msg&amp;#34;&lt;/span>&amp;gt;下拉刷新&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">span&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">ul&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;Content&amp;#34;&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;dropdown-list&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">ul&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;PullUp&amp;#34;&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;scroller-pullUp&amp;#34;&lt;/span> &lt;span style="color:#658b00">style&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;display: none;&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">img&lt;/span> &lt;span style="color:#658b00">style&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;width: 20px; height: 20px;&amp;#34;&lt;/span> &lt;span style="color:#658b00">src&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;rolling.svg&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">span&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;pullUp-msg&amp;#34;&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;pull-up-msg&amp;#34;&lt;/span>&amp;gt;上拉刷新&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">span&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="css-样式">CSS 样式&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#008b45;font-weight:bold">scroller&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">position&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">relative&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">width&lt;/span>: &lt;span style="color:#b452cd">100&lt;/span>&lt;span style="color:#00688b;font-weight:bold">%&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">height&lt;/span>: &lt;span style="color:#b452cd">100&lt;/span>&lt;span style="color:#00688b;font-weight:bold">%&lt;/span>;
}
.&lt;span style="color:#008b45;font-weight:bold">scroller&lt;/span> .&lt;span style="color:#008b45;font-weight:bold">warpper&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">position&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">absolute&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">width&lt;/span>: &lt;span style="color:#b452cd">100&lt;/span>&lt;span style="color:#00688b;font-weight:bold">%&lt;/span>;
}
.&lt;span style="color:#008b45;font-weight:bold">scroller-pullDown&lt;/span>, .&lt;span style="color:#008b45;font-weight:bold">scroller-pullUp&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">width&lt;/span>: &lt;span style="color:#b452cd">100&lt;/span>&lt;span style="color:#00688b;font-weight:bold">%&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">height&lt;/span>: &lt;span style="color:#b452cd">30&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">padding&lt;/span>: &lt;span style="color:#b452cd">10&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span> &lt;span style="color:#b452cd">0&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">text-align&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">center&lt;/span>;
}
.&lt;span style="color:#008b45;font-weight:bold">dropdown-list&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">padding&lt;/span>: &lt;span style="color:#b452cd">0&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">margin&lt;/span>: &lt;span style="color:#b452cd">0&lt;/span>;
}
.&lt;span style="color:#008b45;font-weight:bold">dropdown-list&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">li&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">width&lt;/span>: &lt;span style="color:#b452cd">100&lt;/span>&lt;span style="color:#00688b;font-weight:bold">%&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">background&lt;/span>: &lt;span style="color:#b452cd">#ddd&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">line-height&lt;/span>: &lt;span style="color:#b452cd">45&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">text-align&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">center&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">color&lt;/span>: &lt;span style="color:#b452cd">#FFF&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">border-bottom&lt;/span>: &lt;span style="color:#b452cd">1&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">solid&lt;/span> &lt;span style="color:#b452cd">#FFF&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="javascript">javascript&lt;/h3>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> pullDown = &lt;span style="color:#658b00">document&lt;/span>.querySelector(&lt;span style="color:#cd5555">&amp;#34;#PullDown&amp;#34;&lt;/span>),
pullUp = &lt;span style="color:#658b00">document&lt;/span>.querySelector(&lt;span style="color:#cd5555">&amp;#34;#PullUp&amp;#34;&lt;/span>),
isPulled = &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>; &lt;span style="color:#228b22">// 拉动标记
&lt;/span>&lt;span style="color:#228b22">&lt;/span>
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> myScroll = &lt;span style="color:#8b008b;font-weight:bold">new&lt;/span> IScroll(&lt;span style="color:#cd5555">&amp;#39;#MyScroller&amp;#39;&lt;/span>, {
probeType: &lt;span style="color:#b452cd">3&lt;/span>,
mouseWheel: &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>,
scrollbars: &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>,
preventDefault: &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>,
fadeScrollbars: &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>
});
myScroll.on(&lt;span style="color:#cd5555">&amp;#39;scroll&amp;#39;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> height = &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.y,
bottomHeight = &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.maxScrollY - height;
&lt;span style="color:#228b22">// 控制下拉显示
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (height &amp;gt;= &lt;span style="color:#b452cd">60&lt;/span>) {
pullDown.style.display = &lt;span style="color:#cd5555">&amp;#34;block&amp;#34;&lt;/span>;
isPulled = &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span>;
}
&lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (height &amp;lt; &lt;span style="color:#b452cd">60&lt;/span> &amp;amp;&amp;amp; height &amp;gt;= &lt;span style="color:#b452cd">0&lt;/span>) {
pullDown.style.display = &lt;span style="color:#cd5555">&amp;#34;none&amp;#34;&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span>;
}
&lt;span style="color:#228b22">// 控制上拉显示
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (bottomHeight &amp;gt;= &lt;span style="color:#b452cd">60&lt;/span>) {
pullUp.style.display = &lt;span style="color:#cd5555">&amp;#34;block&amp;#34;&lt;/span>;
isPulled = &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span>;
}
&lt;span style="color:#8b008b;font-weight:bold">else&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (bottomHeight &amp;lt; &lt;span style="color:#b452cd">60&lt;/span> &amp;amp;&amp;amp; bottomHeight &amp;gt;= &lt;span style="color:#b452cd">0&lt;/span>) {
pullUp.style.display = &lt;span style="color:#cd5555">&amp;#34;none&amp;#34;&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span>;
}
})
myScroll.on(&lt;span style="color:#cd5555">&amp;#39;scrollEnd&amp;#39;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>() { &lt;span style="color:#228b22">// 滚动结束
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (isPulled) { &lt;span style="color:#228b22">// 如果达到触发条件，则执行加载
&lt;/span>&lt;span style="color:#228b22">&lt;/span> isPulled = &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>;
appendContent(getContents());
myScroll.refresh();
}
});
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="完整的-demo-请看">完整的 demo 请看&lt;/h3>
&lt;p>&lt;a href="http://wewoor.github.io/js-lab/iscroll-pulldown-load/index.html">http://wewoor.github.io/js-lab/iscroll-pulldown-load/index.html&lt;/a>&lt;/p>
&lt;h4 id="原文地址">原文地址&lt;/h4>
&lt;p>&lt;a href="http://imziv.com/blog/article/read.htm?id=73">http://imziv.com/blog/article/read.htm?id=73&lt;/a>&lt;/p>
- //imziv.com/posts/2016/%E4%BD%BF%E7%94%A8-iscroll-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E6%88%96%E8%80%85%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/ - 2012-2020 Ziv小威</description></item><item><title>实现 Checkbox 组件化(Component)</title><link>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0-checkbox-%E7%BB%84%E4%BB%B6%E5%8C%96component/</link><pubDate>Thu, 19 May 2016 19:53:50 +0000</pubDate><guid>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0-checkbox-%E7%BB%84%E4%BB%B6%E5%8C%96component/</guid><description>让美的事情发生 //imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0-checkbox-%E7%BB%84%E4%BB%B6%E5%8C%96component/ -- //imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0-checkbox-%E7%BB%84%E4%BB%B6%E5%8C%96component/ - 2012-2020 Ziv小威</description></item><item><title>CSS3 实现自定义 Checkbox</title><link>//imziv.com/posts/2016/css3-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89-checkbox/</link><pubDate>Sun, 17 Apr 2016 20:27:24 +0000</pubDate><guid>//imziv.com/posts/2016/css3-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89-checkbox/</guid><description>让美的事情发生 //imziv.com/posts/2016/css3-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89-checkbox/ -&lt;p>之前我写了一篇自定义 checkbox 的&lt;a href="http://imziv.com/blog/article/read.htm?id=71">文章&lt;/a>，通过 css3 实现自定义的 checkbox，并没有使用当今流行的 Reactjs, 或者 Vuejs 之类的进行组件化。但是很显然，这样封装的 checkbox 组件复用的时候非常麻烦。如果在新项目中使用的话，可能需要同时拷贝 css 和 html 文件进行整合。从 html 语义角度上讲，代码的易读性也不是很强，显然这样的组件显然不利于维护。&lt;/p>
&lt;p>其实 Web Component 是前端界一直非常热衷的一个领域，因为原生的 HTML 在维护复杂网页应用时，实在是太差了。所以才出现了诸如 Google 的&lt;code>Ploymer&lt;/code>、Facebook 的&lt;code>Reactjs&lt;/code>等等。而且很多&lt;code>MVVM&lt;/code>的框架也自带组件化的方案,例如&lt;code>Angularjs&lt;/code>的指令，但貌似&lt;code>ng&lt;/code>的这个用起来太复杂。用第三方组件化的框架去实现的话，你需要依赖框架本身很多东西，很多时候我们只是简单的几个组件，不是很大，也不是很多，所以为了保证组件的&lt;code>轻量，简单&lt;/code>,其实这个时候我们并不想采用第三方的框架。接下来我会介绍使用&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM">Shadow DOM&lt;/a>和&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/registerElement">&lt;code>registerElement&lt;/code>&lt;/a>的方式去实现组件化。&lt;/p>
&lt;p>先看看实现后的调用方式：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;line&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span>&amp;gt;checkbox1
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;mycheck&amp;#34;&lt;/span> &lt;span style="color:#658b00">checked&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;ComCheckbox&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;line&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span>&amp;gt;checkbox2
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;mycheck&amp;#34;&lt;/span> &lt;span style="color:#658b00">checked&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;ComCheckbox1&amp;#34;&lt;/span> &lt;span style="color:#658b00">value&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;2&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看起来是不是很简洁，调用自定义的&lt;code>checkbox&lt;/code>组件不需要那么多扰乱阅读的元素，只需要一个明确的&lt;code>check-box&lt;/code>标签，既可以表示&lt;code>checkbox&lt;/code>组件。效果如下：&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>好了看了效果，我们来看看具体怎么实现的吧。&lt;a href="http://wewoor.github.io/js-lab/component-checkbox/index.html">在线 demo 查看&lt;/a>&lt;/p>
&lt;h2 id="组件的组成">组件的组成&lt;/h2>
&lt;p>通常情况下，我们一个组件一般是由&lt;code>html&lt;/code>模板，&lt;code>css&lt;/code>样式，&lt;code>js&lt;/code>脚本逻辑三部分组成的。他们的作用我就不多废话了。至于当前组件的 css 样式自定义方法请看我上一篇文章&lt;a href="http://imziv.com/blog/article/read.htm?id=71">CSS3 实现自定义 checkbox&lt;/a>，这里我就不重复这部分了。&lt;/p>
&lt;ul>
&lt;li>在项目工作区新建一个&lt;code>component-checkbox.html&lt;/code>文件， 这个文件会被当做整个组件，在我们需要引用的页面中通过&lt;code>link&lt;/code>标记动态的引入。
&lt;code>component-checkbox.html&lt;/code>文件即包含了 HTML 模板，CSS 样式，JS 三个部分，他们在组件文件中的分布如下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">template&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">style&lt;/span>&amp;gt;// &lt;span style="color:#8b008b;font-weight:bold">放CSS样式定义&lt;/span>&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">style&lt;/span>&amp;gt;
// 放HTML标记
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">template&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">script&lt;/span> &lt;span style="color:#658b00">type&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;text/javascript&amp;#34;&lt;/span>&amp;gt;
&lt;span style="color:#228b22">// JS脚本逻辑
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="具体-htmlcss-定义">具体 HTML/CSS 定义&lt;/h2>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html"> &amp;lt;&lt;span style="color:#8b008b;font-weight:bold">template&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;CheckBox&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">style&lt;/span>&amp;gt;
.&lt;span style="color:#008b45;font-weight:bold">slide-checkbox&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">position&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">relative&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">width&lt;/span>: &lt;span style="color:#b452cd">120&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">height&lt;/span>: &lt;span style="color:#b452cd">40&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">line-height&lt;/span>: &lt;span style="color:#b452cd">40&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">border-radius&lt;/span>: &lt;span style="color:#b452cd">30&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">background&lt;/span>: &lt;span style="color:#b452cd">#4fbe79&lt;/span>;
}
.&lt;span style="color:#008b45;font-weight:bold">slide-checkbox&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">input&lt;/span>[&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span>=&lt;span style="color:#8b008b;font-weight:bold">checkbox&lt;/span>] {
&lt;span style="color:#8b008b;font-weight:bold">visibility&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">hidden&lt;/span>;
}
.&lt;span style="color:#008b45;font-weight:bold">slide-checkbox&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">label&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">position&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">absolute&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">height&lt;/span>: &lt;span style="color:#b452cd">30&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">width&lt;/span>: &lt;span style="color:#b452cd">30&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">left&lt;/span>: &lt;span style="color:#b452cd">5&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">top&lt;/span>: &lt;span style="color:#b452cd">5&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">background&lt;/span>: &lt;span style="color:#b452cd">#FFFFFF&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">border-radius&lt;/span>: &lt;span style="color:#b452cd">50&lt;/span>&lt;span style="color:#00688b;font-weight:bold">%&lt;/span> &lt;span style="color:#b452cd">50&lt;/span>&lt;span style="color:#00688b;font-weight:bold">%&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">-webkit-&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">transition&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">all&lt;/span> &lt;span style="color:#b452cd">.4&lt;/span>&lt;span style="color:#00688b;font-weight:bold">s&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">ease&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">-moz-&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">transition&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">all&lt;/span> &lt;span style="color:#b452cd">.4&lt;/span>&lt;span style="color:#00688b;font-weight:bold">s&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">ease&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">-o-&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">transition&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">all&lt;/span> &lt;span style="color:#b452cd">.4&lt;/span>&lt;span style="color:#00688b;font-weight:bold">s&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">ease&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">-ms-&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">transition&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">all&lt;/span> &lt;span style="color:#b452cd">.4&lt;/span>&lt;span style="color:#00688b;font-weight:bold">s&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">ease&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">transition&lt;/span>: &lt;span style="color:#8b008b;font-weight:bold">all&lt;/span> &lt;span style="color:#b452cd">.4&lt;/span>&lt;span style="color:#00688b;font-weight:bold">s&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">ease&lt;/span>;
}
.&lt;span style="color:#008b45;font-weight:bold">slide-checkbox&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">input&lt;/span>[&lt;span style="color:#8b008b;font-weight:bold">type&lt;/span>=&lt;span style="color:#8b008b;font-weight:bold">checkbox&lt;/span>]:&lt;span style="color:#707a7c">checked&lt;/span> + &lt;span style="color:#8b008b;font-weight:bold">label&lt;/span> {
&lt;span style="color:#8b008b;font-weight:bold">left&lt;/span>: &lt;span style="color:#b452cd">85&lt;/span>&lt;span style="color:#00688b;font-weight:bold">px&lt;/span>;
}
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">style&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;slide-checkbox&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">input&lt;/span> &lt;span style="color:#658b00">type&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;checkbox&amp;#34;&lt;/span> &lt;span style="color:#658b00">name&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;checkbox&amp;#34;&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;SlideCheck&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span> &lt;span style="color:#658b00">for&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;SlideCheck&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">template&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="js-的实现">JS 的实现&lt;/h2>
&lt;p>这种组件实现发方法，重点地方就在 JS 脚本这个部分，所以请看下面的详细描述。&lt;/p>
&lt;h4 id="1-shadow-dom-说明">1. Shadow DOM 说明&lt;/h4>
&lt;p>Shadow DOM 提供了一种独立封装`html&amp;rsquo;, &amp;lsquo;css&amp;rsquo;, &amp;lsquo;js&amp;rsquo;到组件文件的一种方法，这样 Shadow DOM 内部的样式文件及 js 等等都与引用页面处于隔离状态，互相独立，所以不必担心他们之间会不会出现样式，js 相互乱引用的情况出现。当然调用页面与 Shadow DOM 的通信则需要通过 js 来完成。&lt;/p>
&lt;h4 id="2-registerelement-说明">2. registerElement 说明&lt;/h4>
&lt;p>可以在浏览器中实现自定义 element, 当然会有人想到说&amp;rsquo;document.createElement()&amp;lsquo;方法也可以创建不同的元素，但是很显然&lt;code>registerElement&lt;/code>更强大些，具体就不展开了。&lt;/p>
&lt;h4 id="3-详细-js-代码">3. 详细 JS 代码&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#228b22">// Whether registerElement is supported
&lt;/span>&lt;span style="color:#228b22">&lt;/span>&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> isCustomElementSupported() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#cd5555">&amp;#39;registerElement&amp;#39;&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">in&lt;/span> &lt;span style="color:#658b00">document&lt;/span>;
}
(&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>() {
&lt;span style="color:#cd5555">&amp;#34;use strict&amp;#34;&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (isCustomElementSupported()) {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> objectPrototype = &lt;span style="color:#658b00">Object&lt;/span>.create(HTMLElement.prototype);
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> selfDoc = &lt;span style="color:#658b00">document&lt;/span>.currentScript.ownerDocument;
&lt;span style="color:#658b00">Object&lt;/span>.defineProperty(objectPrototype, &lt;span style="color:#cd5555">&amp;#39;value&amp;#39;&lt;/span>, {
get: &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.getAttribute(&lt;span style="color:#cd5555">&amp;#34;value&amp;#34;&lt;/span>) || &lt;span style="color:#8b008b;font-weight:bold">null&lt;/span>;
},
set: &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>(value) {
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.setAttribute(&lt;span style="color:#cd5555">&amp;#34;value&amp;#34;&lt;/span>, value);
}
});
&lt;span style="color:#658b00">Object&lt;/span>.defineProperty(objectPrototype, &lt;span style="color:#cd5555">&amp;#39;checked&amp;#39;&lt;/span>, {
get: &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">return&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.getAttribute(&lt;span style="color:#cd5555">&amp;#34;checked&amp;#34;&lt;/span>) || &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>;
},
set: &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>(isChecked) {
shadowChecked(&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>, isChecked);
&lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.setAttribute(&lt;span style="color:#cd5555">&amp;#34;checked&amp;#34;&lt;/span>, isChecked);
}
});
objectPrototype.createdCallback = &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>() {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> self = &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>;
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> rootElement = self.createShadowRoot();
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> templateContent = selfDoc.querySelector(&lt;span style="color:#cd5555">&amp;#34;#CheckBox&amp;#34;&lt;/span>).content;
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> nodes = &lt;span style="color:#658b00">document&lt;/span>.importNode(templateContent, &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>);
&lt;span style="color:#228b22">// Add template content to shadowRoot element
&lt;/span>&lt;span style="color:#228b22">&lt;/span> rootElement.appendChild(nodes);
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> checkbox = rootElement.querySelector(&lt;span style="color:#cd5555">&amp;#34;#SlideCheck&amp;#34;&lt;/span>);
&lt;span style="color:#228b22">// init checked value
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">if&lt;/span> (self.checked == &lt;span style="color:#cd5555">&amp;#34;true&amp;#34;&lt;/span>) {
checkbox.checked = &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>;
}
&lt;span style="color:#228b22">// Add change event to checkbox
&lt;/span>&lt;span style="color:#228b22">&lt;/span> checkbox.addEventListener(&lt;span style="color:#cd5555">&amp;#39;change&amp;#39;&lt;/span>, &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span>() {
self.checked = &lt;span style="color:#8b008b;font-weight:bold">this&lt;/span>.checked;
});
};
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> checkbox = &lt;span style="color:#658b00">document&lt;/span>.registerElement(&lt;span style="color:#cd5555">&amp;#39;check-box&amp;#39;&lt;/span>, {
prototype: objectPrototype
});
}
&lt;span style="color:#228b22">// update shadow root
&lt;/span>&lt;span style="color:#228b22">&lt;/span> &lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> shadowChecked(self, isChecked) {
&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> shadowCheck = self.shadowRoot.querySelector(&lt;span style="color:#cd5555">&amp;#34;#SlideCheck&amp;#34;&lt;/span>);
shadowCheck.checked = isChecked;
}
})();
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="4-代码描述">4. 代码描述&lt;/h4>
&lt;p>该代码片段先定义了一个&lt;code>registerElement&lt;/code>支持情况的检测方法。在匿名函数中先经过支持检测后，通过&lt;code>Object&lt;/code>对象创建了有一个&lt;code>HTMLElement&lt;/code>的原型对象，用于注册 checkbox 继承&lt;code>HTMLElement&lt;/code>时使用。 同时我们在原型对象上定义了&lt;code>checked&lt;/code>和&lt;code>value&lt;/code>对象，方便调用组件时使用。通过&lt;code>get&lt;/code>,&lt;code>set&lt;/code>方法我们与其相对应的&lt;code>checked&lt;/code>和&lt;code>value&lt;/code>属性（attribute)产生联系，便于数据通信。&lt;/p>
&lt;p>&lt;code>createdCallback&lt;/code>方法在组件被创建后执行。首先将获取到&lt;code>template&lt;/code>里的内容添加到&lt;code>rootElement&lt;/code>中， 添加完后我们便可以进行一些初始化组件的操作。例如初始化&lt;code>checked&lt;/code>的状态值， 模板内置的&lt;code>checkbox&lt;/code>添加&lt;code>change&lt;/code>的事件绑定，便于实时更新组件当前的&lt;code>checked&lt;/code>值。&lt;/p>
&lt;h2 id="组件的使用">组件的使用&lt;/h2>
&lt;h4 id="1-引用组件">1. 引用组件&lt;/h4>
&lt;p>首先我们需要在要使用该组件的 HTMl 页面中引入组件文件。&lt;!-- raw HTML omitted -->
&lt;em>注：由于该文件是用过 HTTP 读取过来的，所以静态项目可能无法获取组件文件，需要把这些文件放到服务器目录下去访问。&lt;/em>
引入方式：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">link&lt;/span> &lt;span style="color:#658b00">rel&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;import&amp;#34;&lt;/span> &lt;span style="color:#658b00">href&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;com-checkbox.html&amp;#34;&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-使用">2. 使用&lt;/h4>
&lt;p>在需要使用该组件的位置放入组件标签即可：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;mycheck&amp;#34;&lt;/span> &lt;span style="color:#658b00">checked&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#658b00">value&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;ComCheckbox&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>注：&lt;code>class&lt;/code>为样式类名，checked 为初始化状态, value 为 checkbox 值。&lt;/em>&lt;/p>
&lt;p>当然你也可以多次引用组件，例如同时使用 4 个，实际状况中可能会更多：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;line&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span>&amp;gt;checkbox1
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;mycheck&amp;#34;&lt;/span> &lt;span style="color:#658b00">checked&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#658b00">value&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;1&amp;#34;&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;ComCheckbox&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;line&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span>&amp;gt;checkbox2
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;mycheck&amp;#34;&lt;/span> &lt;span style="color:#658b00">checked&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;false&amp;#34;&lt;/span> &lt;span style="color:#658b00">value&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;2&amp;#34;&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;ComCheckbox1&amp;#34;&lt;/span> &lt;span style="color:#658b00">value&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;2&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;line&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span>&amp;gt;checkbox3
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;mycheck&amp;#34;&lt;/span> &lt;span style="color:#658b00">value&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;3&amp;#34;&lt;/span> &lt;span style="color:#658b00">checked&lt;/span>=&lt;span style="color:#cd5555">false&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;ComCheckbox2&amp;#34;&lt;/span> &lt;span style="color:#658b00">value&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;3&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;line&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span>&amp;gt;checkbox4
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span> &lt;span style="color:#658b00">class&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;mycheck&amp;#34;&lt;/span> &lt;span style="color:#658b00">value&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;4&amp;#34;&lt;/span> &lt;span style="color:#658b00">checked&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;true&amp;#34;&lt;/span> &lt;span style="color:#658b00">id&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;ComCheckbox3&amp;#34;&lt;/span> &lt;span style="color:#658b00">value&lt;/span>=&lt;span style="color:#cd5555">&amp;#34;4&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">check-box&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#8b008b;font-weight:bold">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-获取-check-box-的状态和值">3. 获取 check-box 的状态和值&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> checkbox = &lt;span style="color:#658b00">document&lt;/span>.querySelector(&lt;span style="color:#cd5555">&amp;#34;#ComCheckbox&amp;#34;&lt;/span>);
console.log(checkbox.checked); &lt;span style="color:#228b22">// output: true
&lt;/span>&lt;span style="color:#228b22">&lt;/span>console.log(checkbox.value); &lt;span style="color:#228b22">// output: 1
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据 ID 获取元素，可通过&lt;code>checked&lt;/code>和&lt;code>value&lt;/code>对象直接访问。&lt;/p>
&lt;h4 id="4-实现-checkbox-全选和取消">4. 实现 checkbox 全选和取消&lt;/h4>
&lt;div class="highlight">&lt;pre style="background-color:#eed;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#8b008b;font-weight:bold">var&lt;/span> checkboxs = &lt;span style="color:#658b00">document&lt;/span>.querySelectorAll(&lt;span style="color:#cd5555">&amp;#34;com-checkbox&amp;#34;&lt;/span>);
&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> selectAll() {
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (i = &lt;span style="color:#b452cd">0&lt;/span>; i &amp;lt; checkboxs.length; i++) {
checkboxs[i].checked = &lt;span style="color:#8b008b;font-weight:bold">true&lt;/span>;
}
}
&lt;span style="color:#8b008b;font-weight:bold">function&lt;/span> cancleSelectAll() {
&lt;span style="color:#8b008b;font-weight:bold">for&lt;/span> (i = &lt;span style="color:#b452cd">0&lt;/span>; i &amp;lt; checkboxs.length; i++) {
checkboxs[i].checked = &lt;span style="color:#8b008b;font-weight:bold">false&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取所以的&lt;code>checkbox&lt;/code>列表， 然后遍历改变&lt;code>checked&lt;/code>的状态。其他复杂操作或者情况可以再组件定义时进行扩展。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>以上便是整个组件定义的具体方法。当然今天我们自定义的是&lt;code>checkbox&lt;/code>组件，我们当然可以通过该方法去实现其他的组件，例如&lt;code>radio&lt;/code>,&lt;code>select&lt;/code>等等。&lt;/p>
&lt;h4 id="原文地址httpimzivcomblogarticlereadhtmid72httpimzivcomblogarticlereadhtmid72">原文地址：&lt;a href="http://imziv.com/blog/article/read.htm?id=72">http://imziv.com/blog/article/read.htm?id=72&lt;/a>&lt;/h4>
- //imziv.com/posts/2016/css3-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89-checkbox/ - 2012-2020 Ziv小威</description></item><item><title>老博客升级</title><link>//imziv.com/posts/2016/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7/</link><pubDate>Mon, 04 Apr 2016 23:55:53 +0000</pubDate><guid>//imziv.com/posts/2016/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7/</guid><description>让美的事情发生 //imziv.com/posts/2016/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7/ -- //imziv.com/posts/2016/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7/ - 2012-2020 Ziv小威</description></item><item><title>《江城》读后小记</title><link>//imziv.com/posts/2016/%E6%B1%9F%E5%9F%8E%E8%AF%BB%E5%90%8E%E5%B0%8F%E8%AE%B0/</link><pubDate>Sat, 23 Jan 2016 00:38:08 +0000</pubDate><guid>//imziv.com/posts/2016/%E6%B1%9F%E5%9F%8E%E8%AF%BB%E5%90%8E%E5%B0%8F%E8%AE%B0/</guid><description>让美的事情发生 //imziv.com/posts/2016/%E6%B1%9F%E5%9F%8E%E8%AF%BB%E5%90%8E%E5%B0%8F%E8%AE%B0/ -&lt;p>当我将要读完这本书的时候，竟然产生了一种依依不舍的感觉，感觉何伟这个我们曾经走在一条道路上的朋友，终于告诉了我们，他要离我们而去了一样。&lt;/p>
&lt;p>作者用自己的生活琐事记录了那个年代的中国，一个跌跌撞撞缓慢成长的中国。文中描述了很多关于文革后遗症，计划生育，重男轻女，三峡工程，人口贩子等等很典型的中国问题。让我感觉到比较悲哀的是，从作者到中国至离开到现在已经过去了几十年，很多问题依然典型，经济虽然增长很快，但文化，民智，思想觉悟却有时给人不进而退的错觉。&lt;/p>
&lt;p>总之，很感激这本书让我从不同的角度去认识了自己所生存的环境。&lt;/p>
- //imziv.com/posts/2016/%E6%B1%9F%E5%9F%8E%E8%AF%BB%E5%90%8E%E5%B0%8F%E8%AE%B0/ - 2012-2020 Ziv小威</description></item><item><title>2015 年终总结</title><link>//imziv.com/posts/2016/2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>//imziv.com/posts/2016/2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid><description>让美的事情发生 //imziv.com/posts/2016/2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/ -&lt;p>大概一年前，我感觉自己是个全才，我觉得自己什么都能干，服务端，设计，产品，前端。但是经过近一年的思考和学习，我逐渐发现当你打开其中一扇门之后，才发现门后的世界是如此之大，才知道自己在此之前一直连个门都没入。所以我觉得专注是如此的重要，会做一件事情和做好一件事情是如此的千差万别。&lt;/p>
&lt;h3 id="工作">工作&lt;/h3>
&lt;p>总结过去一年，我觉得自己最大的变化就是从过去的一个半服务端开发半前端开发的角色转换为现在专注的前端。这是一个很挣扎的过程，记得在我刚开始学习编程的时候，当时的方向是 C++的，但是同样的再后来的不断学习接触过程当中，我后来选择了 Java 语言作为我后来的方向。&lt;/p>
&lt;p>经过近 2 年多的工作，经过不断的尝试和摸索，发现自己对于用户体验上面的东西比较关注，而且自己是个比较爱创造的人，所以经过一段时间的思考，最后决定专注在前端上面。&lt;/p>
&lt;p>或许有些人会问，你专注前端，那是不是以后就只是写些 Css HTML,Javascript 这些东西了。其实我觉得前端其实就是用户体验交互，而且我决定这么去理解一个前端的工作是比较浅显的认识，我们可以对自己的要求更高一些，也许工作中并不需要。前端工程师不仅仅只是写些 Javascript，CSS 之类的, 为了实现各种人机交互，用什么工具语言都有可能。重点是如何利用好手中的工具，实现理想的交互体验。&lt;/p>
&lt;h3 id="学习">学习&lt;/h3>
&lt;p>我也是近一年才觉得豆瓣是个好东西，或者说是个很不错的产品。我在豆瓣书单上面收录了近 50 多本书（&lt;a href="http://book.douban.com/people/54220755/">书单&lt;/a>)，有一半计划读的，还有一部分是过去读过和近一年阅读的。本来计划的每晚睡前阅读一小时，并且能保持一定的阅读质量，但是发现自己每周能做到的部分不是很多，但是值得庆幸的是，这个习惯我是越来越适应，坚持阅读的感觉也比以前越来越好了。&lt;/p>
&lt;p>在一年前，我觉得我低估了阅读和写作的力量，经过近一年的断断续续的坚持，我逐渐发现这种学习表达方式对自己的帮助非常大。不过我计划里是每两周出一篇文章，技术，看法，想法，任何东西都可以。但是回头看今年我才完成了 10 多篇，自控力需要进一步提高。&lt;/p>
&lt;p>英语过去一年还是有明显的提升的，从之前看到英文就会有逃惧的心理，到如今至少能面对，并且能看懂一大部分，当然这显然还不够，需要做更多的努力。在学习英文方面期间还有段小插曲，去培训机构试上了几天，但是我发现以我目前的状态根本就不适合，所以最终放弃了。本身有指定学习计划，但是我根本就不能坚持，所以我还是想慢慢来，再和自己较较劲。&lt;/p>
&lt;h3 id="感情">感情&lt;/h3>
&lt;p>经常有人说我是一个情商低的人，大概很多年前我并不认同这一观点，而且我从来没觉得我情商低，我一直认为你们所谓的那些情商只是对待事物的不同选择方式而已，而每个人都有自己的处事方式。但是经过近几年的社会漂泊，终于逐渐让我体会到自己在这方面的欠缺，尤其是在与异性的沟通交流上，我觉得自己还是有障碍的。我完全相信，女性是这个星球上最深奥难懂的生物。&lt;/p>
&lt;p>但是作为一个，单身男，爱好女的人来讲，我不得不开始正视自己的问题，通过改变自身和学习去提高这方面的意识。我是个从未向人回避过我是有些大男子主义的男生，当然很多年前我并不知道这个形容词的意味。另一方面，我觉得个人过去的经历让我在感情方面多了很多顾虑，例如对感情不自信，不善表达，不够勇敢，又或者自以为是。&lt;/p>
&lt;p>总而言之，单身给我带来的最大的好处就是，我有了更多时间学习和写代码。这也许是一种不错的自我安慰方式。&lt;/p>
&lt;h3 id="锻炼">锻炼&lt;/h3>
&lt;p>以前有个毛病，喜欢想很多，想很久远的事情，但是我逐渐发现，想太多是一件很不好的事情，过多的事情的积压，会打击你的信心，从而让坚持变为一件很难的事情。例如，看到健身身材很棒的人，就会(ˇˍˇ） 想～立马也变成那样，所以兴奋的马上去办健身卡，到最后发现自己根本无法坚持。到如今我能坚持一周至少能保证两到三次的很小的锻炼，利用瑜伽垫进行 1 到 2 组的俯卧撑，仰卧起坐的锻炼，每次量也不大，20 到 30 个左右。虽然这种训练不能让我身材变的如何，但是我发现通过这种简单的轻松的习惯，让我的自控力有了提升。这种方法我也是通过&lt;a href="http://book.douban.com/subject/10786473/">《自控力》&lt;/a>这本书中习来的。最关键的是，我发现这样一组运动后，我更有进入阅读或者学习的状态。另外，我最近也有坚持每周一次游泳，对于我们这种行业来讲，游泳是一种很不错的选择。&lt;/p>
&lt;h3 id="新年">新年&lt;/h3>
&lt;p>另外对于现在的工作我想说的就是：“只有你想不到，没有我做不到”。 （牛 B 哄哄）&lt;/p>
&lt;p>对于工作和生活来讲，去体验更多自己想做的事情，提高做事的效率，把现有的计划执行的更好，找到人生中的另一半这些都是我要做的事情。&lt;/p>
&lt;p>有时候回头想想，觉得自己的生活很无聊，但是生活本身不就是枯燥的吗？学会在枯燥，浮躁的生活中寻得一份宁静，去体会生活，去改变和寻找自己本身，这本身就是一种修行。学会自娱自乐，学会发现和寻找生活中的乐趣，本身就是一件不易的事情。所以每次这样想来，也就能寻得一些自我慰藉了。&lt;/p>
- //imziv.com/posts/2016/2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/ - 2012-2020 Ziv小威</description></item></channel></rss>