<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算机科学 on 让美的事情发生</title><link>//imziv.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/</link><description>Recent content in 计算机科学 on 让美的事情发生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2012-2020 Ziv小威</copyright><lastBuildDate>Thu, 16 Dec 2021 14:00:00 +0000</lastBuildDate><atom:link href="//imziv.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/index.xml" rel="self" type="application/rss+xml"/><item><title>我们开源了一个轻量的 Web IDE UI 框架 - Molecule</title><link>//imziv.com/posts/2021/%E6%88%91%E4%BB%AC%E5%BC%80%E6%BA%90%E4%BA%86%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E7%9A%84-web-ide-ui-%E6%A1%86%E6%9E%B6/</link><pubDate>Thu, 16 Dec 2021 14:00:00 +0000</pubDate><guid>//imziv.com/posts/2021/%E6%88%91%E4%BB%AC%E5%BC%80%E6%BA%90%E4%BA%86%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E7%9A%84-web-ide-ui-%E6%A1%86%E6%9E%B6/</guid><description>Molecule 一个轻量的 Web IDE UI 框架
简介 Molecule 是一个受 VS Code 启发，使用 React.js 构建的 Web IDE UI 框架。通过一种类似 VS Code 扩展机制（Extension），可快速、轻松搭建一个高度抽象的 Web IDE UI 系统。同时基于 Monaco Editor，内置集成了 QuickAccess 和 Keybinding 等功能，并提供了简单的 API 以供使用。
得益于扩展机制和 React 组件化技术，Molecule 可以针对例如 Workbench UI、 ColorTheme 、自定义热键、快捷访问等功能进行自定义扩展。另外，开发者可将业务代码和 IDE UI 架构解耦，在保持业务高速迭代的同时，产品交互体验依然保持良好的可持续进化能力。
动机 数栈（DTInsight） 中例如离线、实时任务开发，算法开发等产品，它们的直接使用人员大部分都是开发者，需要在 Web 上完成代码编写，调试等工作。所以，我们也希望给开发人员创造一个良好的在线 IDE 开发体验。
早期的数栈开发平台
上图中的 RD-OS 是我们数栈开发平台早期的版本，当时产品功能本身比较简单。前端在初期的实现上，基于 React + Ant Design + Codemirror 来搭建的整个 IDE UI 界面。另外，由于当时我们多个产品都有这个 Workbench 的场景，我们还抽象了一个简单且单纯 的 IDE Workbench UI 的 React 组件，以供其他产品复用。</description></item><item><title>了解和实践 Typescript 的泛型 （Generics）</title><link>//imziv.com/posts/2019/%E4%BA%86%E8%A7%A3%E5%92%8C%E5%AE%9E%E8%B7%B5-typescript-%E7%9A%84%E6%B3%9B%E5%9E%8B-generics/</link><pubDate>Thu, 25 Jul 2019 21:51:40 +0000</pubDate><guid>//imziv.com/posts/2019/%E4%BA%86%E8%A7%A3%E5%92%8C%E5%AE%9E%E8%B7%B5-typescript-%E7%9A%84%E6%B3%9B%E5%9E%8B-generics/</guid><description>考虑如下场景 我们现在自己封装了一个 Table 组件，该组件提供 data 和 columns 两个属性，我们希望用户在使用组件时，编辑器能针对 data与column的值类型进行约束，而不是任意的一个值, 如下图所示：
public render() { const users = [{ name: &amp;#39;ziv&amp;#39;, birth: &amp;#34;1991&amp;#34; }]; const columns = [ { Key: &amp;#34;id&amp;#34;, name: &amp;#34;ID&amp;#34;, dataIndex: &amp;#34;id&amp;#34; }, { key: &amp;#34;name&amp;#34;, name: &amp;#34;姓名&amp;#34;, dataIndex: &amp;#34;name&amp;#34; }, ]; return ( &amp;lt;div&amp;gt; &amp;lt;Table data={users} columns={columns}/&amp;gt; &amp;lt;/div&amp;gt; ); } 正如上图所示，我columns中取数据的dataIndex字段，在传入的 users列表中是不存在的，所以结果是数据无法正常获取。 那么有没有办法在代码执行前就检测出这个问题呢？让我们看看用泛型如何解决这个问题。
泛型的基本语法 泛型（Generic）提供了一种在消费API对象时按需添加约束类型的能力，从而不必固定在某个单一的类型约束上，而是按使用的实际情况时具体约束。
基本用法如下：
函数（function) 语法
function A&amp;lt;T&amp;gt; {} function B&amp;lt;T,K&amp;gt; {} 使用
function getProperty&amp;lt;T, K extends keyof T&amp;gt;(obj: T, key: K) { return obj[key]; } let x = { a: 1, b: 2, c: 3, d: 4 }; getProperty(x, &amp;#34;a&amp;#34;); // okay getProperty(x, &amp;#34;m&amp;#34;); // error: Argument of type &amp;#39;m&amp;#39; isn&amp;#39;t assignable to &amp;#39;a&amp;#39; | &amp;#39;b&amp;#39; | &amp;#39;c&amp;#39; | &amp;#39;d&amp;#39;.</description></item><item><title>测试不该是软件构建质量唯一的防线</title><link>//imziv.com/posts/2019/%E6%B5%8B%E8%AF%95%E4%B8%8D%E8%AF%A5%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%84%E5%BB%BA%E8%B4%A8%E9%87%8F%E5%94%AF%E4%B8%80%E7%9A%84%E9%98%B2%E7%BA%BF/</link><pubDate>Thu, 04 Jul 2019 14:10:51 +0000</pubDate><guid>//imziv.com/posts/2019/%E6%B5%8B%E8%AF%95%E4%B8%8D%E8%AF%A5%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%84%E5%BB%BA%E8%B4%A8%E9%87%8F%E5%94%AF%E4%B8%80%E7%9A%84%E9%98%B2%E7%BA%BF/</guid><description>在实际项目开发过程中，我们经常会看到一个现象，很多团队把产品质量全押宝在测试环节上，这显然是不够科学的。测试只是发现问题的一种手段，而本身不能解决问题。而产品质量问题是个体系问题，体系问题则需要系统的解决方法，所以押宝在任一环节都不足以达到我们所期望的结果。开发团队陷入这种思维的原因，往往还是构建环节上的问题，而对”软件工程“的理解决定了我们所采用的构建方法。采用什么样的态度与方法，很大程度上是取决于我们如何看待”软件开发“这件事情。
用生活中的意象来描述软件开发中的问题是一种非常方便的帮助我们理解软件开发中的概念和问题的方法，例如我们用 Bug 这个单词表示软件缺陷。不同的意象决定了我们对待其构建的方法，而不同的构建方法决定了我们项目的成败和质量。如果你把软件开发理解为”写作“，那么可能就偏随性一些，想到哪写到哪，如果你理解为软件开发为盖间房子或者一大栋房子，那么我们采取的方法自然就是千差万别。很显然，实际的项目复杂度和工程量是千差万别的，要求也可能不尽相同，不同的情况我们需要采取相对应的开发方法，更有利于我们按时，按质量的完成开发目标。
不同构建环节的缺陷检测率 我都熟悉软件开发的一些主要环节（详细设计、编码、调试、集成、开发者测试), 而其中开发者测试又分单元测试，集成测试等部分。可想而知，软件开发包含如此多的活动，而且各个环节都需要不同的人员进行相互配合，遵循木桶原理，任何环节的短缺都不足以早出质量过硬的产品。下图展示了各个开发环节对软件缺陷检测率的影响情况：
上图的数据还是比较有意思的。如果不算上大规模 Beta 测试，在所有检错措施中，最低检出率最高的是正式代码检查阶段，为 45%，典型检出率最高则为建立模型或者原型 65%，最好检出率则仍然是建立模型或者原型这一措施。从整个检错措施中我们可以看出，无论是哪一项措施都无法到达足够的检出率，所以现实开发中，往往是会结合多个措施作用到项目上，才能达到比较好的结果。
现实中的软件开发工作比较复杂，受限于例如人员、时间、团队等资源因素的限制，所以并不是所有的构建方法都会使用这种构建组合，而是适当的根据自己的情况做一些调整。下图是极限编程（Extreme Programming）缺陷检出率的一份评估表：
极限编程是一种轻量级的软件工程方法，其提倡对需求能做快速响应。所以在整个构建活动上也是有所缩减。目前很多小型团队都是采用这种软件工程的方法论。
形成合适团队的构建方法 很显然没有完美的构建方法，受限于业务模式，团队，时间等各种因素的制约，我们很难按照一些软件工程的方法论进行全面实践，需要适当的对一些环节进行裁剪和调整。《代码大全》在书中推荐了一种基本的构建质量的组合：
对所有的需求，架构，系统关键部分的设计进行正式检查 建模或者创建原型 (原型评审，设计检查) 代码阅读或者检查 执行测试（单元测试，集成测试，回归测试） 即使缩短到这么几个构建环节，很多团队都做不好，或者是做不了，例如在实际工作中，我发现很多团队原型评审上很粗糙，没有代码审查，测试只有基本的功能测试，对于一个想挣钱的商业项目来讲，这显然是不够可靠的。
至此，在给产品做质量体系建立工作的时候，越早设立质量目标，且越早做规划越好。测试显然是非常重要的一环，不过想要达到更高的质量目标，我们应该尽量使用组合拳。</description></item><item><title>数栈前端项目的 Code Review 实践小结</title><link>//imziv.com/posts/2019/%E6%95%B0%E6%A0%88%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84-code-review-%E5%AE%9E%E8%B7%B5%E5%B0%8F%E7%BB%93/</link><pubDate>Fri, 12 Apr 2019 08:48:17 +0000</pubDate><guid>//imziv.com/posts/2019/%E6%95%B0%E6%A0%88%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84-code-review-%E5%AE%9E%E8%B7%B5%E5%B0%8F%E7%BB%93/</guid><description>背景 近两年我都在同一个项目上共献代码，算起来这算是我参与过最大的前端项目了。项目最开始只有我一个人做编码工作，后来陆陆续续一共有 8 个同学给项目贡献过代码，到现在稳定在 4 个人都在同时给项目提交代码。参与的同学有经验丰富一些的，也有工作一两年的小伙伴，还有实习的同学。
两年多的时间里，我一直在间接的接手或者被接手彼此同伴的代码。 由于早期同时参与的时候最多也就 2 个同学，所以项目一开始并没有 CodeReview，大概过了一年多后，项目代码量已经达到了一定规模，业务逻辑也有了较大的积累了，此时已经有 5，6 个同学参与过这个项目了。这期间逐渐暴露出来一些问题摆在眼前：
已完成的功能模块经常容易改出新问题 重复的 API, 模块封装 奇怪的框架使用方法 代码质量参差不齐 闷头开发，对彼此的工作（代码）并不熟悉，缺少交流 阻碍&amp;amp;疑虑 迭代节奏紧迫（时间担忧） 需求变更频繁 形式主义，增加工作量，没有太大意义 其实一开始我自己也有这些潜意识的疑虑，项目时间这么紧，都做不完，还做代码审查。后来我去查了下资料，然后参考了一些开源项目的 review 情况。最后总结下来，其实增加 code review 并不会占用太多的时间（当然也有需要投入较多时间的情况），另外大部分的 code review 沦为了一种形式，没有达到应有的效果，这主要还是因为姿势不对的原因。
利用 Gitlab 做 Code Review code review 作为一项十分成熟的软件构建环节，自然会配套十分成熟 的 review 工具。通过工具可以大大提供 review 效率和质量。
常见的一些 reivew 工具 Phabircator （Facebook) Gerrit (Google) Gitlab / Github &amp;hellip; 考虑到公司本身在使用 gitlab，索性我们就选择 gitlab 作为工具，采用基于 Merge request 的 code review 流程了，而在我们熟知的 Github 中则是 pull request。</description></item><item><title>git commit 、CHANGELOG 和版本发布的标准自动化</title><link>//imziv.com/posts/2018/git-commit-changelog-%E5%92%8C%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83%E7%9A%84%E6%A0%87%E5%87%86%E8%87%AA%E5%8A%A8%E5%8C%96/</link><pubDate>Sat, 08 Dec 2018 15:36:48 +0000</pubDate><guid>//imziv.com/posts/2018/git-commit-changelog-%E5%92%8C%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83%E7%9A%84%E6%A0%87%E5%87%86%E8%87%AA%E5%8A%A8%E5%8C%96/</guid><description>一直以来，因为团队项目迭代节奏很快，每次发布的更新日志和版本更新都是通过人肉来完成的。有时候实在忙的团团转，对于手动的写这些更新信息就显得力不从心了。对于团队新来的小伙伴，有时候遇到些紧急情况，就更显的乱糟糟，还是得麻烦团队资深的同学。显然这些工作，用自动化工具再适合不过了。
本文通过主要内容为介绍 conventional-changelog 的几个常用工具
onventional-changelog onventional-changelog 是一款根据项目中的commit 和 metadata信息自动生成 changelogs 和 release notes的系列工具，并且在辅助 standard-version 工具的情况下，可以自动帮你完成生成version、打tag, 生成CHANGELOG等系列过程。 onventional-changelog。
onventional-changelog 生态主要模块 conventional-changelog-cli - 全功能的命令行工具 standard-changelog - 针对 angular commit 格式的命令行工具 conventional-github-releaser - 根据 git metadata 生成 Github release conventional-commits-detector - commit message 规范引用检测 commitizen - 针对开发者简单的 commit 规范 commitlint - commit Lint 工具 以上是 onventional-changelog 生态重要的几个主要模块，今天我们主要介绍 commitizen、conventional-changelog-cli 、standard-version 这几个常用工具。
commitizen commitizen 是一款标准化 git commit 信息的工具。在没有规范的情况下，开发人员的 commit 信息是常常是随意的，这就导致 commit 信息显的很无用。可是当你在做git log 、code review、编写changelog等情况时，良好的 commit 规范就显的尤为重要。</description></item><item><title>【译】理解 Javascript 中常用的一些设计模式</title><link>//imziv.com/posts/2018/%E8%AF%91%E7%90%86%E8%A7%A3-javascript-%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Fri, 23 Nov 2018 17:24:48 +0000</pubDate><guid>//imziv.com/posts/2018/%E8%AF%91%E7%90%86%E8%A7%A3-javascript-%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>原文地址: Understanding Design Patterns in JavaScript
当我们开始一个新的项目的时候，通常不会立刻开始实际编码的工作，而是首先会理清楚项目的一些需求、问题和目标。在我们可以开始编写代码后， 或者如果你正在处理的是一个更复杂的项目的话，那么我们应该考虑去选择一种最适合项目的设计模式去帮助我们完成工作。
如何理解设计模式 在软件工程中，设计模式是一种用来解决软件设计中一些共通问题的解决方案。设计模式往往是开发工程师最佳实践后的经验总结。通常我们可以把一个设计模式理解为是一个编程模板。
为什么我们需要设计模式 大部分的开发者通常认为设计模式是在浪费时间，或者说他们也并不太知如何适当的去使用这些设计模式。但是适当的使用设计模式的确可以帮助我们编写出更好健壮的代码。
更重要的是，设计模式往往为我们提供了一些沟通上的便利，它可以及时的向正在学习你代码的人展示出你代码意图。例如，如果你在项目中使用了装饰者模式的话，那么一个新的开发者可能马上就知道了你的代码是在干什么，他们可以更多的去关注业务本身，而无需花费过度的精力去理解你的代码。
好了，接让我们看看我们在 Javascript 中常用的一些设计模式吧。
模块模式（Module Pattern） 模块是指一个包含自身完整逻辑代码的代码块，当我们去更新模块中的代码时而不用影响其他代码的部分。模块可以让我们轻易的规避命名空间的污染问题，例如模块拥有自己独立的变量作用域，我们也可以在其他项目中复用我们的模块。
模块是现代 Javascript 应用开发里的不可或缺的部分，它帮助我们轻易的组织和维护代码。在 Javascript 中模块化的方式有很多，通常我们把这些模块化的方法称之为模块化模式。像 Bit 这个工具，它不需要任何重构工作，就可以把我们的模块或者组件转换成其他任何项目中可以复用的代码了。
Javascript 并没有像其他编程语言拥有访问修饰符的特性（现在 Typescript 之类的语言包含这些特性），例如你无法声明变量为私有（private）或者公开（public)。所以模块化模式也常常被用来去模拟封装（Encapsulation) 的理念。
这种模式我们可以通过即行函数 IIFE（immediately-invoked function expression)、闭包和函数作用域来模拟，例如：
const myModule = (function() { const privateVariable = &amp;#39;Hello World&amp;#39;; function privateMethod() { console.log(privateVariable); } return { publicMethod: function() { privateMethod(); } } })(); myModule.publicMethod(); 上面的代码是即行函数的方法，通过立即执行函数，并把返回结果指向了 myModule 变量。由于闭包、返回的对象仍然可以访问定义在即行函数内的函数和变量，当然这些操作是在执行完即行函数产生实例之后了。我们可以看到，变量和方法被定义在即行函数内部，对于模块外部的作用域来说即达到了 private 的效果。
当代码被执行后，变量 myModule 类似于：</description></item><item><title>利用 Atomic 构建 React 项目工作流</title><link>//imziv.com/posts/2018/%E5%88%A9%E7%94%A8-atomic-%E6%9E%84%E5%BB%BA-react-%E9%A1%B9%E7%9B%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/</link><pubDate>Thu, 01 Nov 2018 20:52:46 +0000</pubDate><guid>//imziv.com/posts/2018/%E5%88%A9%E7%94%A8-atomic-%E6%9E%84%E5%BB%BA-react-%E9%A1%B9%E7%9B%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid><description>原文地址: http://imziv.com/blog/article/read.htm?id=89
用过 React 的朋友都知道，React 项目文件夹的划分是有很多种的，在 React 官方关于文件结构这个部分给出了一些社区比较常见的构建方式的示例。例如有通过 features 或者 routes 进行分组的，也有通过模块类型（type) 划分的。在文档提到了一种针对 components 进行细化组织的方法 —— Atomic Design。如果还没了解过这个设计方法的朋友，不妨来看一看。
什么是 Atomic Atomic 是一套指导设计前端组件（Components）架构的方法。在我们的日常工作中，如何更好的划分和管理前端组件常常会是我们碰到的问题。Atomic 通过一系列设计思想和原则，可以很好指导我们的项目架构。用 Atomic 作者自己的话说，这套设计方法的灵感是来自于自己曾经学习过的化学课，以及对自然知识本身的思考。作者通过原子（Atoms)、分子(Molecules)、 有机体(Organisms)、模板(Templates), 页面(Pages) 这 5 种基本类型组件，通过灵活的组合，从而来满足我们日常的页面开发需求。 让我们先一一了解这 5 中不同类型的组件类型。
原子（Atoms) 正如化学知识中所表述的，原子（Atoms)是元素能保持其化学性质的最小单位，所以正好利用原子的概念，可以用来组件系统中的最小单位的组件，或者说抽象到最小粒度的组件，即我们在 HTML 中常见的一些基本元素，例如：按钮（buttons)，表单标签(labels)，输入控件（input)等等。既然是最小单位，Atom 类型的组件显然是无法再进行任何拆分了，如果能继续拆分，那么该组件应该被划分为分子组件（Molecules）。
分子（Molecules) 我们都知道，在化学概念中，分子是有若干原子组成。通过组合各种原子组件，我们可以轻易的可以组合出某种功能的分子组件。例如通过组合 input 控件和 button 组件，我们可以得到一个搜索（Search)分子组件，通过组合 button 和 a 标签，可以可以组合分页（Pagination）组件。
有机体（Organisms) 仅靠分子组件和分子组件的抽象，仍然是不能满足我们实际工作中对组件复用的需求，例如我们我们大部分项目中都有导航栏（Navigation Bar)、页头（Header)、页脚（Footer)、边栏（Sidebar)、列表（List) 等等组件，显然可以根据需要可以抽象成独立组件，以便后来的项目可以直接使用。可以看到的是，在有原子和分子组件的情况下，我们通过灵活组合这些原子、分子组件的方式，便可轻易达到我们的需求。而通过这类方式组合的组件类型我们便称之为有机体组件（Organisms)。
模板（Templates) 到这里，模板层就很好理解了。很显然，模板层是原子、分子、有机组件的结合体。例如包含头部（Header、Content、Footer)常见部分的首页模板、又或者各种左右上下布局模板组件等等。
页面（Pages) 页面这一层可能是复用率最低的一层了，因为业务需求大部分时候各不相同的，当然也不排除有复用页面的情况。页面组件自然就是个包含了其他四种组件类型的综合体了。有了前几层组件的抽象，可以轻松的应对各种业务页面，并且不断地可以丰富新组件到各类型自己中去，以便后面的项目中持续使用。
综合看下来，通过这 5 种组件的划分，就可以很好的满足我们实际项目中对页面组件进行划分和管理了。
Atomic 实践 根据 Atomic 的思路, 以 src 目录为基础，在 React 项目中，我可以得到了类似如下的开发目录：</description></item><item><title>你不知道的 Console</title><link>//imziv.com/posts/2018/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-console/</link><pubDate>Sat, 07 Jul 2018 16:16:51 +0000</pubDate><guid>//imziv.com/posts/2018/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-console/</guid><description>相信很多 Web 开发者跟我一样有个习惯，经常会不自觉的打开感兴趣网站的控制台（Console)。很多公司会在控制台中打印一些招聘或者安全警告的信息。作为一位开发者，当然更多的关心的是这些效果是如何实现的。今天我们不妨来重写认识下 Console 这个 API 对象。
简介 Javascript console是被提供用来访问浏览器Debug控制台的一个全局对象，一般我们可以直接通过console或者 window.console 的方式访问该对象。通常我们会利用该对象 debug 调试，当然你也可以跟其他公司一样，在上面发招聘信息。
其实除去我们平时常用的console.log、console.error、console.warn、console.info 方法外，其实console还有很多非常有用的 API。 当然，事先已经知道的同学当我没说。先看下列这张表：
方法 用途 console.assert() 判断第一个参数是否为真，false 的话抛出异常并且在控制台输出相应信息。 console.clear() 清空控制台 console.count() 以参数为标识记录调用的次数，调用时在控制台打印标识以及调用次数。 console.debug() console.log 方法的别称，使用方法可以参考 console.log() console.dir() 打印一条以三角形符号开头的语句，可以点击三角展开查看对象的属性。 console.dirxml() 如果可以，打印 XML/HTML 元素表示的指定对象，或者 JavaScript 对象视图。 console.error() 打印一条错误信息，使用方法可以参考string substitution。 console.group() 打印树状结构，配合 groupcollapsed 以及 groupEnd 方法; console.</description></item><item><title>Webassembly 技术的探索与实践</title><link>//imziv.com/posts/2018/webassembly-%E6%8A%80%E6%9C%AF%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5/</link><pubDate>Fri, 05 Jan 2018 21:54:33 +0000</pubDate><guid>//imziv.com/posts/2018/webassembly-%E6%8A%80%E6%9C%AF%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5/</guid><description>简介 Webassembly 是一种可以在浏览器端运行二进制格式代码的技术，他的目标则是想提供接近Native code的执行效率的技术体验。 相较于文本类型的Javascirpt而言，它拥有更小的体积，更短的加载时间，和更好的执行性能等特点 。Webassembly 允许你使用Rust或者C/C++等静态语言来编写，并生成目标文件后缀为wasm的二进制格式文件。通过Fetch或者Ajax与Webassembly提供的 API ，我们可以实现Javascipt与wasm模块的混用。
asm.js 与 wasm 相信很多人跟我一样有些疑问，asm.js 和wasm的关系，asm.js是Mozila工程师ALON ZAKAI提出的一种将静态语言编译为javascript的一种解决方案，这里有官方的PPT。而 asm.js 则实际上是 Javascript 的一个子集，通过在已有Javascript语法特上性进行可行的提前优化和性能改进（例如强制类型的一致性、手动的内存管理），从而达到编译器对Javascript代码提前优化的目的。所以，asm.js 实际上是一种针对Javascript编译器进行优化过的Javascript文本代码，而wasm则是浏览器直接支持的一种二进制格式文件，所以在加载速度上，文件体积上，执行效率上有更多优势。编写符合规范的asm.js代码，通过Emscripten编译工具来将静态语言编译为asm.js目标即可。
c语言源程序 int f (int var) { return var + 1; } 编译后的asm.js目标文件 // 通过`|0`提前声明变量和函数的返回类型。 function f(i) { i = i|0; return (i + 1)|0; } C/C++ 文件编译为 asm.js 目标文件的过程 注：LLVM 为底层虚拟机（Low Level Virtual Machine）的缩写，一种用 C++编写的, 可以用于优化任何静态语言（例如 Java，Go, Rust, Swift）的底层编译器基础技术。具体的编写和编译asm.js的方法可以查看 Emscripten 官方相关教程。
wasm 文件与 Javascript 生成机器码的区别 对比 2 种文件生成机器码的流程会发现，Javascript 文件生成机器码需要经过语法解析，代码优化，最后才转换成机器码等过程，而wasm的优势是本身就是通过编译器并优化过后的二进制文件，可以直接转换为机器码，省去了Javascript需要解析，优化的工作，所以在加载和执行上本身就具有优势。接下来我们尝试用C/C++写一个wasm模块。
用 C/C++ 编写一个 wasm 模块 搭建和安装 wasm 编写环境的步骤这里就不写了，具体可以查看官方， 这里我会编写一个模块，然后通过浏览器浏览运行结果。在这里我们利用递归算法，编写一个阶乘计算的模块factorial.</description></item><item><title>Decorator 简介及实战</title><link>//imziv.com/posts/2017/decorator-%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%AE%9E%E6%88%98/</link><pubDate>Sun, 05 Nov 2017 14:36:35 +0000</pubDate><guid>//imziv.com/posts/2017/decorator-%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%AE%9E%E6%88%98/</guid><description>前言 用过 Java 的朋友都知道，装饰器（Decorator)是一种十分非常方便改变类运行是行为的一种方式，例如在 Spring 框架中我们用到比较多的注解（@Autowired), 通过它可以自动实例化对象，从而可以精简代码。装饰器是典型的 AOP(Aspect-Oriented-Programming) 编程的应用，类似的 CSS 对于 HTML 的样式也是类似于这种思想，即从切面来改变和影响主对象的行为。
Decorator 简介 Decorator 是一种通过注解表达式就可以扩展类或者方法的函数。Decorator 可以应用到任何一个 class 或者 property 上。列如:
@myDecorator class A {} // 作用class @myDecorator doSomething() {} // 作用表达式 Javascript Decorator 目前任然是 ES7 提案状态，更多该特性的进度可以访问proposal-decorators查看。
Decorator 原理 说到更改对象的属性或者方法，大家肯定会想到Object.defineProperty(obj, prop, descriptor)方法，通过该方法，我们可以轻易的修改或者重写对象的行为或者属性，之前 Vue 中提到的双向绑定，即是通过重写set和get方法来实现的。所以在我们还未正式用上 Decorator 前，都是通过 Object.defineProperty 方法来实现。先来简单的认识下这个方法：
/** * obj : 需要修改属性的对象 * prop : 需要修改对象的属性名称 * descriptor: 用来定义属性具体行为的描述对象 **/ Object.defineProperty(obj, prop, descriptor) descriptor 属性说明 configurable : 定义属性对象是否可以被配置，即如果为 false ，定义修改的描述操作（writeable, get 等等）都无效</description></item><item><title>我用 Express.js 封装了一个服务器容器小工具</title><link>//imziv.com/posts/2017/%E6%88%91%E7%94%A8express.js%E5%B0%81%E8%A3%85%E4%BA%86%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%B9%E5%99%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/</link><pubDate>Tue, 28 Feb 2017 17:35:09 +0000</pubDate><guid>//imziv.com/posts/2017/%E6%88%91%E7%94%A8express.js%E5%B0%81%E8%A3%85%E4%BA%86%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%B9%E5%99%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/</guid><description>背景 我们都知道利用 Node.js 可以非常轻易的就编写一个 Web Server。在没有利用集成 Gulp, Webpack，Web Server 等等脚手架工具前，在做一些简单的 Web 应用的时候，我通常的做法是：用 Express.js 封装好一个 Server.js 文件集成到项目中去，以便于开发和测试。例如通过二维码扫描 Chrome 的开发程序到手机端测试，例如需要跨域调用远程服务器 API, 例如 Ajax 异步加载，等等。当然，偶尔也会用用 Nginx 做测试开发环境，但是 Nginx 这玩意还是感觉太重，并且项目组的有些同学觉得安装麻烦，配置复杂，不易上手。
由于我们经常会收到一些活动页面，或者很少页面的开发需求，移动端，PC 端都有，所以如果每次都大张旗鼓的上脚手架，全家桶实在上有点杀鸡用牛刀的感觉。一堆依赖，每次重复的安装，很占用硬盘空间。正因如此，我便希望把现有的基于 Express.js 的 server 给封装成全局的程序，每次在这些小项目需要的时候，直接一个简单的命令行就可以进行开发和测试，要安装简单，轻便，配置简单。于是这个叫cup的工具就诞生了。
特点 随时随地针对项目目录开启 Server 服务 全局安装，简单的 CLI 支持自定义服务器端口 支持远程服务器代理（Proxy) 基本使用 安装 npm install -g mini-cup 示例 | - test | - css | - styles | - index.html 例如当你有个项目简单到只有以上一些文件和文件夹时，需要添加 server 容器来调试开发，你只需要在控制台切换到test项目所在目录，运行：
cup run test cup默认开启的服务器端口是3000，如果端口占用，或者需要指定其他端口的情况下，则可以通过如下命令：
cup run test -p 8080 通过选项参数-p指定端口为8080</description></item><item><title>完整的学习和使用 CSS 动画【翻译】</title><link>//imziv.com/posts/2017/%E5%AE%8C%E6%95%B4%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8css%E5%8A%A8%E7%94%BB%E7%BF%BB%E8%AF%91/</link><pubDate>Sat, 25 Feb 2017 19:30:23 +0000</pubDate><guid>//imziv.com/posts/2017/%E5%AE%8C%E6%95%B4%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8css%E5%8A%A8%E7%94%BB%E7%BF%BB%E8%AF%91/</guid><description>一直以来，因为团队项目迭代节奏很快，每次发布的更新日志和版本更新都是通过人肉来完成的。有时候实在忙的团团转，对于手动的写这些更新信息就显得力不从心了。对于团队新来的小伙伴，有时候遇到些紧急情况，就更显的乱糟糟，还是得麻烦团队资深的同学。显然这些工作，用自动化工具再适合不过了。
本文是一篇项目自动化方面的使用教程，社区里面针对四类问题的解决方案很多，今天这里主要介绍的是 onventional-changelog 方案相关的内容。 如果你正在思考或者试图解决这方面的问题的话，不妨了解一下。
conventional-changelog conventional-changelog 是一款可以根据项目的 commit 和 metadata 信息自动生成 changelogs 和 release notes 的系列工具，并且在辅助 standard-version 工具的情况下，可以自动帮你完成生成 version、打 tag, 生成 CHANGELOG 等系列过程。
conventional-changelog 生态主要模块 conventional-changelog-cli - conventional-changelog 核心命令行工具 standard-changelog - 针对 angular commit 格式的命令行工具 conventional-github-releaser - 利用 git metadata 针对 Github 的发布工具 conventional-commits-detector - commit message 规范引用检测 commitizen - 针对开发者简单的 commit 规范 commitlint - commit Lint 工具 以上是 onventional-changelog 生态重要的几个主要模块，实际工作中这几个工具常常是配套使用的，当然也需要根据自己的情况而定。篇幅有限，今天我们就主要介绍 commitizen、conventional-changelog-cli 、standard-version 这三工具了。
commitizen commitizen 是一款标准化 git commit 信息的工具。在没有规范的情况下，开发人员的 commit 信息是常常是随意的，这就导致 commit 信息显的很无用。可是当你在做 git log、code review、编写 changelog 等情况时，良好的 commit 规范就显的尤为重要。</description></item><item><title>常用的 Linux Shell 命令</title><link>//imziv.com/posts/2017/%E5%B8%B8%E7%94%A8%E7%9A%84linux-shell%E5%91%BD%E4%BB%A4/</link><pubDate>Wed, 08 Feb 2017 17:21:03 +0000</pubDate><guid>//imziv.com/posts/2017/%E5%B8%B8%E7%94%A8%E7%9A%84linux-shell%E5%91%BD%E4%BB%A4/</guid><description>自己平时有可能会用到的 Shell 命令，之前用 Evenote 记录的比较零散，重新整理了下，以后慢慢补充。
文件操作 查看文件所属用户 ls -al 动态打印日志 tail -f /var/log/error.log 给指定目录的所属用户权限赋予指定人 # 把directry目录下的所有用户指向someone $ sudo chown -R someone:staff directory 用户组相关操作 查看用户组
groups 查看各用户与组的关联情况
id 添加新用户组
sudo groupadd mynewgroup 添加已存在的用户到一个组
usermod -a -G exampleGroup exampleUserName 改变用户主要的组
usermod -g groupName userName 查看文件内容 cat filename 查看目录所占磁盘容量 du dir # 显示dir的总容量以及次目录的容量，KB为单位 du -s dir # 显示dir的容量 测试用户目录权限 sudo -u admin stat /home # 测试用户admin对目录 /home 对权限 scp 获取远程服务器上的文件 # 把远程服务器/root目录下的remote.tar.gz文件下载到本地/home目录下， # 并保存为local.</description></item><item><title>Web 前端的状态管理（State Management）</title><link>//imziv.com/posts/2017/web%E5%89%8D%E7%AB%AF%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86state-management/</link><pubDate>Sun, 08 Jan 2017 22:38:01 +0000</pubDate><guid>//imziv.com/posts/2017/web%E5%89%8D%E7%AB%AF%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86state-management/</guid><description>背景 我相信很多朋友跟我一样，初次听到什么Flux, Redux， Vuex，状态管理的时候是一脸懵逼的。因为在外面之前前端大部分开发的时候，根本没有那么多的概念。自从 ReactJS 火爆后，什么Flux, Redux，React全家桶是一套一套接踵而来。搞的很多开发者甚是头大。所谓的 ReactJS 全家桶即ReactJS + Redux + Webpack， 当然其中的 Redux 可以用其他例如Mobx之类的替换。原本可能只是很简单的一些数据展示需求，当想用尝试使用 ReactJS 时，去 Google 搜索了一些教程，突然发现怎么用个 React 需要这么多东西。正如今年比较有名的一篇文章里面描述的那样 — ”在 2016 年学习前端是怎样一种体验&amp;rdquo;。
很显然，时代在进步，技术在进步，Web 业务需求在进步，浏览器性能的大幅度提升，促使 JS 能处理越来越多的事情。为了满足越来越复杂、丰富的WebApp需求，越来越多的原本后端处理的业务逻辑开始转移到前端来处理，同时更多复杂的前端业务在浏览器上面催生，原有的很多技术体系、解决方案已经不能很好的支撑这些越来越复杂的需求了。所以当我们在面临各种业务需求的时候，必定会出现各种各样的适合不同业务需求的技术解决方案。
很多朋友刚刚上手 React 的时候，被什么 Redux, 函数式都搞的有点摸不着头脑。因为之前很多时候写前端用一个 jQuery 就足矣，当转换到 ReactJS 时,忽然多出了个 Webpack, Redux, 然而 Redux 里面又包含了什么Reducer、Action、State管理、函数式等等概念, 搞的人的确很头大。前期较高的学习成本，造成了很多朋友就放弃了 ReactJS 的选型。而且很多开发者初期并不了解这些框架所解决的问题，缺乏足够的实践经验，造成很多人误认为这是把简单的问题越搞越复杂。可能大家回想本来很简单的问题，我用个 jQuery 就能搞定，甚至纯手撸原生 Javascript 都可以，怎么突然多出了这么多东西。例如 ReactJS 只是单纯的 View 层的解决方案，而 Redux 是一种状态管理框架，不仅支持 ReactJS，还支持Angularjs, 官方宣称的是它可以支持任务其他的视图库。正因越来越复杂的前端需求，层出不穷的前端解决方案和技术的推陈出新，造就了前端社区异常火爆的局面。而本文主要探讨前端的状态管理（State Management）
服务端渲染的 WEB 开发 就在几年前，前端工程师的大部分工作，可能还停留在利用 CSS, HTML 切页面，然后利用 JS 做些简单的动态交互，更进一步的前端开发者可能需要懂 Java, 或者 PHP 之类的语言，因为需要将写好的页面与模板引擎完成整合。</description></item><item><title>实现图片的异步加载</title><link>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%9A%84%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/</link><pubDate>Mon, 27 Jun 2016 11:01:48 +0000</pubDate><guid>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%9A%84%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/</guid><description>图片异步加载功能是现在 web 中非常常见的一个针对 web 做优化的方法。尤其是在移动端，面对大量的图片列表的时候，如果没有做相应的优化，会直接导致页面滑动和加载的卡顿，而且用户会莫名的发现当前应用占用的流量会很大，因为他可能都没有浏览到很多图片，而程序就自动加载了所以的图片，对于一个流量吃紧的人来讲，这个也是很讨厌的。所以实现按浏览需求加载时十分有必要的。
其实实现图片异步加载的核心思路十分简单，就是通过判断当图片元素是否出现在视窗范围内后，则去加载图片资源，否则不加载。所以我们需要首先解决判断 img 元素是否处于视图范围内的这个核心问题。让我们看看下面的图：
通过抓取 img 元素，js 提供了相应的方法让我们可以获取到 img 元素距离视图 top，和 left 的距离，viewport 的高度和宽度等数据。然后通过监听窗口滚动事件，当页面滚动的时候，我们就去动态检测 img 元素的 top 和 left 值，与视窗的高度和宽度作比较，从而判断当前的 img 是否处于视窗范围。计算如下：
处于垂直范围： 图片距离视窗顶部距离 &amp;gt; 0 &amp;amp;&amp;amp; 图片距离视窗顶部距离 &amp;lt;= 视窗高度 处于水平范围： 图片距离视窗左边距离 &amp;gt; 0 &amp;amp;&amp;amp; 图片距离视窗左边距离 &amp;lt;= 视窗宽度
解决了这个判断图片在可视范围内的核心问题后，那么其他的问题都是否简单了。我们看下详细代码：
获取视窗的高度和宽度 var _viewPortHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0), _viewPortWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0); 是否处于垂直范围 function isOnVerticalViewPort(ele) { var rect = ele.getBoundingClientRect(); // 获取距离视窗的位置信息 return rect.</description></item><item><title>Cordova 开发总结(插件篇）</title><link>//imziv.com/posts/2016/cordova-%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%E6%8F%92%E4%BB%B6%E7%AF%87/</link><pubDate>Fri, 24 Jun 2016 14:57:57 +0000</pubDate><guid>//imziv.com/posts/2016/cordova-%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%E6%8F%92%E4%BB%B6%E7%AF%87/</guid><description>最近刚刚做完一个用 Cordova 开发了一款电子商务的应用。在选用 Cordova 前，我有考察过，国内的 Appcan, Apicloud 等等的解决方案。其实 Appcan，ApiCloud 的混合方案挺完整的，从开发，框架，到打包测试，数据统计都包含了，但是我还是更倾向于开源的 Cordova, 我相信开源社区的力量应该更强大，所以最终选择了 Cordova 作为解决方案。事实上，我用 Cordova 开发遇到目前所以需要的插件都是可以通过 Google 查找到的。在此总结下我用到的插件。
Crosswalk 这是一个单独定制的 Webview 插件，包含了大部分最新的 HTML5 特性。Crosswork Cordova 插件目前只支持 Android, iOS 需要自己手动的集成。在如今安卓机这种测试机可以装一箱子都不止的情况下，使用统一的 Webview 是十分有必要的。可以避免大部分的兼容性问题，而且可以保持不错的性能。当然有个弊端就是添加这个插件，打包的 apk 会增加 20MB 左右。
极光推送(JPush) 极光的推送插件在 Cordova 上的集成也是非常的方便，顺利的话 1 个小时就可以搞定。刚开始的时候我还有点慌，担心推送插件的集成问题，没想到看了下官网，有从 Cordova 的集成版本，还支持自动安装。
切页转场动画 刚开始我利用 Angularjs 集成了 CSS3 的转场动画，打包跑在 iOS 上时其实还好，但是到 Android 端的时候，弊端尽显，实在不理想，最好我把转场动画都直接撤掉了，留下个 loading 动画。显然整个界面的切换就变的干巴巴了。最后找到com.telerik.plugins.nativepagetransitions这个转场插件。这个插件支持Slide,Flip,Fade, Drawer, Curl等 5 种效果，集成和调用也很简单。
键盘插件（Keyboard) 大家都知道在移动端调出键盘输入操作时，调出的键盘会挤出自己当前的界面，造成页面的样式错乱的问题。Keyboard 插件可以监听键盘的展示隐藏事件，禁止 input 时键盘出现界面滚动等等问题。
支付 Alipay 做移动应用肯定少不了支付，支付宝的 Cordova 插件其实很多，但我搜索了一圈还是这个比较好使~
总结 以上是我用的几个主要插件，因为 Cordova 里面像Camera, File, 其他类型的插件太多太多了。完全可以根据自己的喜好来选择。总而言之，Cordova 本身由于这么多年时间的积累，造就了它在插件等等资源上的很多的优势。另外，微软刚刚开源的Xamarin据说也是个非常不错的混合开发方案，用 C#编写源码， 有机会试试~</description></item><item><title>使用 iScroll 实现上拉或者下拉刷新</title><link>//imziv.com/posts/2016/%E4%BD%BF%E7%94%A8-iscroll-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E6%88%96%E8%80%85%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/</link><pubDate>Tue, 07 Jun 2016 11:56:52 +0000</pubDate><guid>//imziv.com/posts/2016/%E4%BD%BF%E7%94%A8-iscroll-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E6%88%96%E8%80%85%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/</guid><description>上拉或者下拉刷新的需求在移动端是非常常见的需求，大部分情况下，实现这个效果都使用网上现有的解决方案，例如有人使用swiper这个插件， 也有人使用iScroll这个滚动插件。本文的示例是利用 iscroll 实现的下拉刷新效果。
iScroll 简介 iScrool是目前最成熟的自定义滚动解决方案之一，在移动端和 PC 有很好的兼容性。iScroll 官方提供了 5 个不同的版本：
iscroll.js 通用版 包含了大部分公共特性 iscroll-lite.js 缩减版 削减了一些功能特性，例如：滚动条，鼠标滚轮等等 iscroll-probe.js 探索版 此版本可以满足你获取滚动条位置的需求。 iscroll-zoom.js 滚动缩放版 iscroll-infinite.js 无限制版 根据不同的需求，选择相应的版本，当前的示例中，我们选择的是iscroll-probe.js版。Gitbook 地址：iScroll API 中文版
详细使用 代码思路则是：利用监听滚动条的scroll事件，判断下拉或者上拉的距离，做上触发距离标记，当scrollEnd事件触发时，执行数据加载。让我们看核心部分代码：
HTML 代码结构 &amp;lt;div id=&amp;#34;MyScroller&amp;#34; class=&amp;#34;main&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;warpper&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;PullDown&amp;#34; class=&amp;#34;scroller-pullDown&amp;#34; style=&amp;#34;display: none;&amp;#34;&amp;gt; &amp;lt;img style=&amp;#34;width: 20px; height: 20px;&amp;#34; src=&amp;#34;rolling.svg&amp;#34; /&amp;gt; &amp;lt;span id=&amp;#34;pullDown-msg&amp;#34; class=&amp;#34;pull-down-msg&amp;#34;&amp;gt;下拉刷新&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;ul id=&amp;#34;Content&amp;#34; class=&amp;#34;dropdown-list&amp;#34;&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;div id=&amp;#34;PullUp&amp;#34; class=&amp;#34;scroller-pullUp&amp;#34; style=&amp;#34;display: none;&amp;#34;&amp;gt; &amp;lt;img style=&amp;#34;width: 20px; height: 20px;&amp;#34; src=&amp;#34;rolling.</description></item><item><title>实现 Checkbox 组件化(Component)</title><link>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0-checkbox-%E7%BB%84%E4%BB%B6%E5%8C%96component/</link><pubDate>Thu, 19 May 2016 19:53:50 +0000</pubDate><guid>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0-checkbox-%E7%BB%84%E4%BB%B6%E5%8C%96component/</guid><description/></item><item><title>CSS3 实现自定义 Checkbox</title><link>//imziv.com/posts/2016/css3-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89-checkbox/</link><pubDate>Sun, 17 Apr 2016 20:27:24 +0000</pubDate><guid>//imziv.com/posts/2016/css3-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89-checkbox/</guid><description>之前我写了一篇自定义 checkbox 的文章，通过 css3 实现自定义的 checkbox，并没有使用当今流行的 Reactjs, 或者 Vuejs 之类的进行组件化。但是很显然，这样封装的 checkbox 组件复用的时候非常麻烦。如果在新项目中使用的话，可能需要同时拷贝 css 和 html 文件进行整合。从 html 语义角度上讲，代码的易读性也不是很强，显然这样的组件显然不利于维护。
其实 Web Component 是前端界一直非常热衷的一个领域，因为原生的 HTML 在维护复杂网页应用时，实在是太差了。所以才出现了诸如 Google 的Ploymer、Facebook 的Reactjs等等。而且很多MVVM的框架也自带组件化的方案,例如Angularjs的指令，但貌似ng的这个用起来太复杂。用第三方组件化的框架去实现的话，你需要依赖框架本身很多东西，很多时候我们只是简单的几个组件，不是很大，也不是很多，所以为了保证组件的轻量，简单,其实这个时候我们并不想采用第三方的框架。接下来我会介绍使用Shadow DOM和registerElement的方式去实现组件化。
先看看实现后的调用方式：
&amp;lt;div class=&amp;#34;line&amp;#34;&amp;gt; &amp;lt;label&amp;gt;checkbox1 &amp;lt;/label&amp;gt; &amp;lt;check-box class=&amp;#34;mycheck&amp;#34; checked=&amp;#34;true&amp;#34; id=&amp;#34;ComCheckbox&amp;#34;&amp;gt;&amp;lt;/check-box&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;line&amp;#34;&amp;gt; &amp;lt;label&amp;gt;checkbox2 &amp;lt;/label&amp;gt; &amp;lt;check-box class=&amp;#34;mycheck&amp;#34; checked=&amp;#34;false&amp;#34; id=&amp;#34;ComCheckbox1&amp;#34; value=&amp;#34;2&amp;#34;&amp;gt;&amp;lt;/check-box&amp;gt; &amp;lt;/div&amp;gt; 看起来是不是很简洁，调用自定义的checkbox组件不需要那么多扰乱阅读的元素，只需要一个明确的check-box标签，既可以表示checkbox组件。效果如下：
好了看了效果，我们来看看具体怎么实现的吧。在线 demo 查看
组件的组成 通常情况下，我们一个组件一般是由html模板，css样式，js脚本逻辑三部分组成的。他们的作用我就不多废话了。至于当前组件的 css 样式自定义方法请看我上一篇文章CSS3 实现自定义 checkbox，这里我就不重复这部分了。
在项目工作区新建一个component-checkbox.html文件， 这个文件会被当做整个组件，在我们需要引用的页面中通过link标记动态的引入。 component-checkbox.html文件即包含了 HTML 模板，CSS 样式，JS 三个部分，他们在组件文件中的分布如下： &amp;lt;template&amp;gt; &amp;lt;style&amp;gt;// 放CSS样式定义&amp;lt;/style&amp;gt; // 放HTML标记 &amp;lt;/template&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; // JS脚本逻辑 &amp;lt;/script&amp;gt; 具体 HTML/CSS 定义 &amp;lt;template id=&amp;#34;CheckBox&amp;#34;&amp;gt; &amp;lt;style&amp;gt; .</description></item><item><title>老博客升级</title><link>//imziv.com/posts/2016/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7/</link><pubDate>Mon, 04 Apr 2016 23:55:53 +0000</pubDate><guid>//imziv.com/posts/2016/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7/</guid><description/></item><item><title>Cordova 开发环境的搭建</title><link>//imziv.com/posts/2015/cordova%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 23 Nov 2015 13:58:34 +0000</pubDate><guid>//imziv.com/posts/2015/cordova%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</guid><description>Cordova 为目前做混合式开发中比较受欢迎的一个解决方案了，并且拥有比较丰富的插件资源。本文介绍了 Cordova 开发的环境搭建过程。 由于 Cordova 命令行工具发布在了 npm 包管理平台上，npm 为 nodejs 内置的包管理工具，所以安装 cordova 前需要先确认你是否已经安装过 Nodejs。
Nodejs 安装 打开 Nodejs 官网下载页，根据自己当前的操作系统平台，选择对应的 nodejs 版本，下载完后直接点击安装程序，下一步完成即可。测试 nodejs 安装，打开控制台，输入：
node -v // 查看node版本plain npm -v // 查看npm版本 如果控制台成功输出当前程序安装的版本，那么你已经安装成功了。
Nodejs 版本管理工具(Nvm) 由于 Nodejs 目前的更迭速度很快，有时候项目组人员的版本可能各不相同，为了避免出现不必要的问题，尽量统一管理 node 的版本，所以我们需要 nvm 这样一个版本管理工具，来轻松的达到自由切换 nodejs 和 npm 版本的问题。
Linux 平台，Mac 安装和更新 curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash 或者
wget -qO- &amp;lt;https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh&amp;gt; | bashplain 打开控制台输
nvm --version // 查看nvm版本 如果成功输出，那么 nvm 就安装成功了。更多的 nvm 可以在控制台通过 nvm &amp;ndash;help 查看。</description></item><item><title>Atom 在 Ubuntu 上中文乱码解决</title><link>//imziv.com/posts/2015/atom%E5%9C%A8ubuntu%E4%B8%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</link><pubDate>Wed, 05 Aug 2015 14:18:33 +0000</pubDate><guid>//imziv.com/posts/2015/atom%E5%9C%A8ubuntu%E4%B8%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</guid><description>之前一直用的是 Sublime Text2, 但是 Sublime 在 Ubuntu 上不支持中文输入,着实让人蛋疼,当然也有一些解决方案,我都试过,比较麻烦.得知 Atom 即将发布 1.0, 所以下载了 Atom 0.9 多的版本,但是同样发现中文乱码.以下记录了 Atom 0.9 以及 1.0 版本在 Ubuntu 上的方块乱码以及 markdown-preview 乱码的解决方法.
Atom 乱码解决 首先你的确认你电脑上面是否安装过文泉驿正黑字体,默认情况下 Ubuntu 是没有这个字体的,所以如果没有那么请使用以下命令安装:
sudo apt-get install ttf-wqy-* 安装完成后或者确认已安装改字体的情况下, 使用快捷键&amp;rsquo;ctrl + ,&amp;rsquo; 或者点击&amp;rsquo;edit &amp;gt; Perferences &amp;gt; setting&amp;rsquo;, 找到&amp;rsquo;Editor Settings&amp;rsquo;下的&amp;rsquo;font-family&amp;rsquo;, 然后设置其字体为:
&amp;#39;DejaVu Sans Mono&amp;#39;, &amp;#39;文泉驿正黑&amp;#39; 然后查看下编辑器中文乱码是否已经显示正常.
markdown-preview 乱码
得知 Atom 自带 markdown 实时预览功能, 我也是很开心. 但是使用后发现, markdown-preview 也出现乱码问题. 我当时 0.9 版本上面进行设置的, 后来更新到 1.0 版本后,发现之前的设置都失效了.所以下面两种方式都会列出来.
老版本版本 由于 markdown-preview 是读取插件本身的样式, 所以在这里我们是手动更改插件的字体样式为&amp;rsquo;DejaVu Sans Mono&amp;rsquo;, &amp;lsquo;文泉驿正黑&amp;rsquo;即可</description></item><item><title>HTML5 文件异步上传 — h5uploader.js</title><link>//imziv.com/posts/2015/html5-%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0-h5uploader.js/</link><pubDate>Thu, 07 May 2015 23:11:53 +0000</pubDate><guid>//imziv.com/posts/2015/html5-%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0-h5uploader.js/</guid><description>之前写过一篇 H5 异步文件上传的文章, 但是很多朋友看着我的这个教程还是出现很多问题，文章写的不是很好，比较早了。其实通过 H5 做异步上传已经非常简单了，通过查看文档，便可以很轻松的完成这个功能，当然，如果你不愿意查看文档自己动手的话，那么就用插件咯。h5uploader是我最近封装的 HTML5 上传插件，代码才白来行，使用的话也比较简单，支持文件大小，类型，progress 等等功能。本篇教程，将向你展示 Nodejs,Java 两种服务端的上传方法，并且附有源代码示例。
插件下载 如果你是bower的用户的话，可以直接通过以下命令：
bower install h5uploader --save 当然也可以直接从 Github Clone 此项目：
git clone https://github.com/wewoor/h5uploader.git HTML 代码 &amp;lt;input type=&amp;#34;file&amp;#34; id=&amp;#34;myfile&amp;#34; value=&amp;#34;&amp;#34; name=&amp;#34;myfile&amp;#34; multiple=&amp;#34;multiple&amp;#34;/&amp;gt; &amp;lt;button id=&amp;#34;uploader&amp;#34;&amp;gt;Upload&amp;lt;/button&amp;gt; 以上是一个 file 类型的 input 元素以及一个上传触发按钮，后面带有 multiple 属性，表示次处支持文件多选上传，当然，你也可以一次提交多个 input 元素，例如：
&amp;lt;input type=&amp;#34;file&amp;#34; id=&amp;#34;myfile&amp;#34; value=&amp;#34;&amp;#34; name=&amp;#34;myfile&amp;#34; multiple=&amp;#34;multiple&amp;#34;/&amp;gt; &amp;lt;input type=&amp;#34;file1&amp;#34; id=&amp;#34;myfile1&amp;#34; value=&amp;#34;&amp;#34; name=&amp;#34;myfile&amp;#34; multiple=&amp;#34;multiple&amp;#34;/&amp;gt; &amp;lt;button id=&amp;#34;uploader&amp;#34;&amp;gt;Upload&amp;lt;/button&amp;gt; 这种方法同样是可以的，只不过服务端解析的时候要更麻烦。
Javascript &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;html5uploader.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; var uploader = document.getElementById(&amp;#39;uploader&amp;#39;); uploader.addEventListener(&amp;#34;click&amp;#34;, function(e) { H5Uploader.</description></item><item><title>利用 Gulp 优化部署 Web 项目</title><link>//imziv.com/posts/2015/%E5%88%A9%E7%94%A8gulp%E4%BC%98%E5%8C%96%E9%83%A8%E7%BD%B2web%E9%A1%B9%E7%9B%AE/</link><pubDate>Sun, 26 Apr 2015 11:27:16 +0000</pubDate><guid>//imziv.com/posts/2015/%E5%88%A9%E7%94%A8gulp%E4%BC%98%E5%8C%96%E9%83%A8%E7%BD%B2web%E9%A1%B9%E7%9B%AE/</guid><description>Gulp Gulp是一款项目自动化的构建工具，与Grunt一样可以通过创建任务（Task）来帮助我们自动完成一些工作流的内容。当然，今天我们的内容并不是讨论这二者的区别，仅仅是介绍介绍如何利用 Gulp 来优化我们的 Web 项目中前端自动化工作流。
引言 相信不少人看过百度大牛张云龙的那篇讲解大公司里怎样开发和部署前端代码?的文章，如果没有阅读的朋友请戳。由于在项目部署时，我们需要对项目 js，css,image 等文件进行压缩，合并处理，从而减少客户端对服务 Http 请求，已达到增强页面的加载速度，优化服务器带宽压力等等目的。所以本文主要讲的是利用 Gulp 优化我们 Web 部署优化工作。
安装&amp;amp;初始化 首先你得确保你的电脑上面是否已经安装了 Nodejs, 如果没有安装的话，那么请移步。假定有如下一个 Nodejs 的 Web 项目（当然你也可以是其他的例如 Java，.Net 的 Web 项目，且具体开发目录如下：
|- project |- src // 前端项目的源文件 |- js |- html |- images |- css |- bower_component // bower 前端依赖包管理 |- node_component // nodejs 插件 |- server |- api |- views |- app |- assets // 前端静态文件存放目录 |- js |- css |- images |- templates |- .</description></item><item><title>利用 javascript 和 WebGL 绘制地球 【翻译】</title><link>//imziv.com/posts/2015/%E5%88%A9%E7%94%A8javascript%E5%92%8Cwebgl%E7%BB%98%E5%88%B6%E5%9C%B0%E7%90%83-%E7%BF%BB%E8%AF%91/</link><pubDate>Sun, 22 Mar 2015 01:43:59 +0000</pubDate><guid>//imziv.com/posts/2015/%E5%88%A9%E7%94%A8javascript%E5%92%8Cwebgl%E7%BB%98%E5%88%B6%E5%9C%B0%E7%90%83-%E7%BF%BB%E8%AF%91/</guid><description>原翻译：利用 javascript 和 WebGL 绘制地球 【翻译】
在我们所有已知的 HTML5API 中，WebGL可能是最有意思的一个，利用这个 API 我们能够在浏览器中创造出炫酷 3D 场景的能力。本文将完整的向你展示一些炫酷是如何实现的。
需要特别指出的是，这篇教程我们将会构建一个地球行星模型，这个模型可以像一个兴奋的人一样环绕的旋转，另外，它可能使我们可以获得一些其他程序员的称赞，好吧，就这么多了。
准备 这篇教程我们将会用到一个令人着迷的WebGL插件:three.js. 这个插件跟 JQuery 有点像，不过它是针对WebGL的，它将很多复杂的原生 API 访问接口进行了抽象，从而让我们可以更轻易的利用WebGL的特性。
在 HTML 中，我们的可以通过正常的 script 标签引入这个插件，如下：
&amp;lt;script src=&amp;#34;//cdnjs.cloudflare.com/ajax/libs/three.js/r63/three.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 此处我们引用的是 CDN 版本，如果你有必要，可以使用本地的方法引入。然后我们需要确保WebGL有东西可以在上面进行渲染。这里我们有个灵活的做法：我们可以直接将一般的 Div 或者 Canvas 写到 HTML 中，或者我们可以另外用 JS 创建并且追加 canvas 元素到 Dom 里后再去渲染。这里我们采用第一种容易点的方法，如下：
&amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;container&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;earth.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; 添加完script标签连接到 Dom 中后，我们的 HTML 部分差不多就完成了。
下一步 Tree.js 本身是趋向把东西做的非常接近真实的 3D 桌面程序的。我们拥有一个场景，有一些东西现场直播，然后通过摄像机去浏览，然后有些灯光，特效，渲染在整场景上面，当然他们自身也全都是 3D 对象。这个场景的元素列表似乎有点吓人，在我们的earth.js文件里，所有的这些元素都可以当成形状变量，Javascript文件如下：
var scene, camera, light, renderer, earthObject; var WIDTH = window.</description></item><item><title>随笔-家</title><link>//imziv.com/posts/2015/html5-%E5%85%A8%E5%B1%8F%E7%89%B9%E6%80%A7/</link><pubDate>Sat, 24 Jan 2015 21:56:59 +0000</pubDate><guid>//imziv.com/posts/2015/html5-%E5%85%A8%E5%B1%8F%E7%89%B9%E6%80%A7/</guid><description>全屏功能是浏览器很早就支持的一项功能了，可以让你页面中的 video, image ,div 等等子元素实现全屏浏览，从而带来更好的视觉体验，来看看怎么使用吧。先来看看有哪些 API 和事件支持。
API // 元素请求全屏显示 element.requestFullscreen() // 检测文档的当前状态是否允许执行全屏操作 document.fullscreenEnabled() //当前显示的元素是否处于全屏状态，如果处于，则返回为非空对象，否则返回null document.fullscreenElement() //元素退出全屏显示 document.exitFullscreen() 上面除了RequestFullscreen()是支持element 对象以外，其他 3 个都只是支持document.
Event fullscreenchange // 全屏状态更改时触发 fullscreenerror // 执行全屏错误时触发 由于每个浏览器实现的方式不一样，所以我们实际的调用中还不能直接这样写，需要针对不同的浏览器做支持检测，下面跟着详细的例子看下具体兼容代码。
html &amp;lt;body&amp;gt; &amp;lt;img id=&amp;#34;imgFS&amp;#34; src=&amp;#34;&amp;#34;/&amp;gt; &amp;lt;a id=&amp;#34;btnFS&amp;#34; href=&amp;#34;javascript:;&amp;#34;&amp;gt; FullScreen &amp;lt;/a&amp;gt; &amp;lt;/body&amp;gt; javascript var fullScreen = document.getElementById(&amp;#39;btnFS&amp;#39;); fullScreen.addEventListener(&amp;#34;click&amp;#34;, function(){ var status = document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullscreenEnabled || document.msFullscrrenEnabled; if (status) { var img = document.getElementById(&amp;#34;imgFS&amp;#34;); if (img.requestFullscreen) { img.requestFullscreen(); } else if (img.</description></item><item><title>NodeJS CSV 导出文件名和内容乱码解决</title><link>//imziv.com/posts/2014/nodejs-csv%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6%E5%90%8D%E5%92%8C%E5%86%85%E5%AE%B9%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</link><pubDate>Tue, 04 Nov 2014 15:29:19 +0000</pubDate><guid>//imziv.com/posts/2014/nodejs-csv%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6%E5%90%8D%E5%92%8C%E5%86%85%E5%AE%B9%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</guid><description>// 解决不同浏览器下载文件名称乱码 var userAgent = (req.headers[&amp;#39;user-agent&amp;#39;]||&amp;#39;&amp;#39;).toLowerCase(); res.set(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/octet-stream;charset=utf-8&amp;#39;); if(userAgent.indexOf(&amp;#39;msie&amp;#39;) &amp;gt;= 0 || userAgent.indexOf(&amp;#39;chrome&amp;#39;) &amp;gt;= 0) { res.setHeader(&amp;#39;Content-Disposition&amp;#39;, &amp;#39;attachment; filename=&amp;#39; + encodeURIComponent(filename)); } else if(userAgent.indexOf(&amp;#39;firefox&amp;#39;) &amp;gt;= 0) { res.setHeader(&amp;#39;Content-Disposition&amp;#39;, &amp;#39;attachment; filename*=&amp;#34;utf8\&amp;#39;\&amp;#39;&amp;#39; + encodeURIComponent(filename)+&amp;#39;&amp;#34;&amp;#39;); } else { res.setHeader(&amp;#39;Content-Disposition&amp;#39;, &amp;#39;attachment; filename=&amp;#39; + new Buffer(filename).toString(&amp;#39;binary&amp;#39;)); } // 解决excel打开内容乱码 var dataBuffer = Buffer.concat([new Buffer(&amp;#39;\xEF\xBB\xBF&amp;#39;, &amp;#39;binary&amp;#39;), new Buffer(data)]); res.send(dataBuffer);</description></item><item><title>Hybird App ( 混合模式移动应用)开发初体验</title><link>//imziv.com/posts/2014/hybird-app-%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%88%9D%E4%BD%93%E9%AA%8C/</link><pubDate>Tue, 28 Oct 2014 18:27:06 +0000</pubDate><guid>//imziv.com/posts/2014/hybird-app-%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%88%9D%E4%BD%93%E9%AA%8C/</guid><description>最近 1，2 个月一直都尝试开发一款 hybird app，遇到了很多问题，谈谈自己的体会。
Hybird app (混合模式移动应用），它利用例如安卓端 webview 组件+HTML5 内嵌的方式混合的方式开发的移动应用， 好处显而易见，由于内嵌的是 Html5, 所以跨平台，扩展性，开发成本都是很不错的优势。
Hybird App 拥有很多从开发工具到打包发布的解决方案，比较出名的是来自 Adobe 的 phonegap, 国内有 AppCan,这 2 种解决方案都有比较好的工具平台。这次我采用的的是 Appcan, 需要注意的是 Appcan 的开发工具只有 windows 平台的，另外不得不吐槽的是，方案里面集成的 js 插件脚本，bug 很多。
我采用的技术架构，如图：
其中利用 Appcan 作为应用的打包平台，通过其内置的 JS 组件进行数据请求，请求得到的数据利用 JS 做些业务逻辑处理后，使用 Angular 进行绑定渲染，UI 组件的东西则用的 GMU.js,而 gmu 内置了 zepto.js 和 scroll.js 等等, 页面则是 h5+css3。可以看到的是与传统的 web 相比，其中多了不少 js 框架和库的应用，毕竟把数据的调用和业务处理都移到了 JS 端，所以在这里提醒大家，可以考虑加入 js 模块管理的框架，例如 seajs。数据绑定这块感觉 Angular 真的很棒，写好绑定后，只需要专注后端 JS 数据的业务处理即可，提升了不少开发效率。
在编码阶段遇到了不少问题，例如并不能利用 url 像平时那样进行参数传递，发现抓取不到页面跳转后的参数。为了减少请求次数，也尝试采用 LocalStorage 缓存 json。通过 Manifest cache 缓存 html,css,js 文件，来提升界面的响应速度。通过 css3 替代 js 做动画效果，但是效果并不理想，感觉还是没有 js 来的流畅。页面跳转白屏，数据加载的延迟等等状况，加载动画体验需要做的更好，而且尽量减少页面的跳转，把一些功能集中到单个 html 文件。</description></item><item><title>NodeJs 按行读取文件</title><link>//imziv.com/posts/2014/nodejs-%E6%8C%89%E8%A1%8C%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</link><pubDate>Tue, 02 Sep 2014 15:56:41 +0000</pubDate><guid>//imziv.com/posts/2014/nodejs-%E6%8C%89%E8%A1%8C%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</guid><description>次中方法非依赖第三方 package, 当然你可以用。
line-reader 直接上代码：
var fs = require(&amp;#39;fs&amp;#39;), readline = require(&amp;#39;readline&amp;#39;); var rd = readline.createInterface({ input: fs.createReadStream(&amp;#39;./test.txt&amp;#39;), output: process.stdout, terminal: false }); var i = 1; rd.on(&amp;#39;line&amp;#39;, function(line) { console.log(&amp;#39;第&amp;#39;+ i +&amp;#39;行：&amp;#39;+ line); write(line); i++; });</description></item><item><title>细说 static 关键字及其应用</title><link>//imziv.com/posts/2014/%E7%BB%86%E8%AF%B4static%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</link><pubDate>Sat, 19 Jul 2014 12:59:48 +0000</pubDate><guid>//imziv.com/posts/2014/%E7%BB%86%E8%AF%B4static%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</guid><description>场景 先看段代码，考虑以下场景，其运行结果是什么？
public class Test { static int i = 8; public void printI() { int i = 88; System.out.println(this.i); } public static void main(String arg[]) { Test t = new Test(); t.printI(); } } 最后的运行结果是：8
如果把 this 关键字去掉的话，则结果是 88 ，当然这里有一些对关于 this 关键字的考察。
static 关键字 包含了使用 static 关键字声明的变量或者方法与包含它的类实例对象是没有关联的。因为静态化的域或者方法在类实例化前就已经加载入内存当中了，而并非是需要实例化该类声明的对象后，内存中才会为其分配内存。让我们再看看下面的代码：
class Test { static int i = 8; public void printI() { System.out.println(&amp;#34;i:&amp;#34;+this.i); } public static void main(String arg[]) { System.out.println(Test.i); Test.test(); Test.</description></item><item><title>利用 JS 跨域做一个简单的页面访问统计系统</title><link>//imziv.com/posts/2014/%E5%88%A9%E7%94%A8js%E8%B7%A8%E5%9F%9F%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E7%BB%9F%E8%AE%A1%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 30 Jun 2014 14:48:56 +0000</pubDate><guid>//imziv.com/posts/2014/%E5%88%A9%E7%94%A8js%E8%B7%A8%E5%9F%9F%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E7%BB%9F%E8%AE%A1%E7%B3%BB%E7%BB%9F/</guid><description>其实在大部分互联网 web 产品中，我们通常会用百度统计或者谷歌统计分析系统，通过在程序中引入特定的 JS 脚本，然后便可以在这些统计系统中看到自己网站页面具体的访问情况。但是有些时候，由于一些特殊情况，我们需要自己来设计统计系统。由于前段时间公司的业务需求，我也是自己尝试了下，本文提供的是一个基本思路，统计系统也比较简单。
几个基本统计需求： 1.统计 web 每个页面用户访问量 2.统计用户访问者的和 IP 地址信息 3.页面之间的跳转情况 4.访问高峰时间段
服务器结构： 数据库表设计：
以上只是我简单列举的需求，这边简单的就一张统计表，而这张统计表能满足的需求是不仅仅只是上面四个基本的需求的，可以看需求情况再做相应的业务处理。
tb_visit_count_log
ID ip (varchar) IP 地址 title（varchar）标题 cur_page(varchar) 当前页面 from_page(varchar) 源页面 time（datetime）日期时间 app(varchar) 应用 数据采集:
我们提交编写一个 JS 脚本，用来抓取当前页面中我们需要的数据，然后通过跨域请求道我们的 Statistics Server 进行存储，便于之后的统计分析业务的操作。
JS 跨域：
我们都知道在开发 web 应用的时候，我们经常利用去请求其它服务器内的脚本资源，src 是 source 的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置。所以利用这一点，我们可以通过 JS 动态创建标签，并抓取页面相关的信息后，设置该标签 src 地址为远程 Statistics 服务器地址，将其添加到当前文档中，该标签便会自动将请求发送到指定服务器，而服务器便可解析改请求中的参数和请求信息，将其存储入库。 示例代码：
(function() { var title = document.getElementsByTagName(&amp;#34;title&amp;#34;)[0].innerHTML, // 页面标题 url = window.</description></item><item><title>HTML5 实现图片文件异步上传</title><link>//imziv.com/posts/2014/html5%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0/</link><pubDate>Mon, 26 May 2014 15:31:58 +0000</pubDate><guid>//imziv.com/posts/2014/html5%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0/</guid><description>利用 HTML5 的新特点做文件异步上传非常简单方便，本文主要展示 JS 部分，html 结构。下面的代码并未使用第三发库，如果有参照，请注意一些未展现出来的代码片段。我这边的效果预览：
1.文件未选择 2.文件已选择
HTML 代码部分： 思路：下面代码中我利用 css 的 z-index 属性将 input=&amp;quot;file”标签隐藏在了 id=btnSelect 元素下面，通过触发 a 标签的点击后，弹出文件选择框。下面的 masklayer 用于点击确认按钮后的弹出层，避免用户重复点击确认按钮。
&amp;lt;div id=&amp;#34;wp&amp;#34; class=&amp;#34;warpper&amp;#34;&amp;gt; &amp;lt;a id=&amp;#34;btnSelect&amp;#34;&amp;gt;单击选择要上传的照片&amp;lt;/a&amp;gt; &amp;lt;input id=&amp;#34;uploadFile&amp;#34; type=&amp;#34;file&amp;#34; name=&amp;#34;myPhoto&amp;#34; /&amp;gt; &amp;lt;button id=&amp;#34;btnConfirm&amp;#34; class=&amp;#34;btn&amp;#34; &amp;gt;确认上传&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;maskLayer&amp;#34; class=&amp;#34;mask-layer&amp;#34; style=&amp;#34;display:none;&amp;#34;&amp;gt; &amp;lt;p&amp;gt;图片正在上传中...&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; JS 图片文件验证部分：
验证部分为：大小，是否已经选择，文件的类型 三个部分。第一个 createObject 方法为创建本地图片文件的预览路径，依次验证是否为空，文件类型以及文件大小，不满足条件则一律返回
false,满足以上 3 个条件后，在 dom 中生成图片预览，添加 img 元素，然后利用 createObjectURL()方法获取预览路径。
代码：
//获取数据的URL地址 function createObjectURL(blob) { if (window.URL) { return window.URL.createObjectURL(blob); } else if (window.</description></item><item><title>Mysql 编写定时任务事件</title><link>//imziv.com/posts/2014/mysql%E7%BC%96%E5%86%99%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%BA%8B%E4%BB%B6/</link><pubDate>Tue, 13 May 2014 18:26:26 +0000</pubDate><guid>//imziv.com/posts/2014/mysql%E7%BC%96%E5%86%99%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%BA%8B%E4%BB%B6/</guid><description>场景：
　例如：某系统，用户每天只能拥有一次的抽奖机会，抽过后当天就不可再抽，但是过了 24：00 点后用户就重新拥有一次抽奖机会。像这种需要数据库定时对某个字段进行更新操作的任务，完全可以通过数据库本身的事件机制进行操作，而服务器端也不需要用额外的代码进行这种监控定时的操作。
Mysql:
　本文讨论的是 Mysql 数据库，Event Scheduler 事件调度器应该是在 Mysql5.1 引入的，所以使用定时任务调度时，请注意查看你的 Mysql 版本。
创建事件调度的语法：
/*创建事件event_name*/ DELIMITER $$ CREATE event IF NOT EXISTS event_name ON SCHEDULE 任务条件 ON COMPLETION PRESERVE DO SQL操作 DELIMITER ; 实例情景：每半个小时更新统计字段 count 为 0，
/*创建定时定时更新count字段事件*/ DELIMITER $$ CREATE event IF NOT EXISTS update_count ON SCHEDULE EVERY 30 MINUTE /*MYSQL注意时区设置，默认非中国时区*/STARTS TIMESTAMP &amp;#39;2009-12-18 02:58:00&amp;#39; ON COMPLETION PRESERVE DO update tb_count set count=0 $$ DELIMITER ; 如上，创建了一个名叫 update_count 的事件，执行条件则为每 30 分钟执行一次，(EVERY 30 MINUTE)，执行 Sql 为(update tb_count set count=0)， 当然你可能会按天执行，所以你也可以写(EVERY 1 DAY)，</description></item><item><title>从文件导数据到数据库的性能优化思路（笔记）</title><link>//imziv.com/posts/2014/%E4%BB%8E%E6%96%87%E4%BB%B6%E5%AF%BC%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF%E7%AC%94%E8%AE%B0-/</link><pubDate>Fri, 25 Apr 2014 14:12:51 +0000</pubDate><guid>//imziv.com/posts/2014/%E4%BB%8E%E6%96%87%E4%BB%B6%E5%AF%BC%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF%E7%AC%94%E8%AE%B0-/</guid><description>概述 最近公司一.NET 项目需要对其日志 Log 入数据库统计，写这个脚本导入的任务便落到我身上了。采用了熟练的 Java,这个日志也不是很大，一个文件大概几兆，有上万条数据，一天大概有 7,8 个文件需要这样的导入处理。由于之前写 Web 没有这么去批处理这么多数据，所以没有太注意性能，第一个版本程序导入速度慢的吓人，一个文件导完可能需要 10 多分钟，也就是说如果把每天的文件导完可能需要 2 个多小时的时间，听听就很蛋疼，最终经过优化后，一个文件导入也就几秒，甚至可以更短。目标日志文件的信息都是按行存储，所以程序中按行读取后，然后进行相应的字符串截取入库。下面则为思路分享以及主要代码的分享。
优化思路 1.程序流程： 程序先读取本地的文件到内存，然后把内存的数据批量 Insert 到数据库。 2.归纳：可以看出首先程序需要进行文件 IO 操作，然后则是数据 JDBC 操作，所以优化方向大致可以是以下几个： a.文件 IO 优化 b.JDBC 操作优化 c.使用多线程并行 JDBC 操作
文件常见 IO 简介 Java 的文件读写操作大概有这么几种方式，但是我们应该注意几种文件操作方式的区别，哪些操作方式适合不同的数据文件对象。 1.（InputStream/OutputStream) 为字节输入/输出流，这种读写方式都是按一定字节量读取数据。 2. （FileInputStream/FileOutputStream) 此方法继承自上面的（InputStream/OutpustStream）,同样按字节流输入/输出，用于读取图像之类的原始字节流 3.（FileReader/FileWriter) 此方法适用于按字符流的文件操作 4. （BufferedReader/BufferedWriter) 从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。
注：更详细的 IO 操作说明，请查看具体的 JDK 文档。 此处我采用的 BufferedReader 按行读取，效率比较好 代码片段：
public static List&amp;lt;String&amp;gt; getLogLinesByBuf(String filePath){ List&amp;lt;String&amp;gt; items = new ArrayList&amp;lt;String&amp;gt;(); File file = new File(filePath); BufferedReader reader; if (file.</description></item><item><title>NodeJS 示例异步式(Asynchronous)IO 与同步式 Synchronous)IO</title><link>//imziv.com/posts/2014/nodejs%E7%A4%BA%E4%BE%8B%E5%BC%82%E6%AD%A5%E5%BC%8Fasynchronousio%E4%B8%8E%E5%90%8C%E6%AD%A5%E5%BC%8Fsynchronousio/</link><pubDate>Sat, 29 Mar 2014 14:21:07 +0000</pubDate><guid>//imziv.com/posts/2014/nodejs%E7%A4%BA%E4%BE%8B%E5%BC%82%E6%AD%A5%E5%BC%8Fasynchronousio%E4%B8%8E%E5%90%8C%E6%AD%A5%E5%BC%8Fsynchronousio/</guid><description>理解 IO
IO（Input/Output）通常是指计算机线程进行慈磁盘读写或者网络通信时的一种行为。
同步式（Synchronous)IO 和异步式(Asynchronous )IO
同步式：当计算机调度线程进行 I/O 操作命令后，由于文件的读写或者网络通信需要较长的操作时间，操作系统为了充分利用 cpu，此时会暂停到当前的 I/O 线程对 CPU 的控制（故又称同步式为阻塞式 I/O），把 cup 资源然给其他的线程资源，当 I/O 线程完成了操作时，此时操作系统会恢复此时的 I/O 线程，从而当前 I/O 线程重新获得了 cup 的的控制权，继续完成其他操作。 NodeJs 让很多前端开发者利用 JS 开发服务器变得异常的简单，而异步式 I/O 则是 NodeJs 的一大特点。 异步式：异步式 IO 又称非阻塞式 I/O，异步式与同步式不同的是，当线程进行 IO 操作时，操作系统并不是暂停当前的线程操作，而是执行完 I/O 指令后，操作系统继续让当前线程执行下一条指令，当 I/O 操作完成后，会通过事件（event)通知 I/O 线程，而线程在接收到通知后，会处理响应事件。 简单的说，同步式是让通过多个线程完成多个任务，而异步式则是通过一个线程完成多个任务，遇到 I/O 操作时，依然让线程继续执行其他指令，只是在 I/O 完成后通知线程调度响应事件即可。
图解：
示例代码：
异步式： 注意这里的异步式执行结果是，控制台会先打印 read over,然后才打印 package.json 文件中的内容，也就是说，线程执行文件 IO 时，继续先执行了 console.log(&amp;lsquo;read over&amp;rsquo;); 待读取操作结束后通知线程响应此时的回调函数，执行了结果打印操作。
1 /* 2 * 异步式（Asynchronous） I/O Example. 7 */ 8 var file = require(&amp;#39;fs&amp;#39;);//声明对象 9 //异步式读取 10 file.</description></item><item><title>Java 利用 Axis 远程调用 WebService 接口</title><link>//imziv.com/posts/2014/java%E5%88%A9%E7%94%A8axis%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8webservice%E6%8E%A5%E5%8F%A3-/</link><pubDate>Wed, 26 Mar 2014 17:28:40 +0000</pubDate><guid>//imziv.com/posts/2014/java%E5%88%A9%E7%94%A8axis%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8webservice%E6%8E%A5%E5%8F%A3-/</guid><description>准备工作：
　主要依赖的包：
　1.axis.jar
　官网：http://axis.apache.org/axis/
　2.jaxrpc.jar
　下载地址：http://www.java2s.com/Code/Jar/j/Downloadjaxrpcjar.htm
说明：
　在拿到 wsdl 地址后先分析清楚 xml 文件的一些参数，然后再动手写代码，例如 service 名称，targetNamespace,请求 operation 的名称，要传入的参数类型，返回结果类型等等。具体的代码参考如下：
1 package com.joysee.account.service.impl; 2 3 4 import java.rmi.RemoteException; 5 6 import javax.xml.namespace.QName; 7 import javax.xml.rpc.ParameterMode; 8 import javax.xml.rpc.ServiceException; 9 10 import org.apache.axis.client.Call; 11 import org.apache.axis.client.Service; 12 13 14 public class Test { 15 16 /** 17 * @param args 18 * @throws ServiceException 19 * @throws MalformedURLException 20 * @throws RemoteException 21 */ 22 public static void main(String[] args) throws ServiceException, RemoteException { 23 24 //WSDL地址 25 String wsdlUrl =&amp;#34;http://IP:PORT/ExampleWebService?</description></item><item><title>Java JSON、XML 文件/字符串与 Bean 对象互转解析</title><link>//imziv.com/posts/2014/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8Ebean%E5%AF%B9%E8%B1%A1%E4%BA%92%E8%BD%AC%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 17 Mar 2014 16:12:00 +0000</pubDate><guid>//imziv.com/posts/2014/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8Ebean%E5%AF%B9%E8%B1%A1%E4%BA%92%E8%BD%AC%E8%A7%A3%E6%9E%90/</guid><description>前言
在做 web 或者其他项目中，JSON 与 XML 格式的数据是大家经常会碰见的 2 种。在与各种平台做数据对接的时候，JSON 与 XML 格式也是基本的数据传递格式，本文主要简单的介绍 JSON/XML 文件的读写操作，以及与 Bean 之间的转换。示例代码都是经过 Demo 测试的，当然也会把代码上传到 GitHub.需要的朋友可以看看。
准备工作
我这里对 XML 与 JSON 主要依赖以下 2 个开源库，当然像针对 xml 和 JSON 解析的开源库非常的多，下面这 2 个感觉相对用起来比较简单。需要注意的是如果缺少下面 jar 文件中的一个，可能就会出现 ClassNotFound 异常，如果发现使用的方法在当前库中找不到，则可能是库版本不同造成的，可以去官网查阅。
1.JSON 解析库： Jackson JSON Processor 官网：http://jackson.codehaus.org/
2.XML 解析库 : Simple XML serialization framework 官网：http://simple.sourceforge.net/home.php
JSON 操作详细代码： 1.JSON 字符串转换为 Bean
/** * JSON字符串转换为对象 * @param src JSON字符串 * @param target 目标Bean */ public static &amp;lt;T&amp;gt; T String2Object(String src, Class&amp;lt;T&amp;gt; target) throws JsonParseException, JsonMappingException, IOException { ObjectMapper mapper = new ObjectMapper(); //配置，允许使用单引号字符的JSON mapper.</description></item><item><title>匿名函数块级作用域以及在 JQuery 中的应用</title><link>//imziv.com/posts/2014/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%9C%A8jquery%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</link><pubDate>Fri, 21 Feb 2014 10:59:00 +0000</pubDate><guid>//imziv.com/posts/2014/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%9C%A8jquery%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</guid><description>最近经常回在群里面看到有些朋友问如下这样的 js 写法该如何理解的的问题,虽然可能对匿名函数有些理解，但是有时候看到 JQuery 源码或者其他 JS 库中同样的写法时，就有点不理解了，今天再次分享下这方面的知识点。
(function(){ })(JQuery); 对以上写法的理解：
　上面的这种写法通常叫做“块级作用域”，块级作用域的好处就是可以将匿名方法内部的变量进行私有化，当程序运行结束之后便将一些变量自动销毁。第一个（）号表示次函数为一个函数表达式，其中包含了一个匿名函数，后面的一个（）则表示执行这个函数表达式中的匿名方法，而 JQuery 则作为这个匿名函数的一个参数。
匿名函数
　通常声明一个匿名函数的方法是：
//匿名函数 var getPerson = function() { //次方法为函数表达式的声明方法 } getPerson();//调用匿名方法 所以大家又可以把上面的代码看成是这样子的：
function() { }(); 但是，虽然逻辑上是这么一回事，但是你如果按照上面的这种写法，运行的时候会出现语法错误的问题。所以这个时候利用（）这个分组操作符括起这个函数表达式即可，然后括号（）执行此函数。（关于函数声明的方法以及函数表达是的内容可以参考汤姆大叔的这篇文章http://www.cnblogs.com/TomXu/archive/2011/12/29/2290308.html）
JQuery 中的应用：
//此块级作用域中声明了2个参数 (function( window, undefined ) { // Use the correct document accordingly with window argument (sandbox) var location = window.location, document = window.document, docElem = document.documentElement, // Map over jQuery in case of overwrite _jQuery = window.</description></item><item><title>JS 实现星级评价</title><link>//imziv.com/posts/2014/js%E5%AE%9E%E7%8E%B0%E6%98%9F%E7%BA%A7%E8%AF%84%E4%BB%B7/</link><pubDate>Thu, 09 Jan 2014 16:55:00 +0000</pubDate><guid>//imziv.com/posts/2014/js%E5%AE%9E%E7%8E%B0%E6%98%9F%E7%BA%A7%E8%AF%84%E4%BB%B7/</guid><description>说明 　本方法采用了 Jquery 库，暂时检测兼容 IE8 版本。本示例的 2 种颜色的星星都是放入了一张 png 图片当中，当然还有其他的一些实现思路。本示例展示的情况是当前页面只有一个星级评价的情况。
思路 　通过对星级显示元素的，mouseenter,mouseout,click 三个事件的监听，从而星星显示的个数。其中我用了 2 个变量（temp_value,choice_value）来存放当前选定星级的值和当前临时的星级值；
temp_value : 临时的星级值； choice_value : 选择的星级值； mouseenter : 鼠标移入，获取当前所在的星星级别赋予 temp_value，调整当前星星的图片颜色； mouseout : 鼠标移除，通过对比 choice_value 值，重新调整星星图片颜色； click : 鼠标单击后，获取当前的星级值，赋值给 choice_value;（注意在 click 前已经进行过 mouseenter 事件了，click 后进行了 mouseout 事件了） 当完成选定值后，在需要提交评价值的时候，可以通过 JS 去获取变量 choice_value 的值； HTML 结构代码：
&amp;lt;h1&amp;gt;评价：&amp;lt;/h1&amp;gt; &amp;lt;ul id=&amp;#34;star&amp;#34;&amp;gt; &amp;lt;li title=&amp;#34;很差&amp;#34; id=&amp;#34;star1&amp;#34; star=&amp;#34;1&amp;#34;&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li title=&amp;#34;差&amp;#34; id=&amp;#34;star2&amp;#34; star=&amp;#34;2&amp;#34;&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li title=&amp;#34;一般&amp;#34; id=&amp;#34;star3&amp;#34; star=&amp;#34;3&amp;#34;&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li title=&amp;#34;好&amp;#34; id=&amp;#34;star4&amp;#34; star=&amp;#34;4&amp;#34;&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li title=&amp;#34;很好&amp;#34; id=&amp;#34;star5&amp;#34; star=&amp;#34;5&amp;#34;&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 注：如果页面中不止一个星级评价，也就是出现多行的情况，这个时候只需要对 Dom 中 li 的 id 进行一些改造，加上动态的下标，从而区分不同的元素。另外有个点就是，我把选定的星级值放入的是 JS 变量中去了，多个评价值的情况下，建议可以在 Dom 中加上隐藏表单域去存放选定的当前星级值。</description></item><item><title>Spring 中@Component 注解,@Controller 注解详解</title><link>//imziv.com/posts/2013/spring%E4%B8%ADcomponent%E6%B3%A8%E8%A7%A3controller%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 24 Dec 2013 16:28:00 +0000</pubDate><guid>//imziv.com/posts/2013/spring%E4%B8%ADcomponent%E6%B3%A8%E8%A7%A3controller%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/</guid><description>在使用 Spring 的过程中，为了避免大量使用 Bean 注入的 Xml 配置文件,我们会采用 Spring 提供的自动扫描注入的方式,只需要添加几行自动注入的的配置,便可以完成
Service 层,Controller 层等等的注入配置.使用过程中,在 Service 层中的实现类头上加@Compopnet 注解，在 Controller 类头加@Controller 注解，便完成了配置。例如在
Controller 中当我们调用某个 Service 时就不需要 Set 方法了，直接通过@Autowried 注解对 Service 对象进行注解即可：例如
在 Controller 中：
@Controller@RequestMapping(&amp;#34;/test&amp;#34;) public class ExampleController { @Autowired private ExampleService service; } 在 Service 中
@Component public class ExampleServiceImpl Implements ExampleService { @Autowired private ExampleDao exampleDao; } Spring 中的 XML 配置：
&amp;lt;!-- 自动扫描service,controller组件 --&amp;gt; &amp;lt;context:component-scan base-package=&amp;#34;com.example.service.*&amp;#34;/&amp;gt; &amp;lt;context:component-scan base-package=&amp;#34;com.example.controller.*&amp;#34;/&amp;gt; 通常，在 Bean 为添加@Component 注解的情况下，在启动服务时，服务会提前报出以下代码中这样的异常情况下，此时应该检查相应 Bean 是否正确添加@Component</description></item><item><title>制作滑动条菜单，如何延时处理滑动效果，避免动画卡顿</title><link>//imziv.com/posts/2013/%E5%88%B6%E4%BD%9C%E6%BB%91%E5%8A%A8%E6%9D%A1%E8%8F%9C%E5%8D%95%E5%A6%82%E4%BD%95%E5%BB%B6%E6%97%B6%E5%A4%84%E7%90%86%E6%BB%91%E5%8A%A8%E6%95%88%E6%9E%9C%E9%81%BF%E5%85%8D%E5%8A%A8%E7%94%BB%E5%8D%A1%E9%A1%BF/</link><pubDate>Sat, 07 Dec 2013 16:47:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E5%88%B6%E4%BD%9C%E6%BB%91%E5%8A%A8%E6%9D%A1%E8%8F%9C%E5%8D%95%E5%A6%82%E4%BD%95%E5%BB%B6%E6%97%B6%E5%A4%84%E7%90%86%E6%BB%91%E5%8A%A8%E6%95%88%E6%9E%9C%E9%81%BF%E5%85%8D%E5%8A%A8%E7%94%BB%E5%8D%A1%E9%A1%BF/</guid><description>前几日在利用 JQuery 做菜单滑动标记这个效果的时候，最后发现滑动条在我用鼠标快速滑动的时候，会出现滑动条延迟滑动，并且有卡顿的现象,相当影响体验感受。不完美～
在几番询问下，得到了一个延时处理的解决方案，完美解决了这个问题。
思路 在鼠标移入目标元素的时候，启用定时操作，我目前设置的为 1/10 秒，也就是说，当鼠标如果在目标元素区域停留了满&amp;gt;足我预设值的时间范围内的话，我就执行动画效果，否则没有达到预设值的时间范围便移出来目标元素的话，便取消延&amp;gt;时执行的操作。简单的说，满足定时条件执行，否则取消操作。
具体代码：
HTML 部分：
1: &amp;lt;ul id=&amp;#34;nav&amp;#34;&amp;gt; 2: &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;menu1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 3: &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;menu2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 4: &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;menu3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 5: &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;menu4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 6: &amp;lt;span id=&amp;#34;slide_1&amp;#34; class=&amp;#34;slidebar&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; 7: &amp;lt;/ul&amp;gt; 未添加延时操作的 JS 代码 1: 2: //导航菜单一监听hover效果 3: $(&amp;#34;#nav li a&amp;#34;).mouseenter(function() { 4: $(&amp;#34;#slide_1&amp;#34;).animate( { 5: left : $(this).offset().left 6: },200); 7: }); 添加延时操作的 JS 代码 1: //加延迟处理的导航条2 2: var tId = null,ele;//时间ID，当前元素 3: $(&amp;#34;#nav1 li a&amp;#34;).mouseenter(function() { 4: ele = $(this); 5: //设置定时操作，并记录时间ID，用于清除定时器 6: tId = setTimeout(function() { 7: $(&amp;#34;#slide_2&amp;#34;).</description></item><item><title>SpringMVC 中 HttpMessageConverter 简介和 Http 请求 415 Unsupported Media Type 的问题</title><link>//imziv.com/posts/2013/springmvc-%E4%B8%ADhttpmessageconverter%E7%AE%80%E4%BB%8B%E5%92%8Chttp%E8%AF%B7%E6%B1%82415-unsupported-media-type%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 05 Dec 2013 15:12:00 +0000</pubDate><guid>//imziv.com/posts/2013/springmvc-%E4%B8%ADhttpmessageconverter%E7%AE%80%E4%BB%8B%E5%92%8Chttp%E8%AF%B7%E6%B1%82415-unsupported-media-type%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>一、概述 　本文介绍且记录如何解决在 SpringMVC 中遇到 415 Unsupported Media Type 的问题，并且顺便介绍 Spring MVC 的 HTTP 请求信息转换器 HttpMessageConverter。
二、问题描述 　在 SprinvMVC 的 Web 程序中，我在页面发送 Ajax 的 POST 请求，然后在服务器端利用@requestBody 接收请求 body 中的参数，当时运行过程中，我想服务器发送 Ajax 请求，浏览器一直反馈 415 Unsupported Media Type 或者 400 的状态码，以为是 Ajax 写的有问题。便查找了半天资料，才发现 spring-mvc.config 文件的配置中少了东西，当然也有可能是你真的在 Ajax 中缺少了对 Content-Type 参数的设置。分析后应该是我 springMVC-config.xml 文件配置有问题。
（注）：400：（错误请求） 服务器不理解请求的语法。 415：（不支持的媒体类型） 请求的格式不受请求页面的支持。
三、解决方法 　在 springMVC-config.xml 文件中，增加了一个 StringHttpMessageConverter 请求信息转换器，配置片段如下：
&amp;lt;!--- StringHttpMessageConverter bean --&amp;gt; &amp;lt; bean id = &amp;#34;stringHttpMessageConverter&amp;#34; class = &amp;#34;org.</description></item><item><title>一个可以模拟 GET，POST，PUT，DELET 请求的 HTTP 在线工具</title><link>//imziv.com/posts/2013/%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E6%A8%A1%E6%8B%9Fgetpostputdelet%E8%AF%B7%E6%B1%82%E7%9A%84http%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/</link><pubDate>Tue, 03 Dec 2013 19:02:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E6%A8%A1%E6%8B%9Fgetpostputdelet%E8%AF%B7%E6%B1%82%E7%9A%84http%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/</guid><description>一个简陋的 HTTP 请求工具，UI 比较丑陋。0.0，可以用于接口调试。
　之前在调试公司的远程接口的时候用的是 curl,后来也在网上找到几种 Http 请求模拟的客户端程序。当时后来发现 google app 里面有很多在线版的模拟工具，觉得很不错。后来自己也想做一个在线版便动手做的，有问题可以联系我，欢迎交流。
访问地址：http://httptool.duapp.com/
首先温习一下 Http 请求的内容（内容来自于互联网），标准 Http 协议支持六种请求方法：
GET：GET 可以说是最常见的了，它本质就是发送一个请求来取得服务器上的某一资源。资源通过一组 HTTP 头和呈现数据（如 HTML 文本，或者图片或者视频等）返回给客户端。GET 请求中，永远不会包含呈现数据；
HEAD：HEAD 和 GET 本质是一样的，区别在于 HEAD 不含有呈现数据，而仅仅是 HTTP 头信息。有的人可能觉得这个方法没什么用，其实不是这样的。想象一个业务情景：欲判断某个资源是否存在，我们通常使用 GET，但这里用 HEAD 则意义更加明确；
PUT：这个方法比较少见。HTML 表单也不支持这个。本质上来讲， PUT 和 POST 极为相似，都是向服务器发送数据，但它们之间有一个重要区别，PUT 通常指定了资源的存放位置，而 POST 则没有，POST 的数据存放位置由服务器自己决定。举个例子：如一个用于提交博文的 URL，/addBlog。如果用 PUT，则提交的 URL 会是像这样的”/addBlog/abc123”，其中 abc123 就是这个博文的地址。而如果用 POST，则这个地址会在提交后由服务器告知客户端。目前大部分博客都是这样的。显然，PUT 和 POST 用途是不一样的。具体用哪个还取决于当前的业务场景；
DELETE：删除某一个资源。基本上这个也很少见，不过还是有一些地方比如 amazon 的 S3 云服务里面就用的这个方法来删除资源；
POST：向服务器提交数据。这个方法用途广泛，几乎目前所有的提交操作都是靠这个完成；
OPTIONS：它用于获取当前 URL 所支持的方法。若请求成功，则它会在 HTTP 头中包含一个名为“Allow”的头，值是所支持的方法，如“GET, POST”。
通常我们会利用 GET，PUT，POST，DELETE 几个请求去模拟服务器对数据库的增删改查操作：</description></item><item><title>利用 link 标签的 disabed 属性大面积的对其他标签元素的 CSS 样式进行替换操作</title><link>//imziv.com/posts/2013/%E5%88%A9%E7%94%A8link%E6%A0%87%E7%AD%BE%E7%9A%84disabed%E5%B1%9E%E6%80%A7%E5%A4%A7%E9%9D%A2%E7%A7%AF%E7%9A%84%E5%AF%B9%E5%85%B6%E4%BB%96%E6%A0%87%E7%AD%BE%E5%85%83%E7%B4%A0%E7%9A%84css%E6%A0%B7%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%9B%BF%E6%8D%A2%E6%93%8D%E4%BD%9C/</link><pubDate>Sat, 23 Nov 2013 11:50:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E5%88%A9%E7%94%A8link%E6%A0%87%E7%AD%BE%E7%9A%84disabed%E5%B1%9E%E6%80%A7%E5%A4%A7%E9%9D%A2%E7%A7%AF%E7%9A%84%E5%AF%B9%E5%85%B6%E4%BB%96%E6%A0%87%E7%AD%BE%E5%85%83%E7%B4%A0%E7%9A%84css%E6%A0%B7%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%9B%BF%E6%8D%A2%E6%93%8D%E4%BD%9C/</guid><description>由于平时对元素样式的控制基本上只是 3，4 个，所以一般用 Jquery 的时候直接使用$(element).css();这个方法，或者使用$(element).addClass()方法完成样式操作。对于小范围元素的操作来说，这是非常方便的。但是当针对众多元素同时进行操作的时候呢，这 2 个方法让代码看起来就比较重量级了，代码的可读性也比较小。
　过程起初，我先尝试了一种方式，就是在 JS 代码中动态插入 link 标签，引入新的样式文，但是很遗憾的是根本就不起作用，因为那个时候浏览器已经把样式渲染到页面元素了，新引入的样式文件根本就不会被浏览器执行渲染。所以我选择了另外一种方式，就是把 2 个样式文件同时先加载完毕，然后先禁用其中一个文件，等到在需要出现的时候，利用 JS 代码控制其启用，从而达到整体控制。
HTML 代码片段：
&amp;lt;link href=&amp;#34;/public/stylesheets/page/application/first.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; &amp;gt; &amp;lt;link id=&amp;#34;second_css&amp;#34; disabled=&amp;#34;true&amp;#34; href=&amp;#34;/public/stylesheets/page/application/second.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; &amp;gt; 代码中我用了 2 个 link 标签，注意看到第二个 link 标签中我添加了 ID 属性和 disabled 这 2 个属性。ID 当时是用于 JS 便于操控，disabled 用于在需要的时候取消禁用，需要的时候启动禁用，从而覆盖原有样式。由于在实际开发中，我的第一个样式文件中包含了其他许多不需要被大面积操作元素的样式，所以在操作的时候我并没有采用这种思路：
采用 first.css 文件 —&amp;gt;禁用 second.css 文件 或者 采用 second.css 文件—&amp;gt;禁用 first.css 文件 而是
　我在 second.css 文件中，把样式属性值都添加了!important 属性值，从而增加其显示的优先级，达到覆盖 first.css 文件中的样式。也就是单独的只对 second.css 的样式文件进行操作，当然你也可以纯粹的对 2 个文件进行直接操作，不需要在第二个样式文件中添加!</description></item><item><title>作为 WEB 工程师，我们是不是应该积极的推进一下用户浏览器的使用体验？</title><link>//imziv.com/posts/2013/%E4%BD%9C%E4%B8%BAweb%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%88%91%E4%BB%AC%E6%98%AF%E4%B8%8D%E6%98%AF%E5%BA%94%E8%AF%A5%E7%A7%AF%E6%9E%81%E7%9A%84%E6%8E%A8%E8%BF%9B%E4%B8%80%E4%B8%8B%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link><pubDate>Thu, 14 Nov 2013 15:24:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E4%BD%9C%E4%B8%BAweb%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%88%91%E4%BB%AC%E6%98%AF%E4%B8%8D%E6%98%AF%E5%BA%94%E8%AF%A5%E7%A7%AF%E6%9E%81%E7%9A%84%E6%8E%A8%E8%BF%9B%E4%B8%80%E4%B8%8B%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid><description>为什么会写这篇文章，其实是有原因的。目前我工作的公司的 Web 网站仅支持 IE8 以上的版本，然后我们经常接到客户的反馈，说为什么在他浏览器当中 flash 怎么显示不了，或者为什么在他浏览器中有这样那样的问题。有时候的确是一件很恼怒的事情。
　我很想知道为什么在中国，使用 IE6 浏览器的人为什么还有这么多，为什么用户不愿意升级到体验更好，使用更方便的浏览器当中。其实我仔细想想，毕竟用户打交道的 web 都是出自我们之手，虽然很多用户对有些互联网产品并不了解，但是我们作为开发者是可以比较好的去引导用户去提升使用体验。这无论是对用户，产品，开发者来说都是有益的。下图是 13 年 CNZZ 关于浏览器使用的一个统计： 　老版本的浏览器在体验上并不好，而且漏洞又多，对于这个鱼龙混杂的互联网时代来说，对自己隐私，财产也是有不小的安全隐患，同时无论是对于用户，产品，开发者来说这都是一件不好的事情。尤其是还有很多用户停留在的 IE6 浏览器。无论其加载速度，渲染效果，还是对 css3 和 HTML5 等等新特性的支持上都不好，然后这些新特性，在新版本的浏览器中都得到了实现，其用户体验是老版本 IE 所不能比的。所以从用户体验的角度而言，作为开发者本身就是为用户服务的，我们更应该促使用户去升级浏览器，去增强体验和用户感受。当时据我观察，我们大部分 web 工程师并没有这样干，或者说干的并不好。
　通常我们针对 IE6 就是这样处理的：
　1.兼容到 IE8，放弃 IE6；（我目前的做法）
　2.兼容 IE6，并没有引导用户升级；
　3.做到兼容，并且引导用户升级或者更换其他更好体验的浏览器。（这样做的目前我见到的网站很少）
　总结：
　很明显，如果我们开发人员能在开发产品的时候，去引导用户升级体验的话，我相信可以帮助很多用户获取更好的体验，从而提升产品的体验。这同时也能减轻开发者处理兼容性问题的负担。由于很多中国互联网用户在浏览器产品上面缺乏一定的常识，所以很多人不知道也不会如何升级产品，如果我们能做出更人性化的引导，我相信至少还是有些作用的。</description></item><item><title>我快成为了我一直讨厌的那种人（说好的回来好好做人呢？）</title><link>//imziv.com/posts/2013/%E6%88%91%E5%BF%AB%E6%88%90%E4%B8%BA%E4%BA%86%E6%88%91%E4%B8%80%E7%9B%B4%E8%AE%A8%E5%8E%8C%E7%9A%84%E9%82%A3%E7%A7%8D%E4%BA%BA%E8%AF%B4%E5%A5%BD%E7%9A%84%E5%9B%9E%E6%9D%A5%E5%A5%BD%E5%A5%BD%E5%81%9A%E4%BA%BA%E5%91%A2/</link><pubDate>Mon, 28 Oct 2013 19:41:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E6%88%91%E5%BF%AB%E6%88%90%E4%B8%BA%E4%BA%86%E6%88%91%E4%B8%80%E7%9B%B4%E8%AE%A8%E5%8E%8C%E7%9A%84%E9%82%A3%E7%A7%8D%E4%BA%BA%E8%AF%B4%E5%A5%BD%E7%9A%84%E5%9B%9E%E6%9D%A5%E5%A5%BD%E5%A5%BD%E5%81%9A%E4%BA%BA%E5%91%A2/</guid><description>文章使用这个标题别无他意，主要是本身对自己当前的学习和生活状态非常的不满，算是自嘲且提醒勉励自己。计划的生活，从来没有按计划去实施过，马上快工作一年了，除了刚开始的几个月进步比较快，但如今却感觉自己好像遇到了瓶颈，技术学习上一直没有太多的进步。下面来看看我是怎么计划好自己每周学习计划的：
周一至周五：除去每天白天的正常上班时间，完成自己的份内的工作外，且在工作中记录一些典型的问题。晚上回家阅读有关技术方面的书籍，包括算法，操作系统，javascript,java 等基础的内容； 周六：我会根据平时工作内容的记录，做相应的学习总结，然后记录博文，也就是说一星期起码有一篇总结性的文章。另外我会尝试去翻译国外大牛的博文或者其他开源技术的教程，学习增加英文水平。其他时间我会去写写自己的小工具，尝试写小的 js 插件什么的； 周日：由于个人比较喜欢音乐，由于之前不久买了一把吉他，所以想好好学习一下这个乐器，另外一值也想学习几首英语歌曲，一是为学习英语增加兴趣，另一点也是因为喜欢音乐，个人也比较喜欢看电影，偶尔去影院看场电影，略作点评。 上面的计划看起来很美好对不对？我也觉得很美好，但是！我基本没有做好任何一件事情！针对以上简略的学习计划，我买了一本 Javascript 书籍，然后从同事那边借来了各种设计模式等等计算机的书，浏览器也收藏了各种技术博客，开源网站。买的那本 JS 书籍本来一个月就可以看完的，我却迟迟到 9 月底才看完。好吧，看看我是怎么完成计划的吧：
周一～周五：工作基本上是完成了，但是效率相比以前降低了不少，具体原因在此不做分析。至于工作记录，做过，但是很少，且并没有做整理和分析。书籍，晚上偶尔看几页书，坚持不了很久就睡觉。然后大部分时间就是看电视剧或者看别人打游戏，好吧，电视剧是我曾经鄙视别人看的那些（不过没有神马偶像剧！），游戏自己不玩，但是喜欢看别人打，这就更可悲了～不谈了，太惨淡了。 周六：赫赫～早上起来的比较晚，基本上洗刷完就差不多得去买菜，然后回来做饭吃饭，上午的时间就没有了。下午有时候犯困，接着睡～博文周六很少写，偶尔会去看看博文，逛逛一些技术社区。然后继续看电视剧。差不多一天就又这样过去了。翻译目前我就翻译了 2 篇，而且很短的那种。尝试写很多工具，插件，但是都是开了头，没有过程，更谈不上结尾～shit! 周日：除了近期有好电影回去观看以外，。其他时间与周日差不多，其他除了认识了几根弦，手指怎么拨，便没有什么进展了。英语歌尝试过，但是没有坚持，至今很多只会一句 2 句，还是高潮部分。shit! shit! 今天为什么会这样吐槽自己，实在是有些忍受不了自己了。说好走完 318 回来好好做人的。。。。
　也是由于今天巧合的看到了一些同行，同龄人的博客，看到了他们记录自己的人生和故事，我更是忍受不了当今自己的行径，跟他们比，我完全差的太远了。本身感觉自己最近一直没有太多的进步，生活乏味，没有目标，尤其是对 js 的学习产生兴趣后，便发现这就像是一个无底洞～各种各样的开源框架，先不说早期的 Jquery，dojo 什么的，什么 AngularJS，Nodejs,backbone,乱七八糟，今天想学这个，明天想学那个，搞了这么久，都是仅仅做了一个了解，连个皮毛都算不上。所以最近的学习也是相当的彷徨～
　想起自己大一刚入学那个时候，当时那个学习状态时相当的疯狂，每天写代码，看书。记得大一春节那会回家，带了一本 java 基础的书，由于条件原因，我每天拿着本子超代码，吃完饭就回房间看书超代码。爸妈也不知道我在干什么，反正我不想任何人打扰我，那个时候在学校整体混迹于各种论坛，看到各种牛人和技术，觉得自己太弱太弱了，觉得自己有学不完的东西，所以也是相当的卖力，想追赶，想去学习各种高端的技术。回到学校每天也是写 C 语言，练习数据结构和算法，有时候在路上走路，脑袋还会想一些算法问题。可是到大二的时候情况又有些变化，那会和同学一起玩上了英雄联盟，所以写代码，看书也就没有以前那么多了，不过我每天还是在坚持。但是明显进步速度下降了一大截。后来当大二要结束的时候，出去找实习工作期间，才发现自己各种不足。后来利用一个暑假，恶补了一些技术漏洞，最后才顺利找到工作。
　工作了将近一年，发现自己并没有太多的进步，看看自己以前有过的疯狂学习劲头，看看如今自己的低靡颓废，有点过于安于现状，安于生活了。今天看到同样的一名 90 后，通过自己的努力，大学期间在 google,微软实习过，毕业后拿到 twitter 和 facebook 的 offer，看到他博客中记录自己从中学到大学的学习经历，觉得自己简直弱爆了，太弱了，视野太狭隘了，真的，太狭隘了。有兴趣的同学可以点击进去看看： https://www.byvoid.com/zhs/blog/my-highschool-1。
　尤其今天看了很多前辈的博文，写记录自己过去一路走来的文章，然后看到这位同样 90 后的同行，看看现在自己的生活，看看自己曾经美好的计划，我就对自己喊了，shit~!真心讨厌现在的自己。简直看不下去。也许我有些激进了，但自己的确太差了。。。
　吐槽的文字就先写到这吧，多余的不说了，有和我同样境况的同学一起加油吧～也欢迎和我交流。</description></item><item><title>程序员的 318 骑行之旅</title><link>//imziv.com/posts/2013/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84318%E9%AA%91%E8%A1%8C%E4%B9%8B%E6%97%85/</link><pubDate>Tue, 15 Oct 2013 10:39:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84318%E9%AA%91%E8%A1%8C%E4%B9%8B%E6%97%85/</guid><description>马上到十一月了，算上实习的时段，即是我踏上社会工作一年时间了。今年 6 月份还回到母校拿去了我的毕业证，便依依不舍得继续回到了工作的岗位，继续码农的日子。拿毕业证期间，总共也就请了 3 天假，从南京回到武汉，想在毕业的时候好好玩一下，可是却什么也没有做，只是和同学吃了吃饭，叙叙旧，然后大家就各奔东西了。
大概 8 月份的时候，在网上看到了一朋友的召集帖，关于 9 月中旬骑行 318 国道去拉萨的信息。那段时间工作状态实属不好，效率也不高。想想今年自己刚刚毕业，说了好多次要疯狂一把却一直没有去实现，大学有时间的时候那会没钱，毕业工作有点钱却没有时间，确实是一件很纠结的事情。不过仔细研究了下 9 月份的时间，正是中秋和国庆假期在一起的时间，心中便盘算请半个月假，加上这些假期便刚刚够骑行 318 整个行程了。是的，我联系朋友了，决定加入这次旅行了～！大概在出发前半个月，我向老板提出了请假的请求，其实当时心中很忐忑，不知道老板会不会答应，不过最终老板同意了我的请假，当时也是非常大高兴，再次感谢老板的支持，让我拥有了这次刺激，欢乐，无数美景相伴的 318 骑行之旅～
　9 月 12 号，我坐上了去成都的火车，在车上满满想的是对这次旅程的幻想。其实在这次骑行之前好多年我没怎么骑自行车了，大概大学的时候偶尔和同学出去骑骑自行车玩玩，然后就是在出发前一个月每晚尽量出去骑 15 公里左右，最远的估计也就是 20 多公里而已。当时骑行 318 国道从成都到拉萨，总路程是 2100 公里左右，平均每天 100 公里左右，攻略骑行周期是 24 天，其中翻越 4000 海拔以上的山峰有 12 座，包括 2 座 5000 海拔的山。有些路段的路都是泥浆，还伴随这滑坡，而旁边就是峭壁与大河。
　在 9 月 13 号我已是到达了这座天府之城—成都。在成都简略的修整，然后做了些最后的准备，补给了一些装备，买了些保暖的衣物。在成都遇见些从拉萨过来的驴友，说那边天气有点冷，所以要准备些保暖的装备。9 月 15 号是我们出发的日子，浩浩荡荡的 15 个人便从成都出发，第一程 150 公里到雅安。那天早晨在成都买了 4 个包子，吃了一口实在难吃，我便全部扔了，这一顿早餐不吃，害的我一整天吃尽了亏，也是给我后来的行程上了一课！整个路程中队伍保持每小时 25 公里的时速，大约到中午的时候，骑行了将近 60 公里左右，离中午补给点还有 20 公里左右的时候，体力出现严重下滑，肚子相当空虚，任凭我怎么打起精神，就是没劲，怎么怎么就是踩不动，之后被大部队甩开了 10 公里左右，没办法，在后面我只能慢慢踩，后来发现一些被我们超越的队伍也是骑上来了，还有女汉子，对我我加油，当时心里难受的很，竟然被女汉子给超越了！只好停下车吃了吃随带的饼干，当时貌似并没有起太大的作用，当我骑到补给点的时候，大部队的午饭已经吃完了，我炒了一个餐，猛猛的吃了几碗饭，吃完大约调整了下，下午的 80 公里就又开始了。
　吃完饭果然还是不一样，不过大概骑了 40 公里左右的时候，体力又出现下滑，还伴随着拉肚子，一路上不断的吃，喝红牛（大家都说只能是心理作用）。在离雅安市还有几公里，爬最后一个山坡的时候，已经 8 点钟了，队伍大部分人已经到了，而那个时候天已经黑了，我一个在后面拼命的爬那个坡，这个坡我骑上去，掉下来，骑上去，掉下来了我自己记不得有多少次，当时心里太难受了，想到了为什么没有人来帮我，想到了父母，真的，心里相当的难受，很无助。当时自己可能心有点太急了，因为比较晚了，天也黑了，人生地不熟，最后慢慢的终于推了上去，当看到最后几公里都是下坡的时候，一阵轻松，下去的时候连刹车也是没有带，一口气下去了。住到旅社的时候，下了驮包，人胃不知为何有点恶心想吐的感觉，找了张床，一动不动的躺了半个多小时，然后去洗澡，洗衣服，吃完饭就立马躺下休息了，那一夜下了一晚的大雨。</description></item><item><title>简谈“开放平台”设计中的一些感悟</title><link>//imziv.com/posts/2013/%E7%AE%80%E8%B0%88%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/</link><pubDate>Wed, 28 Aug 2013 14:21:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E7%AE%80%E8%B0%88%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/</guid><description>从 2012 年 11 月份实习开始，到现在 2013 年 9 月已经算是工作将近一年时间了,个人是从工作中学到了不少东西的。刚进公司的时候主要是负责平台服务器开发，后来由于我对前端的一些偏向，所有年后不久就转到公司前台业务的 Web 开发。因为我从公司开放平台服务的开发，然后到公司 web 产品的开发这 2 个部分都有参与，所以自己对公司的这个架构设计上和业务层面的一些设计也是有了自己比较深刻的感受。其中开发过程中发现公司开发平台设计中，由于一些不合理的设计，造成了公司之后的一些依赖开放平台服务器的项目的开发成本严重的增加，并影响了整个开放平台的生态和布局。仅此写文总结，并无他意，希望对自己之后的工作有帮助。下面让我细细讲解我的一些理解。
开放平台的理解　 　开放平台简而言之即是一个可提供数据接口的服务器，什么样的数据就要根据具体的业务了。如今各大公司都有自己相应的开放平台，例如新浪微博的开放平台，百度开放平台等等。开放平台主要是给开发者提供了丰富的数据接口，让开发者在利用已有的开放平台的基础上可以轻松的开发出满足自己业务设计的程序。所有一个开放平台的设计如果不合理会直接导致开发者的开发成本直接翻倍。开放平台本身是为了简化并降低开发者的开发成本的，如果由于设计的不合理，返回会造成帮倒忙情况。
公司的开放平台的现状 　公司开放平台的主要功能是为开发者和公司用户提供数据支持，其中主要存贮处理的是从远程硬件设备上面采集过来的传感器数据，并支持对相应的设备进行远程控制。当然，平台支持开发者注册接入自己的传感器和控制设备的，并提供公司项目和产品的支持。起初，这个平台包含的内容比较少，只是对简单的传感器，控制设备进行的管理和数据处理。后来由于公司在开发一些项目时候，由于业务的需求，逐渐抽象了一些新的概念，例如：场景，权限。当时平台团队为了适应更多的项目，并且为了满足公司 web 项目组和手机项目组的接口需求，在没有慎重考虑的情况下，决定把业务性的东西给设计到了开发平台当中，但是当时只是迎合了当前的项目，对广泛的需求欠缺了考虑。而后果是可想而知的。下面是平台对外数据支持的一个结构图：
　在平台为了适应项目上的一些需求的同时，由于融入了相应的业务概念后，当为了满足公司移动端和 web 产品更多的项目开发需要的时候，平台组不得不为了不断的需求变动对平台的设计再三的更改，同时也需要提供越来越多的接口。由于平台在业务上过多的设计，导致的一个很明显的结果就是，发现开放平台总是不能满足新项目的需求，而平台开发团队老是要重新的设计和开发。具体后遗症我总结的有下面几条：
开放平台由于不小心融入了过度的业务性设计，开放平台一点都不开放！有强烈的业务定制化性质！ 平台陷入了重新设计开发的恶性循环，增加了平台团队后期的开发成本和维护成本 开发者发现开放平台并不能满足自己项目的业务需求 公司 web 项目组每次的开发周期并未得到缩短，反而由于每次项目上的问题，在平台接口上花费了大量的精力 开放平台丢失了为开发者提供开放接口的本质 由于整个平台支撑着公司所有产品与项目的运营，同时目标是对外开放，所有由于这些设计上的失误，对公司的整个产品线的影响是相当大的。个人体会是前期对这种开发平台的设计时一定要慎重考虑，不然后果是相当的麻烦的。</description></item><item><title>jquery 实现文件异步上传</title><link>//imziv.com/posts/2013/jquery%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0/</link><pubDate>Wed, 07 Aug 2013 18:18:00 +0000</pubDate><guid>//imziv.com/posts/2013/jquery%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0/</guid><description>前言 这里用了 2 个 JS 插件，一个是 Jquery 原生 js，我的版本是 jquery-1.7.2.min.js，另一个是 jquery.form.js。这个 form.js 是关键，不可少哦。另外，
我的服务器端用的是 Play Framework,版本是 2.1。下面是代码部分，贴出的是关键部分：
前端代码 html: &amp;lt;form id=&amp;#34;form1&amp;#34; method=&amp;#34;POST&amp;#34; action=&amp;#34;/image/upload&amp;#34; ENCTYPE=&amp;#34;multipart/form-data&amp;#34;&amp;gt; &amp;lt;input id=&amp;#34;uploadFile&amp;#34; type=&amp;#34;file&amp;#34; name=&amp;#34;myfile&amp;#34; /&amp;gt; &amp;lt;/from&amp;gt; Javascript:
$(&amp;#34;#uploadFile&amp;#34;).change(function(){ var message = &amp;#34;t&amp;#34;; $(&amp;#34;#form1&amp;#34;).ajaxSubmit({ method : &amp;#34;POST&amp;#34;, success : function(data){ //成功　if(data == &amp;#34;ok&amp;#34;){ alert(&amp;#34;上传成功&amp;#34;) }else{　alert(&amp;#34;上传失败&amp;#34;);　} }, error : function(){ alert(&amp;#34;网络错误，请稍后重新尝试！&amp;#34;); } }); }); 服务端代码 public static void upload(File myfile){ String msg = &amp;#34;fail&amp;#34;; try{ //图片写入路径,此处我的位置是项目的根目录 File temp = new File(myfile.</description></item><item><title>Httpclient 实现带参文件上传</title><link>//imziv.com/posts/2013/httpclient-%E5%AE%9E%E7%8E%B0%E5%B8%A6%E5%8F%82%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</link><pubDate>Wed, 07 Aug 2013 17:13:00 +0000</pubDate><guid>//imziv.com/posts/2013/httpclient-%E5%AE%9E%E7%8E%B0%E5%B8%A6%E5%8F%82%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</guid><description>这里直接贴出的是我封装好的 doPostFile 方法,httpclient 的版本是 3.1。
public static String doPostFile(String url, Part[] parts){ String response = null; PostMethod postMethod = new PostMethod(url); try{ //设置请求实体 postMethod.setRequestEntity(new MultipartRequestEntity(parts,postMethod.getParams())); HttpClient client = new HttpClient(); //设置连接超时限度 client.getHttpConnectionManager().getParams().setConnectionTimeout(5000); client.executeMethod(postMethod); if(postMethod.getStatusCode() == HttpStatus.SC_OK){ response = new String(postMethod.getResponseBodyAsString().getBytes(&amp;#34;utf-8&amp;#34;)); } } catch(Exception e){ LOGGER.error(&amp;#34;HttpServiceSender.doPostFile()&amp;#34;,e.getMessage()); } finally { postMethod.releaseConnection(); } return response; } 调用此方法的代码，注意参数的传递方式
public String uploadImage(File file,String id,String name){ String result = null; try{ //文件part,new FilePart添加的是File类型的文件，后面StringPart则为字符串参数 Part[] parts = { new FilePart(&amp;#34;file&amp;#34;, file), new StringPart(&amp;#34;id&amp;#34;, id), new StringPart(&amp;#34;id&amp;#34;,name)}; result = HttpServiceSender.</description></item><item><title>Javascript 的字面量对象以及如何拆解字面量对象</title><link>//imziv.com/posts/2013/javascript%E7%9A%84%E5%AD%97%E9%9D%A2%E9%87%8F%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%8B%86%E8%A7%A3%E5%AD%97%E9%9D%A2%E9%87%8F%E5%AF%B9%E8%B1%A1/</link><pubDate>Thu, 18 Jul 2013 14:28:00 +0000</pubDate><guid>//imziv.com/posts/2013/javascript%E7%9A%84%E5%AD%97%E9%9D%A2%E9%87%8F%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%8B%86%E8%A7%A3%E5%AD%97%E9%9D%A2%E9%87%8F%E5%AF%B9%E8%B1%A1/</guid><description>简单的说，字面量对象提供了一直非常方便构建新对象的方式，它的格式非常简单且容易阅读。是大多数前端程序员在构建对象时比较推崇的一种方式。
格式 var person = { name : &amp;#34;ziv&amp;#34;, sex : &amp;#34;男&amp;#34;, age : &amp;#34;22&amp;#34; } 注意字面量对象最后一个属性是不需要逗号的
访问字面量对象的属性值 person.name //或者采用数组形式传入属性的key取得value person[name] 获取字面量对象的所有 key 值的集合： 获取子字面量对象的所有 key 值，通常可以调用 Object 对象的 getOwnPropertyNames();这个方法，示例如下：
var arr = Object.getOwnPropertyNames(literals); arr 为一个数组对象，取得 name 的值 arr[index];
如何遍历字面量对象 方法一，也是推荐的一种方法，for&amp;hellip;in 循环
var style = &amp;#34;&amp;#34;; for(var property in literals){ console.log(property); //属性值 console.log(literals[property]); //key值 style = style+property+&amp;#34;:&amp;#34;+literals[property]+&amp;#34;;&amp;#34;; } console.log(style); //组合成一个样式串 方法二，比较笨，可以先获取 property 集合值，然后通过遍历 property 获取 key 的值
var propertys = Object.</description></item><item><title>什么是 CouchDB？</title><link>//imziv.com/posts/2013/%E4%BB%80%E4%B9%88%E6%98%AFcouchdb/</link><pubDate>Fri, 05 Jul 2013 11:16:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E4%BB%80%E4%B9%88%E6%98%AFcouchdb/</guid><description>本文对 CouchDB 的解释是来自 Apache CouchDB 的官网的译文，如果有什么问题，请指正。
1.CouchDB 简介
CouchDB 是一种利用 JSON 文件，javascript 作为 MapReduce 查询，以及常规 HTTP 作为 API 的一种数据库系统。
2.CouchDB，一个为 Web 而生的数据库
CouchDB 是一个完全为了 web 而生的数据库，它利用了 JSON 文件来存贮数据。CouchDB 利用你的 web 浏览器，通过 HTTP，查询，结合来处理这些 JSON 文件，并且利用 Javascript 来传输这些数据。CouchDB 在现代浏览器以及移动浏览器上面的支持是非常好的，你甚至可以直接利用 CouchDB 来服务于你的 web 应用。你可以有效的利用 CouchDB 的增量复制特性去分发你的数据或者你的应用。CouchDB 利用了自动冲突检测功能，支持 master-master 的安装。
CouchDB 另外附增了一系列的特性，例如动态的文档转换，和实时的变更通知，CouchDB 的这些特性掀起了一股 web 应用开发的小风波。CouchDB 甚至携有一种简单的使用 web 管理控制的方式。这种特性直接由 CouchDB 提供。我们担心着大量的分布式扩展，CouchDB 是高可用性和分区容忍的，同时也是保持最终一致性的。我们一值都大量的关心着用户的数据。CouchDB 拥有着一个容错引擎，它将把你数据的安全始终放在第一位的。
※更多关于 CouchDB 请访问 Apach CouchDB 官网，此文意在简单介绍 CouchDB，一个利用了现代 web 的技术。http://couchdb.apache.org/</description></item><item><title>JS 模拟 Alert 与 Confirm 对话框</title><link>//imziv.com/posts/2013/js%E6%A8%A1%E6%8B%9Falert%E4%B8%8Econfirm%E5%AF%B9%E8%AF%9D%E6%A1%86/</link><pubDate>Sun, 09 Jun 2013 13:09:00 +0000</pubDate><guid>//imziv.com/posts/2013/js%E6%A8%A1%E6%8B%9Falert%E4%B8%8Econfirm%E5%AF%B9%E8%AF%9D%E6%A1%86/</guid><description>这 2 个例子都是用原生 JS 写的，主要是用 JS 拼接了界面，并未做过多的事件监听。，样式用了 Css3 的一些特性。
调用方式则为：
//Alert Alert.show(&amp;#39;我警告你哦~&amp;#39;); //Confirm Confirm.show(&amp;#39;我是确认对话框&amp;#39;,function(){ doSomething(); }); 组件详情看下面的具体代码：
1.CSS 样式
由于这 2 个组件的样式差不多，所用共用了一样的 css，样式代码如下：
/** * dialog */ .dialog { top:40%; left:40%; width: 250px; min-height: 100px; position:fixed; z-index:9999; text-align: center; padding:10px; border:solid #bcc5c1 1px; background:#FFF; border-radius:3px; -moz-border-radius:3px; -webkit-border-radius:3px; padding:0px; behavior: url(PIE.htc); } .dialog .dialog-header { position:relative; width:100%; height:30px; margin:0px; background:#0CF; background:linear-gradient(top,#d1d4d3 0%,#c4c7c8 100%); background:-webkit-linear-gradient(top,#d1d4d3 0%,#c4c7c8 100%); background:-moz-linear-gradient(top,#d1d4d3 0%,#c4c7c8 100%); border-radius:3px 3px 0px 0px; -moz-border-radius:3px 3px 0px 0px; -webkit-border-radius:3px 3px 0px 0px; behavior: url(PIE.</description></item><item><title>详解 CSS 样式的 position 属性</title><link>//imziv.com/posts/2013/%E8%AF%A6%E8%A7%A3css%E6%A0%B7%E5%BC%8F%E7%9A%84position%E5%B1%9E%E6%80%A7/</link><pubDate>Sun, 09 Jun 2013 13:09:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E8%AF%A6%E8%A7%A3css%E6%A0%B7%E5%BC%8F%E7%9A%84position%E5%B1%9E%E6%80%A7/</guid><description>平时在写 css 样式的时候 position 是我们比较常用的一个属性。有时候会弄不清其几个属性值的真正区别。不过用的时间久了，也就慢慢的明白了。不过其实想用好 position 有时候还是需要些技巧的。写篇博文总结下自己。
position 的作用：用于设置对 html 元素的定位方式　position 属性的值：
值名称 描述 static position 的默认值，设置此属性时，元素按照正常的流式布局往下排列 inherit 继承父元素的 position 值 relative 相对于其他元素的定位 absolute 相对于采用 static 定位的父元素的绝对定位 fixed 相对于浏览器的绝对定位 备注：如果给元素才用了 top,left 等定位属性时，只有 relative,absolute,fixed 才会有效果。
3.应用实例
　这里主要记录是 absolute 和 fixed 属性值。absolute 与 fixed 的好处主要就是它的定位不拘束于其它同级元素，不想其它几种布局自己的定位会被其它元素所影响。所以像做一些动画效果，div 浮动效果的时候，这个两个属性值就尤为适合了。
　结合 z-index 的使用
　z-index 用于控制元素在页面中层级的位置，就跟高楼大厦的楼层一样，z-index 则可用于控制所在的楼层。absolute 与 fixed 都支持 z-index 属性。所以当几个元素采用 absolute 或者 fixed 属性时，为了达到层次显示的效果，z-index 属性就很方便了。</description></item><item><title>Play Framework 常用标签 list,set,如何遍历 list、map 类型数据</title><link>//imziv.com/posts/2013/play-framework%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BElistset%E5%A6%82%E4%BD%95%E9%81%8D%E5%8E%86listmap%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/</link><pubDate>Tue, 29 Jan 2013 10:52:00 +0000</pubDate><guid>//imziv.com/posts/2013/play-framework%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BElistset%E5%A6%82%E4%BD%95%E9%81%8D%E5%8E%86listmap%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/</guid><description>最近一段时间的项目都是在 Play 这个框架上进行开发的，挺强大的，但不足之处也挺多的。今天分享下 play 中强大的标签，遍历 list,map 类型的数据的用法。
遍历单纯的 list 数据,例如：Listpeoples;
#{list peoples,as:&amp;#39;people&amp;#39;} //peoples为list对象，people为实体变量名 ，name则为实体相对应的属性值 ${people.name} #{/list} 遍历list中泛化的map类型，例如：List&amp;lt;Map&amp;lt;People&amp;gt;&amp;gt; peoples; #{list peoples,as:&amp;#39;people&amp;#39;} //peoples为list对象，people为实体变量名 ，name则为实体相对应的属性值 #{list people,as:&amp;#39;map&amp;#39;}${map.value.property}#{/list} //第二个list将people再次转换，map取值则像正常的取值，value为map的value,可是对象类型，property则为对象类型的属性值 #{/list} 遍历单纯的 Map 类型，例如：Map&amp;lt;id,People&amp;gt; people;
//如果知道map的key值，则可以直接通过一下方式获取： ${people.get(key).name} //如果是要遍历一个map,同样适用list标签 #{list people,as:&amp;#39;peo&amp;#39;} ${peo.value.name} //peo为map变量，value为key的值，name为属性值 #{/list} //如果id是一个对象的话，获取其对象的值则可以这样： #{list people,as:&amp;#39;peo&amp;#39;} ${peo.key.name} //peo为map变量，key为对象，key为实体对象，name为属性值 #{/list} 遍历 map 与 list 的组合，例如：Map&amp;lt;id,List&amp;gt; people;
//知道ID的情况下可以这样,通过get方法获取对象 #{list people.get(id),as:&amp;#39;peo&amp;#39;} ${peo.name} #{list} //如果people是多个map对象，则可以 #{list people,as: &amp;#39;map&amp;#39;} #{list map.value,as:&amp;#39;people&amp;#39; set,if,break 标签的使用:
//模拟遍历list时的计数器 #{set count:0}//设置变量count #{list data,as:&amp;#39;li&amp;#39;} &amp;lt;h1&amp;gt;${count}&amp;lt;/h1&amp;gt; #{if count == 2} &amp;lt;% break %&amp;gt; //跳出 #{/if} #{ifelse count == 3} &amp;lt;h1&amp;gt;${count}&amp;lt;/h1} #{/ifelse} #{else} &amp;lt;h1&amp;gt;${count}&amp;lt;/h1&amp;gt; #{/else} #{set count:count+1}//自增 #{/list}</description></item><item><title>我所理解的团队</title><link>//imziv.com/posts/2013/%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84%E5%9B%A2%E9%98%9F/</link><pubDate>Tue, 29 Jan 2013 10:52:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84%E5%9B%A2%E9%98%9F/</guid><description>对于团队这个概念，我小时候的理解就是像国家体育队这样的团体，例如篮球队，或者足球队等。各个运动员在团体中相互发挥自己的优势，从而使整个队伍能发挥出最好的实力。而在我读大学的时候，我选择了软件这个专业，从这个专业中我了解到软件实际工作中，软件开发也是一个非常讲究团队概念的一个工作。只有拥有出色的团队，才能做出优秀的软件产品，然而当我真正踏入这个行业后，对这句话更是深信不疑。
在我大一的时候我遇到了我人生中非常重要的一只团队——班级篮球队。可能大家都有过这么个小小的经历，而我把它作为了我的论资。但的确我想表达的是当时的我们真的很团结，很包容。我们不会过分计较个人的失误，我们不会相互埋怨谁，也不会贪图所谓的功劳，有的只是鼓励，相互帮助。正因为如此，我们这支篮球团队在当时才可取得战无不胜的成绩。从此我爱上了团队这词，我觉得团队的力量是无限大的，团队让我们更有成就感。所以当我把这个观念转移到软件开发团队上的时候，我就有了另一些想法，或许是称得上梦想的想法吧。我想某一天我可以身在这样的一直开发团队中，我们创意无限，热爱技术，相互协作的完成各种有创意，有意义的事情，也许能做些在正面影响人们生活的事情。
在如今这样一个缺乏凝聚力的社会，如果我们身在的工作岗位上处处是勾心斗角，各种埋怨，我不知道这样工作有什么意思，我也想象不出可以完成什么样的杰作。如果身在一个有凝聚力的团队，相互包容，相互为梦想，为共同的目标去奋斗，不管成功是否，我觉得都是有意思，有意义的。
不求在我做程序员的岁月里在多么伟大或者怎样的公司呆过，但求我在这样一支包容，鼓励，团结的团队中为共同目标战斗过！</description></item><item><title>fileloder.js+struts2 实现文件异步上传，无页面刷新效果。</title><link>//imziv.com/posts/2012/fileloder.js+struts2%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%97%A0%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E6%95%88%E6%9E%9C/</link><pubDate>Thu, 01 Nov 2012 11:11:00 +0000</pubDate><guid>//imziv.com/posts/2012/fileloder.js+struts2%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%97%A0%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E6%95%88%E6%9E%9C/</guid><description>一、前言 　之前在写一个 web 的文件上传的功能时，希望在 web 前端对文件的大小，及类型用 js 给验证掉，然后提交到服务器保存入数据库，同时要求达到页面无刷新的异步效果。在网上也看到有很多用 iframe 的方式实现了这样的无刷新效果。不过我在这里给大家介绍的是一款 js 插件，非常强大。在用这款插件前，在网上查询了好久关于 js 对文件类型的验证，当然这样的方法很多，大多数通过正则表达式对文件后缀验证的方式，只不过对文件大小验证这项功能上网上贴出的大多数代码都不靠谱，很多浏览器根本就不支持很多属性操作，比喻说 filesize 这项，而且浏览器的兼容性上考虑起来非常麻烦。不过所幸后来我找到了 fileloader.js 这个插件，前身好像是 ajaxfileupload.js，这款插件可通过 js 提交验证文件的大小及类型、支持拖拽上传。有时间把它的源码研究下也跟大家分享下。fileloader.js 官方地址是：&amp;laquo;http://fineuploader.com/&amp;gt;。当然上面也有很多 DEMO&amp;gt;，大家可以自己去看。
二、工作准备 　添加 strut2 框架；将下载的 fileloader.js 的文件添加到页面；将 fileloader.css 文件添加到页面；添加 jquery 包。
三、HTML 页面代码 &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;文件上传&amp;lt;/title&amp;gt; &amp;lt;link href=&amp;#34;css/fileuploader.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; /&amp;gt; &amp;lt;script language=&amp;#34;javascript&amp;#34; type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;js/jquery-1.8.0.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script language=&amp;#34;javascript&amp;#34; type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;js/fileuploader.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script language=&amp;#34;javascript&amp;#34; type=&amp;#34;text/javascript&amp;#34;&amp;gt; $(document).ready(function() { var thumbnailuploader = new qq.FileUploader({　//new fileuploader object element: $(&amp;#39;#thumbnail-fine-uploader&amp;#39;)[0],　//选定页面div元素，这里用了jquery的选择器 action: &amp;#39;service/uploadImage&amp;#39;,　//提交的action地址 debug: true, multiple: false, allowedExtensions: [&amp;#39;jpeg&amp;#39;, &amp;#39;jpg&amp;#39;, &amp;#39;gif&amp;#39;, &amp;#39;png&amp;#39;],　//允许上传的文件类型 sizeLimit: 500*1024,　//允许上传文件的大小，这里是500KB，500kb = 500*1024KB uploadButtonText:&amp;#39;图片上传&amp;#39;,　//在页面显示上传按钮 inputName: &amp;#39;myFile&amp;#39;,　//在input标签中的name属性设置为myFile messages:{　//设置的提示信息，包括大小类型等的操作 typeError:&amp;#39;只允许jpeg,jpg,gif,png格式的图片文件{file}&amp;#39;, sizeError:&amp;#39;文件大小不能超过{sizeLimit}。{file}&amp;#39;, emptyError:&amp;#39;文件不可为空{file}&amp;#39;, onLeave:&amp;#39;文件正在上传，离开将终止上传操作？&amp;#39; }, showMessage:function(message){　//显示信息 alert(message); }, // 设置返回从服务器反馈的error信息，不过我这里利用这个responseProperty属性反馈msg信息， // 具体的msg内容在服务中设置。 failedUploadTextDisplay: { mode: &amp;#39;custom&amp;#39;, maxChars: 40, responseProperty: &amp;#39;msg&amp;#39;, enableTooltip: true } }); })　&amp;lt;/scripte&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;fieldset&amp;gt; &amp;lt;legend&amp;gt;&amp;lt;span&amp;gt;您可以上传一张不超过500kb的图片&amp;lt;/span&amp;gt;&amp;lt;/legend&amp;gt; &amp;lt;div&amp;gt; &amp;lt;div id=&amp;#34;thumbnail-fine-uploader&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/fieldset&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 三、Action 服务器端代码 提示：我在项目中使用了 S2SH 框架，所以注意下自己写代码时候的区别。</description></item><item><title>Struts2+Hibernate+Spring 在 mysql 更新 Blob 类型的数据</title><link>//imziv.com/posts/2012/struts2+hibernate+spring-%E5%9C%A8mysql%E6%9B%B4%E6%96%B0blob%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE/</link><pubDate>Thu, 06 Sep 2012 11:43:00 +0000</pubDate><guid>//imziv.com/posts/2012/struts2+hibernate+spring-%E5%9C%A8mysql%E6%9B%B4%E6%96%B0blob%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE/</guid><description>看了好多别人写的，不是写的很复杂，就是写的简单的不靠谱。其实很简单 0 0.
以下的代码是更新指定 id 里面的 image 文件的方法。具体代码如下：
public boolean updateImage(Image image) { // 这里我用的是Spring 的HibernateTemplate 模板 Session session = template.getSessionFactory().openSession(); // 当然你可以直接用Hibernate获取session对象 Transaction transaction = session.beginTransaction(); session.saveOrUpdate(image); session.flush(); transaction.commit(); session.close(); return true; } 下面是我的 Image class
public class Image { private int id; private Blob image; public int getId() { return id; } public void setId(int id) { this.id = id; } public Blob getImage() { return image; } public void setImage(Blob image) { this.</description></item><item><title>Strut2 与 Hibernate 的一个 web 分页功能</title><link>//imziv.com/posts/2012/strut2%E4%B8%8Ehibernate%E7%9A%84%E4%B8%80%E4%B8%AAweb%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/</link><pubDate>Thu, 06 Sep 2012 11:32:00 +0000</pubDate><guid>//imziv.com/posts/2012/strut2%E4%B8%8Ehibernate%E7%9A%84%E4%B8%80%E4%B8%AAweb%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/</guid><description>代码没有进行过多的封装，可能看起来有点 action 代码部分，hibernate 在这里只起到了一个查询记录集的作用。
import java.util.ArrayList; import java.util.List; import java.util.Map; import org.apache.struts2.interceptor.SessionAware; import org.hibernate.Criteria; import org.hibernate.Session; import com.HibernateSessionFactory; import com.hibertest1.dto.MyMessage; public class FenYeAction implements SessionAware{ private int start = 0; public int getStart() { return start; } public void setStart(int start) { this.start = start; } public String getMessage(){ List&amp;lt;MyMessage&amp;gt; msgs = new ArrayList&amp;lt;MyMessage&amp;gt;(); Session se = HibernateSessionFactory.getSession(); Criteria crit = se.createCriteria(MyMessage.class); //创建Criteria 对象 msgs = crit.list(); int size = msgs.</description></item><item><title>Struts2 与 Spring 的整合</title><link>//imziv.com/posts/2012/struts2%E4%B8%8Espring%E7%9A%84%E6%95%B4%E5%90%88/</link><pubDate>Thu, 06 Sep 2012 11:32:00 +0000</pubDate><guid>//imziv.com/posts/2012/struts2%E4%B8%8Espring%E7%9A%84%E6%95%B4%E5%90%88/</guid><description>今天倒腾了半天，终于是把这个两个框架整合到一起了。还是要写一下总结，同时给大家一些帮助。
开发环境：myeclipse 9.0(不好用！）tomcat6.0 1.准备工作
需要导入的包：struts2 与 spring 基本的包就不用说了，我用的是 struts2.1 Spring 3.0，
尤其要注意 别少导入的几个是:Spring3.0 Web Libraries ; struts 支持 spring 的插件：struts2-spring-plugin-2.1.8.1.jar 将这个 jar 文件放到 lib 目录下 2.web.xml 的配置
除了 struts2 的核心配置外，我们还要加入 spring 的配置，代码如下：
&amp;lt;!--指明spring配置文件的位置!--&amp;gt; &amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;classpath*:applicationContext*.xml&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt; &amp;lt;!-加载spring的配置文件!--&amp;gt; &amp;lt;listener&amp;gt; &amp;lt;listener-class&amp;gt; org.springframework.web.context.ContextLoaderListener &amp;lt;/listener-class&amp;gt; &amp;lt;/listener&amp;gt; 注：如果你在运行的时候发现有 no found class org.springframework.web.context.LoaderListener 的异常 ，那你要注意你的 Spring3.0 Web 包的导入了
3.application.xml 的配置
&amp;lt;beans&amp;gt; &amp;lt;bean id=&amp;#34;userService&amp;#34; class=&amp;#34;com.test.service.UserServiceImpl&amp;#34;&amp;gt;&amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;userAction&amp;#34; class=&amp;#34;com.test.action.UserAction&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;userService&amp;#34;&amp;gt; &amp;lt;ref bean=&amp;#34;userService&amp;#34;/&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/beans&amp;gt; 4.UserAction 类 这个不用多说，注意的是 userService 属性的 getter 和 setter 方法</description></item><item><title>也许我不是个有天赋的程序员</title><link>//imziv.com/posts/2012/%E4%B9%9F%E8%AE%B8%E6%88%91%E4%B8%8D%E6%98%AF%E4%B8%AA%E6%9C%89%E5%A4%A9%E8%B5%8B%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/</link><pubDate>Thu, 06 Sep 2012 11:32:00 +0000</pubDate><guid>//imziv.com/posts/2012/%E4%B9%9F%E8%AE%B8%E6%88%91%E4%B8%8D%E6%98%AF%E4%B8%AA%E6%9C%89%E5%A4%A9%E8%B5%8B%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/</guid><description>当我刚刚接触到编程这个词汇的时候，经常会听到某某大牛的技术怎么样怎么样，然而当我步入大学后，我决然的选择了我向往已经的专业—软件开发。
我一直认为，只要通过自己努力，什么技术的一样我可以学的很好，就算高中的时候数学不好，英语也不是很好，但是我同样可以学习，来填充自己，就算我不是一个在编程方面有特别天赋的人，或者说我可能并不是很适合编程，其实我自己也不知道，可是我知道我自己喜欢编程这件事情。那些技术的大牛就像武侠中的高手，可以深藏不漏的隐居生活，也可以扬名立万，总之技术在我眼里就像武学一样，各种技术就是各种武学。所以，作为男孩子的我，当然向往这种感觉，喜欢做大侠的感觉。我喜欢把自己的各种想法，用自己喜欢的方式做成 web，去实现它，然后和他人分享我的东西，我喜欢这种感觉，我喜欢弄出不一样的东西，用编程做出有创造性的东西是我喜欢它的一个很重要的原因。
　我不得不承认我在数学方面没有太多的天赋，从小学的时候到大学，我的数学就是一般般，可能也是由于自己当时没有认真学习吧，因为我发现我的逻辑思维还是可以的。我一直觉得，我并不想成为编程界的多么有成就的人物，数学不好我可以学，所以这并不能阻挡我成为一个高手的动力。经过了 2 年多的学习，事实证明，我可以完成很多同学都不能完成的作品，或许是他们不愿意学习去做的原因吧，因为我觉得，如果他们愿意，这些同样难倒不了他们。同样我也不断的在学习着英语，因为英语决定了我将来可以站在多高的舞台上面，理所当然我想变的更好。
　也许我不是一个有天赋的程序员，对于某些算法的东西，对于有天赋的人来说，他们可能一个小时就可以搞定，可是我可能需要 2 个小时，或者更久等等，但是我并没有放弃对问题的思索，对答案的渴求。所以我一直觉得只要努力，可能你并不是一个有天赋的程序员，但至少你也可以成为一位优秀的程序员，stay hungry ,stay foolish.
　马上就要毕业了，就要踏上社会，找到适合的工作，可能找到适合自己的工作很难，这仅仅只是一个开始，希望能保持自己的初衷，在这条道路中不断的探索，前进！</description></item><item><title>将 mysql 中的 Blob 的图片在 jsp 中显示</title><link>//imziv.com/posts/2012/%E5%B0%86mysql%E4%B8%AD%E7%9A%84blob%E7%9A%84%E5%9B%BE%E7%89%87%E5%9C%A8jsp%E4%B8%AD%E6%98%BE%E7%A4%BA/</link><pubDate>Thu, 06 Sep 2012 11:32:00 +0000</pubDate><guid>//imziv.com/posts/2012/%E5%B0%86mysql%E4%B8%AD%E7%9A%84blob%E7%9A%84%E5%9B%BE%E7%89%87%E5%9C%A8jsp%E4%B8%AD%E6%98%BE%E7%A4%BA/</guid><description>本来我的例子是用 Struts2+Hibernate+Spring 三个框架搭建的，但是没有什么大碍，我们只有知道核心部分在怎么实现的就行。
以下是我的 Action 的代码：
//show image private static Image image = new Image(); public Image getImage() { return image; } public void setImage(Image image) { this.image = image; } //imageDao对象我是Spring注入进来的，你可以用new创建 public static void showImage(){ byte[] itemImage = null; HttpServletResponse response = ServletActionContext.getResponse(); response.reset(); response.setContentType(&amp;#34;image/jpeg&amp;#34;); try { image.setId(0); //通过getBytes()方法将获取的Blob类型数据转换 itemImage = imageDao.getImage(image). getBytes(1, (int)imageDao.getImage(image).length()); OutputStream out = response.getOutputStream(); out.write(itemImage); out.flush(); out.close(); } catch (SQLException e) { // TODO Auto-generated catch block e.</description></item><item><title>浅聊这 2 各月的学习</title><link>//imziv.com/posts/2012/%E6%B5%85%E8%81%8A%E8%BF%992%E5%90%84%E6%9C%88%E7%9A%84%E5%AD%A6%E4%B9%A0/</link><pubDate>Thu, 06 Sep 2012 11:32:00 +0000</pubDate><guid>//imziv.com/posts/2012/%E6%B5%85%E8%81%8A%E8%BF%992%E5%90%84%E6%9C%88%E7%9A%84%E5%AD%A6%E4%B9%A0/</guid><description>从今年的 7 月份学校放暑假，到如今马上又要开学，忽然间 2 个月的时间已匆匆过去。这两天也没有做出什么具有效率成果的事情，编写一文章做点总结吧。
当暑假即将来临的那会，我已经在着急忙忙的四处寻找能够实习的机会，希望能找到一个能尽快提升自己技术的公司来充实 2 个月的自己，无论工资多少，但我想一 定得在技术上面有一定的突破，这是我最初所期望的。但是事实总是曲折的，在寻找实习期间，遇到大多数的电话都是培训机构的，不过当时海辉当时打电话应聘我 Android 的实习生，但很不幸的是我当时一时的激动还是说错了几个问题，这也让我最终意识到自己的不足。培训机构始终给我的感觉就是如果自己去培训就 是对自己的不肯定、不自信，而我更觉得搞技术还是要靠自己的摸索和自学。培训只不过是给自己的路找个台阶罢了，而我，不需要。我要靠自己。
接下来的日子让我意识到了一些问题。首先，对于我这样一位才大二刚刚毕业的学生来讲，企业是不希望招到一位实习玩 2 月的未毕业的学生就开溜大吉的，也不希 望要一位没有生产能力的员工。其次，那个时候的我主要是 java，熟练 js,servlet,jsp,+struts2 框架的开发，在学校中做了很多相关 数据库操作的小型项目的练习（例如：宠物系统、考试系统），其次还会 c#,.net 但后者并不是我的拿手项。其实后来做了几次面试试卷，发现自己在 java 实战开发上确实还是有一定的经验，但 java 基础并没有自己想象的那么牢固，很多 知识我都还是理解的不够深、不够透，比喻一些修饰符的应用，一些包、类的作用，区别，等等。所以我决心利用暑假两个月，好好修炼自己，而地点则是在学校寝 室里面。
在放假之前我计划给自己搭建一个博客的，也是自己用 struts2 这么一个框架写的，非常简单的一些功能，例如常见的：分页，相册，和常见的数据增删改查 操作。但并未过多的应用 js+Ajax 技术。大约用了 1 到 2 个星期的时间，我把这个简单的博客给完成了，采用了我一贯喜欢的简洁风格，最后找了一个适用的 Linux 服务器，在上面测试了一段时间，也发现了不少问题，也相继的修复了些 Bug.还是挺有意思的，之后的时间我想把这博客尽量的完善。
其次，我发现 Ajax 技术还有 Spring，Hibernate 这几个技术在实际开发中的应用是非常频繁，而且也是非常重要的。Ajax 主要在 Web 页面 的体验上面做出来很好的表现，Spring 的话则主要对整个系统的性能上有很大的改善，而 Hibernate 则让我们对数据库的开发上变的更的心应手。所 以我觉得接下来的时间把这 3 个技术搞定，然后做一些小项目，同时提升自己的实战经验。 大约花了半个多月的时间，我差不多把 Ajax，Spring,Hibernate 的基本应用给搞清楚了，其中包括 Spring+Hibernate 的整 合，Spring+Struts2 的整合，在网上看了很多人写的博客，最好整合后，自己也写了些自己整合的经验总结。
在学完这 2 个框架的基本开发后，我便拿着这两个框架去完成自己脑袋中的一些小小的创想，在实际中完整自己知识，让我对这 2 个框架有更进一步的学习和认识。 我觉得通过这种拿自己的创想去完成一些东西也成为了自己的一种小小动力。项目期间同时也把之前的纯 javascript 用 Jquery 这个技术引入了页面 的开发，渐渐让自己的页面变得更生动，js 代码更加简洁。总之收获很多。</description></item></channel></rss>