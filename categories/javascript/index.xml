<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on 让美的事情发生</title><link>//imziv.com/categories/javascript/</link><description>Recent content in Javascript on 让美的事情发生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2012-2020 Ziv小威</copyright><lastBuildDate>Mon, 30 Jun 2014 14:48:56 +0000</lastBuildDate><atom:link href="//imziv.com/categories/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>利用 JS 跨域做一个简单的页面访问统计系统</title><link>//imziv.com/posts/2014/%E5%88%A9%E7%94%A8js%E8%B7%A8%E5%9F%9F%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E7%BB%9F%E8%AE%A1%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 30 Jun 2014 14:48:56 +0000</pubDate><guid>//imziv.com/posts/2014/%E5%88%A9%E7%94%A8js%E8%B7%A8%E5%9F%9F%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E7%BB%9F%E8%AE%A1%E7%B3%BB%E7%BB%9F/</guid><description>其实在大部分互联网 web 产品中，我们通常会用百度统计或者谷歌统计分析系统，通过在程序中引入特定的 JS 脚本，然后便可以在这些统计系统中看到自己网站页面具体的访问情况。但是有些时候，由于一些特殊情况，我们需要自己来设计统计系统。由于前段时间公司的业务需求，我也是自己尝试了下，本文提供的是一个基本思路，统计系统也比较简单。
几个基本统计需求： 1.统计 web 每个页面用户访问量 2.统计用户访问者的和 IP 地址信息 3.页面之间的跳转情况 4.访问高峰时间段
服务器结构： 数据库表设计：
以上只是我简单列举的需求，这边简单的就一张统计表，而这张统计表能满足的需求是不仅仅只是上面四个基本的需求的，可以看需求情况再做相应的业务处理。
tb_visit_count_log
ID ip (varchar) IP 地址 title（varchar）标题 cur_page(varchar) 当前页面 from_page(varchar) 源页面 time（datetime）日期时间 app(varchar) 应用 数据采集:
我们提交编写一个 JS 脚本，用来抓取当前页面中我们需要的数据，然后通过跨域请求道我们的 Statistics Server 进行存储，便于之后的统计分析业务的操作。
JS 跨域：
我们都知道在开发 web 应用的时候，我们经常利用去请求其它服务器内的脚本资源，src 是 source 的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置。所以利用这一点，我们可以通过 JS 动态创建标签，并抓取页面相关的信息后，设置该标签 src 地址为远程 Statistics 服务器地址，将其添加到当前文档中，该标签便会自动将请求发送到指定服务器，而服务器便可解析改请求中的参数和请求信息，将其存储入库。 示例代码：
(function() { var title = document.getElementsByTagName(&amp;#34;title&amp;#34;)[0].innerHTML, // 页面标题 url = window.</description></item><item><title>HTML5 实现图片文件异步上传</title><link>//imziv.com/posts/2014/html5%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0/</link><pubDate>Mon, 26 May 2014 15:31:58 +0000</pubDate><guid>//imziv.com/posts/2014/html5%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0/</guid><description>利用 HTML5 的新特点做文件异步上传非常简单方便，本文主要展示 JS 部分，html 结构。下面的代码并未使用第三发库，如果有参照，请注意一些未展现出来的代码片段。我这边的效果预览：
1.文件未选择 2.文件已选择
HTML 代码部分： 思路：下面代码中我利用 css 的 z-index 属性将 input=&amp;quot;file”标签隐藏在了 id=btnSelect 元素下面，通过触发 a 标签的点击后，弹出文件选择框。下面的 masklayer 用于点击确认按钮后的弹出层，避免用户重复点击确认按钮。
&amp;lt;div id=&amp;#34;wp&amp;#34; class=&amp;#34;warpper&amp;#34;&amp;gt; &amp;lt;a id=&amp;#34;btnSelect&amp;#34;&amp;gt;单击选择要上传的照片&amp;lt;/a&amp;gt; &amp;lt;input id=&amp;#34;uploadFile&amp;#34; type=&amp;#34;file&amp;#34; name=&amp;#34;myPhoto&amp;#34; /&amp;gt; &amp;lt;button id=&amp;#34;btnConfirm&amp;#34; class=&amp;#34;btn&amp;#34; &amp;gt;确认上传&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;maskLayer&amp;#34; class=&amp;#34;mask-layer&amp;#34; style=&amp;#34;display:none;&amp;#34;&amp;gt; &amp;lt;p&amp;gt;图片正在上传中...&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; JS 图片文件验证部分：
验证部分为：大小，是否已经选择，文件的类型 三个部分。第一个 createObject 方法为创建本地图片文件的预览路径，依次验证是否为空，文件类型以及文件大小，不满足条件则一律返回
false,满足以上 3 个条件后，在 dom 中生成图片预览，添加 img 元素，然后利用 createObjectURL()方法获取预览路径。
代码：
//获取数据的URL地址 function createObjectURL(blob) { if (window.URL) { return window.URL.createObjectURL(blob); } else if (window.</description></item><item><title>Mysql 编写定时任务事件</title><link>//imziv.com/posts/2014/mysql%E7%BC%96%E5%86%99%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%BA%8B%E4%BB%B6/</link><pubDate>Tue, 13 May 2014 18:26:26 +0000</pubDate><guid>//imziv.com/posts/2014/mysql%E7%BC%96%E5%86%99%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%BA%8B%E4%BB%B6/</guid><description>场景：
　例如：某系统，用户每天只能拥有一次的抽奖机会，抽过后当天就不可再抽，但是过了 24：00 点后用户就重新拥有一次抽奖机会。像这种需要数据库定时对某个字段进行更新操作的任务，完全可以通过数据库本身的事件机制进行操作，而服务器端也不需要用额外的代码进行这种监控定时的操作。
Mysql:
　本文讨论的是 Mysql 数据库，Event Scheduler 事件调度器应该是在 Mysql5.1 引入的，所以使用定时任务调度时，请注意查看你的 Mysql 版本。
创建事件调度的语法：
/*创建事件event_name*/ DELIMITER $$ CREATE event IF NOT EXISTS event_name ON SCHEDULE 任务条件 ON COMPLETION PRESERVE DO SQL操作 DELIMITER ; 实例情景：每半个小时更新统计字段 count 为 0，
/*创建定时定时更新count字段事件*/ DELIMITER $$ CREATE event IF NOT EXISTS update_count ON SCHEDULE EVERY 30 MINUTE /*MYSQL注意时区设置，默认非中国时区*/STARTS TIMESTAMP &amp;#39;2009-12-18 02:58:00&amp;#39; ON COMPLETION PRESERVE DO update tb_count set count=0 $$ DELIMITER ; 如上，创建了一个名叫 update_count 的事件，执行条件则为每 30 分钟执行一次，(EVERY 30 MINUTE)，执行 Sql 为(update tb_count set count=0)， 当然你可能会按天执行，所以你也可以写(EVERY 1 DAY)，</description></item><item><title>匿名函数块级作用域以及在 JQuery 中的应用</title><link>//imziv.com/posts/2014/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%9C%A8jquery%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</link><pubDate>Fri, 21 Feb 2014 10:59:00 +0000</pubDate><guid>//imziv.com/posts/2014/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%9C%A8jquery%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</guid><description>最近经常回在群里面看到有些朋友问如下这样的 js 写法该如何理解的的问题,虽然可能对匿名函数有些理解，但是有时候看到 JQuery 源码或者其他 JS 库中同样的写法时，就有点不理解了，今天再次分享下这方面的知识点。
(function(){ })(JQuery); 对以上写法的理解：
　上面的这种写法通常叫做“块级作用域”，块级作用域的好处就是可以将匿名方法内部的变量进行私有化，当程序运行结束之后便将一些变量自动销毁。第一个（）号表示次函数为一个函数表达式，其中包含了一个匿名函数，后面的一个（）则表示执行这个函数表达式中的匿名方法，而 JQuery 则作为这个匿名函数的一个参数。
匿名函数
　通常声明一个匿名函数的方法是：
//匿名函数 var getPerson = function() { //次方法为函数表达式的声明方法 } getPerson();//调用匿名方法 所以大家又可以把上面的代码看成是这样子的：
function() { }(); 但是，虽然逻辑上是这么一回事，但是你如果按照上面的这种写法，运行的时候会出现语法错误的问题。所以这个时候利用（）这个分组操作符括起这个函数表达式即可，然后括号（）执行此函数。（关于函数声明的方法以及函数表达是的内容可以参考汤姆大叔的这篇文章http://www.cnblogs.com/TomXu/archive/2011/12/29/2290308.html）
JQuery 中的应用：
//此块级作用域中声明了2个参数 (function( window, undefined ) { // Use the correct document accordingly with window argument (sandbox) var location = window.location, document = window.document, docElem = document.documentElement, // Map over jQuery in case of overwrite _jQuery = window.</description></item></channel></rss>