<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 让美的事情发生</title><link>//imziv.com/posts/</link><description>Recent content in Posts on 让美的事情发生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2012-2020 Ziv小威</copyright><lastBuildDate>Thu, 16 Dec 2021 14:00:00 +0000</lastBuildDate><atom:link href="//imziv.com/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>我们开源了一个轻量的 Web IDE UI 框架 - Molecule</title><link>//imziv.com/posts/2021/%E6%88%91%E4%BB%AC%E5%BC%80%E6%BA%90%E4%BA%86%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E7%9A%84-web-ide-ui-%E6%A1%86%E6%9E%B6/</link><pubDate>Thu, 16 Dec 2021 14:00:00 +0000</pubDate><guid>//imziv.com/posts/2021/%E6%88%91%E4%BB%AC%E5%BC%80%E6%BA%90%E4%BA%86%E4%B8%80%E4%B8%AA%E8%BD%BB%E9%87%8F%E7%9A%84-web-ide-ui-%E6%A1%86%E6%9E%B6/</guid><description>Molecule 一个轻量的 Web IDE UI 框架
简介 Molecule 是一个受 VS Code 启发，使用 React.js 构建的 Web IDE UI 框架。通过一种类似 VS Code 扩展机制（Extension），可快速、轻松搭建一个高度抽象的 Web IDE UI 系统。同时基于 Monaco Editor，内置集成了 QuickAccess 和 Keybinding 等功能，并提供了简单的 API 以供使用。
得益于扩展机制和 React 组件化技术，Molecule 可以针对例如 Workbench UI、 ColorTheme 、自定义热键、快捷访问等功能进行自定义扩展。另外，开发者可将业务代码和 IDE UI 架构解耦，在保持业务高速迭代的同时，产品交互体验依然保持良好的可持续进化能力。
动机 数栈（DTInsight） 中例如离线、实时任务开发，算法开发等产品，它们的直接使用人员大部分都是开发者，需要在 Web 上完成代码编写，调试等工作。所以，我们也希望给开发人员创造一个良好的在线 IDE 开发体验。
早期的数栈开发平台
上图中的 RD-OS 是我们数栈开发平台早期的版本，当时产品功能本身比较简单。前端在初期的实现上，基于 React + Ant Design + Codemirror 来搭建的整个 IDE UI 界面。另外，由于当时我们多个产品都有这个 Workbench 的场景，我们还抽象了一个简单且单纯 的 IDE Workbench UI 的 React 组件，以供其他产品复用。</description></item><item><title>十月的青海之旅</title><link>//imziv.com/posts/2020/10%E6%9C%88%E9%9D%92%E6%B5%B7%E4%B9%8B%E6%97%85/</link><pubDate>Sat, 21 Nov 2020 04:00:25 +0000</pubDate><guid>//imziv.com/posts/2020/10%E6%9C%88%E9%9D%92%E6%B5%B7%E4%B9%8B%E6%97%85/</guid><description>西宁市 从曹家堡机场出来后，我顺利的联系上了旅行社安排的接机师傅。10 月的西宁还是比我想象的还是要冷些，一件 T 恤和衬衫还是有些单薄，冻得我一出机场便直奔 太阳底下，去等接我的司机师傅。曹家堡机场到西宁市很近，开车也就 30 来分钟。整个西宁市依一条狭窄的河谷而建，而两边大都是植被稀少的山坡。
从酒店睡了一觉醒来，便准备去市区觅食。掏出手机，我在某众上搜出了某热门推荐的餐馆，打了辆出租车便直奔目的地了。载我的师傅是个有意思的人，说他整个 家族都跟开车相关的产业离不开关系。最先是他舅舅来的西宁开车，然后带他爸爸，再到他现在他自己(中国这种靠亲戚朋友传带，从农村 走出来的情况还是非常普遍的)。旅游旺季的时候就去给游客开车，淡季就市区开开出租车。
青海省接壤甘肃，新疆，西藏，很多著名的西北旅游线路（敦煌北环线，可可西里）西宁是很重要的一个起始地点。虽然西宁市是青海省的省会城市，但产业还是很单薄的，主要就是旅游业了，所以街道大都很整洁和干净。不过觅食让我过于意外的是，这么小众和偏僻的一个店，竟然到晚上 8，9 点还在排队，都是从大众寻过来的（互联网很神奇啊）。
美食城，都是肉~
青海湖 10 月份的青海湖显的就比较荒凉了，湖边的草地已经都是一片枯黄，索性的是还有零星的几片油菜地。
需要提一嘴的是，青海湖边吃饭的地方还是很容易被坑的，饭馆里的食物大多不够新鲜，但是又很贵。
吃过午饭，我们驱车来到离青海湖不远处的一个山谷
在这里, 还是很容易感受到时间留下的痕迹的
都兰县 热水古墓群，离都兰县 30 多公里，属于唐朝时期的吐蕃墓葬群，有 200 多座。墓群周边装满了探头，旁边就是科考站。曲折的是一大早上，我们走了很多冤枉路，在寻得这个地方。很难想象古人，竟找了这么个偏远的地方。
九层妖楼，地人对这“血渭一号大墓”的俗称，据说这是九层妖塔的原型。
途径一个当地小的藏传寺院，阳光、草地、僧侣、小孩和狗
藏民家的小姑娘 可可西里 去可可西里，需要先途径格尔木市，格尔木作为青海第二大的城市，比我想象中要小的多。整个城市就一条稍繁华的街道， 晚上 8 点多，街上就已经没什么人了，或许因为是秋天比较冷的原因。
这里比较常见的碗茶，五颜六色，各种果干的搭配，去油解腻 由于近几年可可西里景区每年出事的人很多，所以当地政府管的比较严格，个人不得进入可可西里景区，其他旅行社团队必须提前到当地公安报备。所以在可可西里入口检查站，必须进行严格的个人信息登记，连往返车辆时间都是有要求的。
可可西里垭口，排队拍照纪念的游客 可可西里深处，远处正在搞基建的工程队。不得不佩服我们国家搞基建的，来可可西里途中的青藏高速， 到这里无人区修管道的工程队。还有就是我们熟知的青藏铁路，穿过整个昆仑山脉，可可西里无人区。
茫崖市 之前从未听过的一个地方。茫崖市在青海省的最西面，省边界线边上，临近新疆。去茫崖整个途中都是无人荒漠，盐碱地，非常荒凉。但为什么会来这里呢，因为这里有丰富的石油、盐田。
途中休息，这几位在马路中间拍照玩的很嗨
大片的盐田，翡翠湖
昔日的石油城
驱车 2 个多小时盐碱地追寻的恶魔之眼
恶魔之眼倒是都让大家失望，不过回程途中夕阳下的马车，大家倒是玩的很 High
荒芜之境 从茫崖往大柴旦方向走的 G315 国道，一路的无人区，盐碱地，沙漠，雅丹地貌
火星一号公路。据说是个北京到此一游，后来开发的旅游项目，也是够勇敢的
火星一号公路周边，我想火星也不过如此吧。
雅丹地貌
天空之镜 - 茶卡 名为天空之镜，果然名不虚传。如今的茶卡是个商业化比较成熟的景区，但是仍然是很值得花门票来游玩的地方，尤其是不要忘记购买 能体验湖边小火车的乘车票。
整个湖面就是一面天镜
远处湖边的小火车，和比比皆是的拍照旅客
最后，附上个茶卡随时拍摄的视频</description></item><item><title>《组织能力建设的杨三角》- 读后感</title><link>//imziv.com/posts/2020/%E6%9D%A8%E4%B8%89%E8%A7%92/</link><pubDate>Sat, 31 Oct 2020 22:17:51 +0000</pubDate><guid>//imziv.com/posts/2020/%E6%9D%A8%E4%B8%89%E8%A7%92/</guid><description>《组织能力建设的杨三角》- 读后感 廉价、低端、山寨的标签过去一直是中国企业以及产品很难抹去的标签。另外近几年东南亚、印度等国家逐步开始在很多领域侵蚀 中国制造业份的份额，不少外企处于成本考虑，开始迁移工厂。2020 美国对中国华为、字节等科技企业实行打压，更是让中国企业 清醒认识到我们与发达国家企业的差距。
种种背景下，不断在提醒我们的是，中国过去大多数作坊式、粗放式、不科学的管理方法，已无法满足中国企业未来在产业、品牌、全球化竞争等各方面的需求。
作者经过多年的分析，把企业成功的管理方法归纳为了如下公式：
企业的成功 = 战略 × 组织能力
世界上唯一不变的就是“变化” 看到这里突然想起一句话：“选择比努力重要”。当然这句话只是是单方面强调”选择“的重要性。书中“企业成功” 的公式作者的想表达是，如果想要到达成功，选择和组织能力 2 者是缺一不可的。其实严格来讲公式应该是：企业的成功 = 正确的战略 × 组织能力。然而“正确的战略”最大的挑战，就是来自周围一切的变化莫测（就如 2020 年的这场“疫情”）， 所以企业这周跟随环境变化进行调整，适应的能力是我们能否做出“正确的战略”的关键。
第二关键：组织能力 有了 “正确的战略” 作为前提前提，那么“组织能力”则是企业成功第二关键因素了。其实我这里私以为“组织能力”又可称之为“团队能力”更容易理解一些。作者把组织能力划为 3 个部分组成：
1.员工能力 这里泛指员工的招聘、培养、激励、淘汰、可持续的员工能力打造机制等等方面的内容。
2.员工思维 作者明确指出 —— 切勿形式主义：
员工思维模式指的是员工每天工作时心中所真正关心的、追求的、重视的事情，而不是放在公司网站、贴在公司墙上或者印在员工手册上的标语口号！ 3.员工治理
员工治理的包括的 3 个主要方面：权责、信息和流程。 而真正有效的种治理方法，适合自己的治理方法，比简单的照搬、拿来主义更重要。
另外，组织能力的建设的一大误区就是，这都是行政部门应该负责的工作。其实作者在书中已经明确指出：
组织能力的打造是一个长期的过程，需要多年的努力，更需要整个企业从上到下的认同和努力，特别是需要企业“三群人”的共同承诺和积极投入，这样才能高效而成功地建立组织能力
所谓的“三群人”，即是：CEO， 人力资源团队，直线主管。其实私以为，员工也是参与组织能力打造的重要组成部分。
最后 需要提醒我们自己的是，企业的成功不是目的。找到真正能为社会、他人创造价值的事情，寻找、建设一支认同这些有意义事情的人，持续坚持努力，我想最终结果一定不会太差。</description></item><item><title>《海底捞你学不会》之”流程“和”制度“的弊端</title><link>//imziv.com/posts/2020/%E6%B5%B7%E5%BA%95%E6%8D%9E%E4%BD%A0%E5%AD%A6%E4%B8%8D%E4%BC%9A%E4%B9%8B%E6%B5%81%E7%A8%8B%E5%92%8C%E5%88%B6%E5%BA%A6%E7%9A%84%E5%BC%8A%E7%AB%AF/</link><pubDate>Tue, 14 Jan 2020 10:28:51 +0000</pubDate><guid>//imziv.com/posts/2020/%E6%B5%B7%E5%BA%95%E6%8D%9E%E4%BD%A0%E5%AD%A6%E4%B8%8D%E4%BC%9A%E4%B9%8B%E6%B5%81%E7%A8%8B%E5%92%8C%E5%88%B6%E5%BA%A6%E7%9A%84%E5%BC%8A%E7%AB%AF/</guid><description>在杭州吃过《海底捞》的朋友应该很清楚，排个号是有多辛苦。《海底捞你学不会》是一本揭秘《海底捞》是如何 从中国一个四线城市，杀到北上广，乃至成为目前中国餐饮的一张名片的书籍。印象中做餐饮的大部分都是亏本的，管理是十分复杂的，看到这本书里面介绍其流程和指定的内容时，比较好奇。
海底捞师徒制 海底捞有自己的师徒制（有点类似我们的师兄制）。师徒制的优点在于容易发现同类，容易彼此理解和欣赏，并且传递简单。但是缺点就是容易”走形“，且可复制性极差。像海底捞在全国这种连锁规模的情况下，极易造成店与店之间的服务质量差距。这里提到主要依靠流程和制度来做管理的“麦当劳”做对比，而其在全球有 3 万多家连锁店。
流程“和”制度“的弊端 ”不在过程中生存，就在过程中死亡“。真正有效的流程和制度绝对不可能事先设计好，而是不断实践与修正的结果。 海底捞请世界一流的咨询公司帮忙开发和研究火锅餐厅的管理流程和制度，但是作为世界独有的存在，目前没有任何一家公司能解决海底捞需要的流程和制度。
流程和制度真正的难点在于，将人、流程和制度、与所要解决问题做到精确的匹配。没有有效的监管，其很容易流于“形式主义”，而过于的监管，却又容易把人变成了机器。这对于强调”温度“、”服务“的海底捞无疑是很难的。
真实的世界是灰色的 真实的世界是灰色的，没有任何一种流程和制度，是能完全覆盖到所有需要解决的问题上的。海底捞为了让客户满意，会临时去买一些礼物送给他们的顾客，因为满意度是他们很重要的一个考核指标。还有些员工容易服务过度，反而给顾客造成了很多困扰。像这种流程和制度很难把控的细节，在餐饮服务行业有很多，其实是非常考验员工的综合能力的。</description></item><item><title>「 摩登情爱. S01 」</title><link>//imziv.com/posts/2019/-%E6%91%A9%E7%99%BB%E6%83%85%E7%88%B1.-s01-/</link><pubDate>Tue, 03 Dec 2019 23:19:32 +0000</pubDate><guid>//imziv.com/posts/2019/-%E6%91%A9%E7%99%BB%E6%83%85%E7%88%B1.-s01-/</guid><description>米切尔是一位生活在纽约的独立女性，博士毕业后便搬到现在的这座酒店公寓独自生活。古滋敏是一位在劳改营长大的阿尔巴尼亚人，父母是政治家，如今在这座酒店公寓做门卫，按他自己的话，他喜欢这份工作。
米切尔经常把一些约会的对象带回公寓，他们大都长相英俊，身材匀称。不过古滋敏都不喜欢米切尔的那些约会对象，而且经常告诉米切尔，这些人并不适合她。后来，似乎能否通过古滋敏的测试，已经成为了米切尔相处对象重要的标尺。
古滋敏对米切尔每次约会对象最后的结局的预判出奇的准确，这让米切尔开始在意古滋敏对她约会对象的看法。
米切尔还是不小心，怀上了一位英俊却不愿承担责任的英国人的孩子。得知消息当晚不知所措，在这种万般无助的情况下，他找到古滋敏，古滋敏鼓励她，「如果可以，那就生下孩子」。
就这样，米切尔最终在古滋敏的帮助下，生下了一位可爱的小女孩。而由于工作的原因，米切尔不得不把女儿经常拜托给每天值班的古滋敏照看，古滋敏也十分耐心接受，并且十分享受。古滋敏实则是一位很有学识的人，经常带小姑娘了解大自然，博物馆方面的知识。
米切尔突然得到了一份自己理想工作的邀请，不过远在洛杉矶。不过面对未知的生活，孩子的问题，和现有生活的不舍，米切尔十分犹豫，哦，不舍的还有古滋敏。在征询古滋敏一番后，古滋敏豪不犹豫的鼓励她，应该去施展自己的才华。
5 年后，米切尔带着女儿和新的男友，来看望古滋敏，这一次终于得到了他的认可。古滋敏告诉米切尔，「其实每次看对方是否适合你，并不是从约会对象上得出的，而且从米切尔自己的眼睛中得到的答案」。
而故事的最后，古滋敏带着米切尔和女孩，三人手拉手一起逛自然博物馆，看到这个镜头的时候，不知为何一种幸福感涌上心头。</description></item><item><title>游日本</title><link>//imziv.com/posts/2019/%E6%B8%B8%E6%97%A5%E6%9C%AC/</link><pubDate>Sat, 28 Sep 2019 18:52:25 +0000</pubDate><guid>//imziv.com/posts/2019/%E6%B8%B8%E6%97%A5%E6%9C%AC/</guid><description>飞机抵达成田机场时，当地时间已经是差不多晚上 6 点了，东京时间比较国内稍早 1 个小时左右。下了飞机，我便给手机换上了在萧山机场，花了 60 块购买的流量卡。一切还算顺利，不过还是因为没经验，在填写入境卡的时候稍稍给耽误了。
我们的地接导游是个在日的 80 后上海人，本人留有一头的长发，带着一款黑色的铁发箍（实话，挺像小时候我见我奶奶用过的那种），右手夹个皮包，脚穿着双皮鞋，这哪是导游，根本就是个老板。他说，像他这样的中国留学生很多。
按照规划的行程，抵达当晚，我们住进了机场旁边的一家酒店，而第二天我们将会直接乘大巴车去镰仓和富士山。
镰仓和富士山都位于东京的西面。从千叶县大巴去镰仓，大概花了 2 个小时左右。镰仓高校前站，来这里打卡的大多数中国人，基本都是冲着《灌篮高手》来的。不过说回来，镰仓那地方看海也不错，可以看到不少人在海边冲浪。
从镰仓继续向东， 大约一个小时就到富士山了。这个季节的富士山顶周边都是光秃秃的黑土，而不是印象里面的雪山，而从山顶再往下则是茂密的原始森林。大巴车沿着上盘山公路，盘山路两旁尽是原始森林。随着海拔的缓缓上升，车外就能看到云海了，蓝天白云，通透的空气、山脚零落的村庄，给人很安宁的感觉，让人竟忘了这是座海拔 3775 米的活火山。我们的大巴车一直到开到海拔 2000 米左右的富士山观景台，这里是富士山观光集散地，有来自世界各地的人。
往后的两日，则主要就是被在东京市区活动，参观神社，逛六本木，银座购物。话说好像 Facebook, Google 都在六本木办公。 说起购物，我深觉国人的购买力之强。也不知道是不是带去的场所的原因， 感觉买东西的大都是国人，什么化妆品，药妆店，中古店（第一次听说，就是二手奢侈品商店）。
这次出行最意外的事情就是撞上台风天气了。原本计划 9 月 10 日早晨，大巴车从东京市区出发去成田机场的行程，由于台风天气早晨千叶县不少高速路段收到一定的破坏，造成去机场的整个高速路段严重堵塞，而且机场已经造成严重的旅客滞留情况，很多人在机场走不了也出不来。导游不得不半夜 2，3 点就把我们从东京市区拉往机场了，担心堵车而造成误机。所幸的是，凌晨 12 点以后，交通得已修复，我们抵达机场也就正常的 1 个小时左右。
第二天一大早，就开始排起了常常的检票长队，人山人海不夸张，好几个队伍都差点干起来了。我们的航班确实延机了，不过所幸并未太久。 北京时间 2 点左右，我们顺利抵达了萧山机场，终于回来了~</description></item><item><title>清醒思考的艺术</title><link>//imziv.com/posts/2019/%E6%B8%85%E9%86%92%E6%80%9D%E8%80%83%E7%9A%84%E8%89%BA%E6%9C%AF/</link><pubDate>Mon, 02 Sep 2019 10:19:55 +0000</pubDate><guid>//imziv.com/posts/2019/%E6%B8%85%E9%86%92%E6%80%9D%E8%80%83%E7%9A%84%E8%89%BA%E6%9C%AF/</guid><description>书中提到的很多观点是生活我们常常陷入的问题，而作者给出了很多不同的思考和见地，比较有启迪意义。
完美的预设是不存在的
作者认为，“计划” 在实际情况中几乎是永远也不会实现的, 而是我们需要在过程中不断反思，调整，从而来拿到结果的。正如我们常常会苦恼于这样一种情况：我们为一个目标制定了“完美”计划，然而实现过程和结果往往是在计划之外。作者用驾驶飞机，婚姻，国家宪法来做了例子说明了后期调整的重要性。所以作者主张：
应降低自己对计划的预期， 行动中积极调整 过度的真诚是不可取的。我们还是会期待一定程度的体面、礼节和自控，即一种属于文明社会的伪装
与我们很多地方看到“真诚待人”比较相左的观点，作者认为我们需要面对不同的情况做合适伪装，并且鼓励我们发展“第二重人格”，以此来应对复杂的人际关系，社会角色等。这里我姑且理解这为“情商”的一种体现，作者并未写太多的篇章，但我觉得这个部分就足以写本书的了。
如果书中的内容绝大多数都已被遗忘，那我们读这本书还有什么意义呢？
这是一个很有意思的问题，偶尔自己也会回想曾经阅读过的书籍，几乎都想不起什么内容。 作者说他图书馆里面放有 3000 多本书，其中阅读过的只有 1/3，所以作者在反思中发出了上文中提到的关于“阅读意义“的疑问。最终作者得出”选择过于宽泛，而阅读不够彻底“这种阅读方式是错误的的结论。当然结论仍是可以讨论的。 所以对于这个问题，作者给出了几点建议：
如果一本书没能产生深刻印象，就不用再继续浪费时间了 侦探类这种不会反复阅读的书不值得出现在我们的书票中 经历有限，所以我们应该减量，挑一些值得反复阅读的书籍 如果你年轻，应该尽可能吞下尽可能的书 上面的观点是作者不同人生阶段的建议，不尽然适合所有人。我们每个人对阅读都有不同的诉求，如果我只是为了从阅读中获取一些简单的快乐，看看”小人书“也未尝不可。
不要痴迷于“伟人理论”
作者认为“个体改变世界”是 21 世纪影响力最大的意识形态之一，而这只是一个巨大的幻想。每个历史事件，“伟人”都是时代产物，大都包含了“偶然因素”。其实作者想说的是，大家不必太看轻自己，也不必太过仰望那些“伟人”。</description></item><item><title>了解和实践 Typescript 的泛型 （Generics）</title><link>//imziv.com/posts/2019/%E4%BA%86%E8%A7%A3%E5%92%8C%E5%AE%9E%E8%B7%B5-typescript-%E7%9A%84%E6%B3%9B%E5%9E%8B-generics/</link><pubDate>Thu, 25 Jul 2019 21:51:40 +0000</pubDate><guid>//imziv.com/posts/2019/%E4%BA%86%E8%A7%A3%E5%92%8C%E5%AE%9E%E8%B7%B5-typescript-%E7%9A%84%E6%B3%9B%E5%9E%8B-generics/</guid><description>考虑如下场景 我们现在自己封装了一个 Table 组件，该组件提供 data 和 columns 两个属性，我们希望用户在使用组件时，编辑器能针对 data与column的值类型进行约束，而不是任意的一个值, 如下图所示：
public render() { const users = [{ name: &amp;#39;ziv&amp;#39;, birth: &amp;#34;1991&amp;#34; }]; const columns = [ { Key: &amp;#34;id&amp;#34;, name: &amp;#34;ID&amp;#34;, dataIndex: &amp;#34;id&amp;#34; }, { key: &amp;#34;name&amp;#34;, name: &amp;#34;姓名&amp;#34;, dataIndex: &amp;#34;name&amp;#34; }, ]; return ( &amp;lt;div&amp;gt; &amp;lt;Table data={users} columns={columns}/&amp;gt; &amp;lt;/div&amp;gt; ); } 正如上图所示，我columns中取数据的dataIndex字段，在传入的 users列表中是不存在的，所以结果是数据无法正常获取。 那么有没有办法在代码执行前就检测出这个问题呢？让我们看看用泛型如何解决这个问题。
泛型的基本语法 泛型（Generic）提供了一种在消费API对象时按需添加约束类型的能力，从而不必固定在某个单一的类型约束上，而是按使用的实际情况时具体约束。
基本用法如下：
函数（function) 语法
function A&amp;lt;T&amp;gt; {} function B&amp;lt;T,K&amp;gt; {} 使用
function getProperty&amp;lt;T, K extends keyof T&amp;gt;(obj: T, key: K) { return obj[key]; } let x = { a: 1, b: 2, c: 3, d: 4 }; getProperty(x, &amp;#34;a&amp;#34;); // okay getProperty(x, &amp;#34;m&amp;#34;); // error: Argument of type &amp;#39;m&amp;#39; isn&amp;#39;t assignable to &amp;#39;a&amp;#39; | &amp;#39;b&amp;#39; | &amp;#39;c&amp;#39; | &amp;#39;d&amp;#39;.</description></item><item><title>测试不该是软件构建质量唯一的防线</title><link>//imziv.com/posts/2019/%E6%B5%8B%E8%AF%95%E4%B8%8D%E8%AF%A5%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%84%E5%BB%BA%E8%B4%A8%E9%87%8F%E5%94%AF%E4%B8%80%E7%9A%84%E9%98%B2%E7%BA%BF/</link><pubDate>Thu, 04 Jul 2019 14:10:51 +0000</pubDate><guid>//imziv.com/posts/2019/%E6%B5%8B%E8%AF%95%E4%B8%8D%E8%AF%A5%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%84%E5%BB%BA%E8%B4%A8%E9%87%8F%E5%94%AF%E4%B8%80%E7%9A%84%E9%98%B2%E7%BA%BF/</guid><description>在实际项目开发过程中，我们经常会看到一个现象，很多团队把产品质量全押宝在测试环节上，这显然是不够科学的。测试只是发现问题的一种手段，而本身不能解决问题。而产品质量问题是个体系问题，体系问题则需要系统的解决方法，所以押宝在任一环节都不足以达到我们所期望的结果。开发团队陷入这种思维的原因，往往还是构建环节上的问题，而对”软件工程“的理解决定了我们所采用的构建方法。采用什么样的态度与方法，很大程度上是取决于我们如何看待”软件开发“这件事情。
用生活中的意象来描述软件开发中的问题是一种非常方便的帮助我们理解软件开发中的概念和问题的方法，例如我们用 Bug 这个单词表示软件缺陷。不同的意象决定了我们对待其构建的方法，而不同的构建方法决定了我们项目的成败和质量。如果你把软件开发理解为”写作“，那么可能就偏随性一些，想到哪写到哪，如果你理解为软件开发为盖间房子或者一大栋房子，那么我们采取的方法自然就是千差万别。很显然，实际的项目复杂度和工程量是千差万别的，要求也可能不尽相同，不同的情况我们需要采取相对应的开发方法，更有利于我们按时，按质量的完成开发目标。
不同构建环节的缺陷检测率 我都熟悉软件开发的一些主要环节（详细设计、编码、调试、集成、开发者测试), 而其中开发者测试又分单元测试，集成测试等部分。可想而知，软件开发包含如此多的活动，而且各个环节都需要不同的人员进行相互配合，遵循木桶原理，任何环节的短缺都不足以早出质量过硬的产品。下图展示了各个开发环节对软件缺陷检测率的影响情况：
上图的数据还是比较有意思的。如果不算上大规模 Beta 测试，在所有检错措施中，最低检出率最高的是正式代码检查阶段，为 45%，典型检出率最高则为建立模型或者原型 65%，最好检出率则仍然是建立模型或者原型这一措施。从整个检错措施中我们可以看出，无论是哪一项措施都无法到达足够的检出率，所以现实开发中，往往是会结合多个措施作用到项目上，才能达到比较好的结果。
现实中的软件开发工作比较复杂，受限于例如人员、时间、团队等资源因素的限制，所以并不是所有的构建方法都会使用这种构建组合，而是适当的根据自己的情况做一些调整。下图是极限编程（Extreme Programming）缺陷检出率的一份评估表：
极限编程是一种轻量级的软件工程方法，其提倡对需求能做快速响应。所以在整个构建活动上也是有所缩减。目前很多小型团队都是采用这种软件工程的方法论。
形成合适团队的构建方法 很显然没有完美的构建方法，受限于业务模式，团队，时间等各种因素的制约，我们很难按照一些软件工程的方法论进行全面实践，需要适当的对一些环节进行裁剪和调整。《代码大全》在书中推荐了一种基本的构建质量的组合：
对所有的需求，架构，系统关键部分的设计进行正式检查 建模或者创建原型 (原型评审，设计检查) 代码阅读或者检查 执行测试（单元测试，集成测试，回归测试） 即使缩短到这么几个构建环节，很多团队都做不好，或者是做不了，例如在实际工作中，我发现很多团队原型评审上很粗糙，没有代码审查，测试只有基本的功能测试，对于一个想挣钱的商业项目来讲，这显然是不够可靠的。
至此，在给产品做质量体系建立工作的时候，越早设立质量目标，且越早做规划越好。测试显然是非常重要的一环，不过想要达到更高的质量目标，我们应该尽量使用组合拳。</description></item><item><title>再看《千与千寻》</title><link>//imziv.com/posts/2019/%E5%86%8D%E7%9C%8B%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/</link><pubDate>Sun, 30 Jun 2019 23:19:32 +0000</pubDate><guid>//imziv.com/posts/2019/%E5%86%8D%E7%9C%8B%E5%8D%83%E4%B8%8E%E5%8D%83%E5%AF%BB/</guid><description>最早看《千与千寻》这部动画片应该是在大学的时候, 可过了好些年，一时真是想不起电影的剧情了，印象比较深的有的只是无脸男，海上列车这些经典形象。
老爷子电影的角色大多都是善良的，对社会传达的更多的也是积极的一面。误入陌生世界的千寻，幸好他先遇见了白龙，而后的锅炉爷爷、小玲对千寻也是照顾有加。即使像钱婆婆这种眼里只知道钱，把不工作的人都变成了畜牲，而工作的视作挣钱机器的冷血之人最终还是答应给了千寻一份工作。而刚刚开始学会工作的千寻，迎来泡浴的的却是所有人都避之无不及的腐烂神。没有退缩的千寻却不知他帮助的并不是什么腐烂神, 而是被太多垃圾折磨的河神。幸运的是帮助河神解脱后，从它那里获得了一枚至关重要的丹药 —— 帮助一家人最终回到人类社会。
《千与千寻》是 1998 年宫崎骏拍完《幽灵公主》开始企划的作品，本身是想传达年轻少女面对这样一个复杂的社会，只要努力，勇敢面对，一样可以应付这样的生活。比较有意思的是，宫崎骏几乎所有的作品的主角都是少女形象。像《魔女宅急便》独自修行的小魔女琪琪，《侧耳倾听》喜欢看书的女孩月岛滴滴，《天空之城》的公主希达等等&amp;hellip; 她们大都塑造的是善良，勇敢，努力，坚强的少女形象。 仔细想来，宫崎骏老爷子是个少女控呀~</description></item><item><title>让大象飞？</title><link>//imziv.com/posts/2019/%E8%AE%A9%E5%A4%A7%E8%B1%A1%E9%A3%9E/</link><pubDate>Sun, 02 Jun 2019 22:47:29 +0000</pubDate><guid>//imziv.com/posts/2019/%E8%AE%A9%E5%A4%A7%E8%B1%A1%E9%A3%9E/</guid><description>如果你刚好有好的 idea，有创业打算的话，《让大象飞》可能是一本能给你一些帮助的书。
作者在书中对拥有了好的 idea 的情况下，如何才能让idea转化为真实的产品，以及如何迭代完善，如何保证最后得到市场的认可，有了比较结构性的阐述。创业也讲究天时地利人和, 产品开发其实也是唯快不破。作者在书中给出了很多可能违法我们直觉的一些观点，例如：
初创团队并不是人越多越好； 创业初期过多的资金可能是毒药； 产品早期不要追求完美； 技术并没我们想的那么重要。 很显然这些内容是有前提上下文的，而直接套用这些观点则是件很危险的事情。
书往往是作者在十分理性状态思考，并写下的总结，有参考意义，可毕竟现实情况总是各种因素交织交措。所有成功的公司都很类似，但每家失败的公司都有其各自的原因？</description></item><item><title>数栈前端项目的 Code Review 实践小结</title><link>//imziv.com/posts/2019/%E6%95%B0%E6%A0%88%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84-code-review-%E5%AE%9E%E8%B7%B5%E5%B0%8F%E7%BB%93/</link><pubDate>Fri, 12 Apr 2019 08:48:17 +0000</pubDate><guid>//imziv.com/posts/2019/%E6%95%B0%E6%A0%88%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84-code-review-%E5%AE%9E%E8%B7%B5%E5%B0%8F%E7%BB%93/</guid><description>背景 近两年我都在同一个项目上共献代码，算起来这算是我参与过最大的前端项目了。项目最开始只有我一个人做编码工作，后来陆陆续续一共有 8 个同学给项目贡献过代码，到现在稳定在 4 个人都在同时给项目提交代码。参与的同学有经验丰富一些的，也有工作一两年的小伙伴，还有实习的同学。
两年多的时间里，我一直在间接的接手或者被接手彼此同伴的代码。 由于早期同时参与的时候最多也就 2 个同学，所以项目一开始并没有 CodeReview，大概过了一年多后，项目代码量已经达到了一定规模，业务逻辑也有了较大的积累了，此时已经有 5，6 个同学参与过这个项目了。这期间逐渐暴露出来一些问题摆在眼前：
已完成的功能模块经常容易改出新问题 重复的 API, 模块封装 奇怪的框架使用方法 代码质量参差不齐 闷头开发，对彼此的工作（代码）并不熟悉，缺少交流 阻碍&amp;amp;疑虑 迭代节奏紧迫（时间担忧） 需求变更频繁 形式主义，增加工作量，没有太大意义 其实一开始我自己也有这些潜意识的疑虑，项目时间这么紧，都做不完，还做代码审查。后来我去查了下资料，然后参考了一些开源项目的 review 情况。最后总结下来，其实增加 code review 并不会占用太多的时间（当然也有需要投入较多时间的情况），另外大部分的 code review 沦为了一种形式，没有达到应有的效果，这主要还是因为姿势不对的原因。
利用 Gitlab 做 Code Review code review 作为一项十分成熟的软件构建环节，自然会配套十分成熟 的 review 工具。通过工具可以大大提供 review 效率和质量。
常见的一些 reivew 工具 Phabircator （Facebook) Gerrit (Google) Gitlab / Github &amp;hellip; 考虑到公司本身在使用 gitlab，索性我们就选择 gitlab 作为工具，采用基于 Merge request 的 code review 流程了，而在我们熟知的 Github 中则是 pull request。</description></item><item><title>小径分叉的花园</title><link>//imziv.com/posts/2019/%E5%B0%8F%E5%BE%84%E5%88%86%E5%8F%89%E7%9A%84%E8%8A%B1%E5%9B%AD/</link><pubDate>Sun, 31 Mar 2019 23:23:03 +0000</pubDate><guid>//imziv.com/posts/2019/%E5%B0%8F%E5%BE%84%E5%88%86%E5%8F%89%E7%9A%84%E8%8A%B1%E5%9B%AD/</guid><description>我叫余准，前青岛大学英文老师。曾祖父彭㝡曾是云南省份的总督，精通天文、占星、棋艺，同时又是著名的诗人和书法家。为了理想抛弃高官厚禄，隐匿于明虚宅十三年。
第一次世界大战时，我在德国留学期间，无意卷入了德国间谍的行列，后被送往英国执行间谍任务。
一九一六年七月二十四日，英国准备使用一千四百门大炮对赛尔-蒙托邦防线进行进攻。不久我便得知，我的间谍同伴维克多死于英国方面一个心狠手辣的特务手中—理查德·马登。这意味日落之前，我也会遭次命运。
我是个懦弱的人，但是我决定向那个瞧不起我们种族的德国人证明 ，一个黄种人可以拯救他一只军队。我制订了一个计划， 我决定去距离半小时火车路程的芬顿郊区见一个人。
我带上了一把手枪和唯一剩下的几个硬币便出发了。坐上火车后，在月台上看到了理查德·马登，下一班火车则会晚于我半小时后发车，而我还有半个多小时的时间完成我的计划。火车抵达“阿什格罗夫”后，在几个小孩子的指引下，经过迷宫般的岔路口，我找到了“斯蒂芬·艾伯特”博士的家。
“艾伯特”博士曾在天津做过传教士，会说一口流利的汉语，出于对汉文化的痴迷，现如今在英国是一位知名的汉学家。尤其对我曾祖父死后的遗作（一本杂乱无序的小说和一个象牙雕刻的迷宫）有着极深的研究。
我被“艾伯特”博士带到他建立的迷宫花园中，在得知我是彭㝡的后代后，兴奋的与我谈起了曾祖父的遗作 —— 小径分叉的花园。
这部小说里面都是一些自相矛盾的内容，例如：主人公在第三回死了，却在第四回中又活过来了，而在其他章节主人公可能又有其他境遇。在错综复杂的小说中，主人公选择了所有的可能性，这样一来，每种选择在不同的时间产生了不同的后世。这是一本关于时间的书，但书中却连“时间”这个词一次都没有出现过，存在的只有这样无限循环、周而复始，没完没了的剧情。
“艾伯特”博士花费了很大的精力研究这本小说和迷宫其中的奥秘，甚至不惜代价，重新建造了这座迷宫。而他与我谈起后来是通过牛津大学给他的一份彭㝡手稿，他才终于恍然大悟其奥秘的:
“小径分叉的花园是一个庞大的谜语，或者是寓言故事，谜底是时间；这一隐秘的原因不允许手稿中出现时间这个词。自始至终删掉一个词，采用笨拙的隐喻、明显的迂回，也许是挑明谜底最好的办法。”
显而易见，小径分叉的花园是彭㝡心目中宇宙的不完整然而绝非虚假的形象。
“您的祖先和牛顿、叔本华不同的地方是他认为时间没有同一性和绝对性。他认为时间有无数序列、背离的、汇合的和平行的时间织成一张不断增长、错综复杂的网。由相互靠拢、分歧、交错或者永远互不相干的时间织成的网络包含了所有的可能性。”
“在大部分时间里，我们并不存在；在某些时间，有你而没有我；在另一些时间，有我而没有你；再有一些时间，你我都在。目前这个时刻，偶然的机会使您光临寒舍间；在另一个时刻，您穿过花园，发现我已死去；再在另一个时刻，我说着目前所说的话，不过我是个错误，是个幽灵。”
“在所有时刻”，我微颤的补了一句，在他说完这些后。我抬起头，发现黄黑的花园只有一个人，那是“理查德·马登”。
我对艾伯特博士说了一句。“我能再看看那封包含彭㝡手稿的信吗？”
他打开存放信件的抽屉，有几秒钟的功夫，他背对着我。我特别小心的扣动了扳机，他倒下了。
我被逮捕并被判处了绞刑。临刑前，我在报纸上看到了德国飞机针对“艾伯特”进行轰炸的消息，报上还有另一则新闻，著名的汉学家“斯蒂芬·艾伯特”博士被一位叫余准的陌生人暗杀身亡。
后记 小径分叉的花园是博尔豪斯《小径分叉的花园》中最后的一个故事，也是我印象最深的一篇.原文中故事的时间线更复杂一些，读起来稍费劲儿些，我便用更直白的方式把故事重新总结了一遍。</description></item><item><title>晚来的 2018 小结</title><link>//imziv.com/posts/2019/%E6%99%9A%E6%9D%A5%E7%9A%842018%E5%B0%8F%E7%BB%93/</link><pubDate>Sun, 27 Jan 2019 23:58:20 +0000</pubDate><guid>//imziv.com/posts/2019/%E6%99%9A%E6%9D%A5%E7%9A%842018%E5%B0%8F%E7%BB%93/</guid><description>年初刚刚过完春节，匆匆返回公司就开始忙碌公司项目上的事情了，当时由于任务比较紧，一度由于人员不足的情况，倍感压力，不过好在后面小伙伴的补入，让项目迭代逐渐走入了正轨。不过后来还是有 2 个小伙伴因为各种原因，离开了团队，选择了新的生活，当然这里面就说来话长了。
春节离家的那一日，我去给在院子里晒太阳的奶奶送饭。当时我坐在她旁边跟她聊天，我跟她说我要去工作了，吃完午饭就走。她平静的跟说这可能是我最后一次看到她了，当时听她说完这一席话的时候，我低着头不敢看她。4 月份清明节后几天，我接到家里的通知——奶奶去世了。接到电话那会，内心出奇的平静，奶奶说的是真的。下完班骑车回家的路上，想到有次回武汉去福利院看她，她说要给我介绍女朋友的事情，我还是没能忍住眼泪。
6 月份的时候，我搬离了住了接近四年的房子，这是我来杭州后第一次搬家。从适应能力上讲我并不是一个害怕新环境的人，但是从情感上讲，某些时候我是个比较恋旧的人。想起来，我最舍不得的应该是楼下一家早餐店里面的拌面了，算起来“拌面”是我在杭生活几年里觉得最好吃的早餐了。在这个冬天，能把我从被窝里拉起来的，也就是一顿有拌面的早餐了~
2018 年去过最远的地方就是内蒙了(团建）。说起来，这也是我到过地球最北的地方了！7 月份的内蒙，比我想起来的还是要更干燥些，不过相较于杭州的炎热，内蒙显然是更舒适些。下飞机到内蒙已是晚上 7，8 点了，而呼和浩特的天空仍然是一片明亮，满是霞光。在内蒙辗转了 5 天，生平第一次去看了沙漠，然后就是内蒙的&amp;quot;大草原“，遗憾的是，我去的草原没有草。
说起来有段时间，特别抵触去陌生人多的地方，感觉极为不自在。想到这里，才后知后觉是由于缺少与人交流，产生了社交恐惧。自认为生活中还是个比较活泼偏外向的人，长时间的生活失衡还是能轻易的去改变一个人。过惯了加班的日子，突然来个周末，一时还不知道该如何应付，有了想法，还犹犹豫豫，大部分时候就变成了浑浑噩噩的宅居生活。说起来也是奇怪，明明身体是你的，思想也是你脑袋里的，可有时候你发现这 2 者就像一对倔强的情侣，开心的时候一起做什么都顺顺心心，闹别扭的时候，谁也劝服不了谁。顿时感受到所谓的“身心合一”、“知行合一”的艰难，能达到的若不是圣人，那应该就是机器人了。</description></item><item><title>人为什么会褪去毛这么保暖的东西？</title><link>//imziv.com/posts/2019/%E4%BA%BA%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%A4%AA%E5%8E%BB%E6%AF%9B%E8%BF%99%E4%B9%88%E4%BF%9D%E6%9A%96%E7%9A%84%E4%B8%9C%E8%A5%BF/</link><pubDate>Sun, 27 Jan 2019 17:30:34 +0000</pubDate><guid>//imziv.com/posts/2019/%E4%BA%BA%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E8%A4%AA%E5%8E%BB%E6%AF%9B%E8%BF%99%E4%B9%88%E4%BF%9D%E6%9A%96%E7%9A%84%E4%B8%9C%E8%A5%BF/</guid><description>其实原因可能与你想的正相反：退毛是为了排热。
正好在 @河森堡老师《进击的巨人》中讲“智人与尼安德特人”这一章节有看到这个话题的讲解。这里我把章节里面的部分内容简述下。
关于为什么人会腿毛，实际上要好几种说法。
其一，由于水生环境。人类祖先早期生活的环境经常被水淹没，有毛的个体在水中行动极不便利，而无毛的情况则在这种环境生存更有优势。
其二，出于健康原因。毛发这种东西极易滋长寄生虫这种东西，例如虱子，这是大家都知道的事情。而且浓密的毛发极其不容易打理理。所以，出于健康的考量，腿毛是非常有必要的选择。
其三，为了散热。大家都知道智人是来自非洲，根据发掘的智人化石推测，主要起源地是非洲东部的埃塞俄比亚（19.5 万年前）。不过最新的考古发现，在摩洛哥发现了 30 万年前的智人化石。大家都知道非洲大陆被赤道横中穿过，而背靠撒哈拉沙漠的非洲北部。而在摩洛哥发现化石的地区，有历史记载的最高气温可达 58 摄氏度。所以可想而知，智人想在在这种条件下生存，散热是非常重要的问题。如果无法解决散热问题，那么运动能力就大大受限，运动能力受限，这也就意味着采集、狩猎能力受限。书中还举了个有趣的例子，撒哈拉沙漠南部的“布须曼人”以一种“耐力狩猎”的方式来追逐猎物。
现在最被认可的是第三种假设。但是我觉得原因可能并不是单一的，因为这三种情况同时在 30 万年前出现并不冲突，而退毛对于智人而言，遇到上面三种情况都是有利的。
哈哈，更详细的内容，有兴趣的朋友可以自己去翻翻看~</description></item><item><title>git commit 、CHANGELOG 和版本发布的标准自动化</title><link>//imziv.com/posts/2018/git-commit-changelog-%E5%92%8C%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83%E7%9A%84%E6%A0%87%E5%87%86%E8%87%AA%E5%8A%A8%E5%8C%96/</link><pubDate>Sat, 08 Dec 2018 15:36:48 +0000</pubDate><guid>//imziv.com/posts/2018/git-commit-changelog-%E5%92%8C%E7%89%88%E6%9C%AC%E5%8F%91%E5%B8%83%E7%9A%84%E6%A0%87%E5%87%86%E8%87%AA%E5%8A%A8%E5%8C%96/</guid><description>一直以来，因为团队项目迭代节奏很快，每次发布的更新日志和版本更新都是通过人肉来完成的。有时候实在忙的团团转，对于手动的写这些更新信息就显得力不从心了。对于团队新来的小伙伴，有时候遇到些紧急情况，就更显的乱糟糟，还是得麻烦团队资深的同学。显然这些工作，用自动化工具再适合不过了。
本文通过主要内容为介绍 conventional-changelog 的几个常用工具
onventional-changelog onventional-changelog 是一款根据项目中的commit 和 metadata信息自动生成 changelogs 和 release notes的系列工具，并且在辅助 standard-version 工具的情况下，可以自动帮你完成生成version、打tag, 生成CHANGELOG等系列过程。 onventional-changelog。
onventional-changelog 生态主要模块 conventional-changelog-cli - 全功能的命令行工具 standard-changelog - 针对 angular commit 格式的命令行工具 conventional-github-releaser - 根据 git metadata 生成 Github release conventional-commits-detector - commit message 规范引用检测 commitizen - 针对开发者简单的 commit 规范 commitlint - commit Lint 工具 以上是 onventional-changelog 生态重要的几个主要模块，今天我们主要介绍 commitizen、conventional-changelog-cli 、standard-version 这几个常用工具。
commitizen commitizen 是一款标准化 git commit 信息的工具。在没有规范的情况下，开发人员的 commit 信息是常常是随意的，这就导致 commit 信息显的很无用。可是当你在做git log 、code review、编写changelog等情况时，良好的 commit 规范就显的尤为重要。</description></item><item><title>【译】理解 Javascript 中常用的一些设计模式</title><link>//imziv.com/posts/2018/%E8%AF%91%E7%90%86%E8%A7%A3-javascript-%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link><pubDate>Fri, 23 Nov 2018 17:24:48 +0000</pubDate><guid>//imziv.com/posts/2018/%E8%AF%91%E7%90%86%E8%A7%A3-javascript-%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid><description>原文地址: Understanding Design Patterns in JavaScript
当我们开始一个新的项目的时候，通常不会立刻开始实际编码的工作，而是首先会理清楚项目的一些需求、问题和目标。在我们可以开始编写代码后， 或者如果你正在处理的是一个更复杂的项目的话，那么我们应该考虑去选择一种最适合项目的设计模式去帮助我们完成工作。
如何理解设计模式 在软件工程中，设计模式是一种用来解决软件设计中一些共通问题的解决方案。设计模式往往是开发工程师最佳实践后的经验总结。通常我们可以把一个设计模式理解为是一个编程模板。
为什么我们需要设计模式 大部分的开发者通常认为设计模式是在浪费时间，或者说他们也并不太知如何适当的去使用这些设计模式。但是适当的使用设计模式的确可以帮助我们编写出更好健壮的代码。
更重要的是，设计模式往往为我们提供了一些沟通上的便利，它可以及时的向正在学习你代码的人展示出你代码意图。例如，如果你在项目中使用了装饰者模式的话，那么一个新的开发者可能马上就知道了你的代码是在干什么，他们可以更多的去关注业务本身，而无需花费过度的精力去理解你的代码。
好了，接让我们看看我们在 Javascript 中常用的一些设计模式吧。
模块模式（Module Pattern） 模块是指一个包含自身完整逻辑代码的代码块，当我们去更新模块中的代码时而不用影响其他代码的部分。模块可以让我们轻易的规避命名空间的污染问题，例如模块拥有自己独立的变量作用域，我们也可以在其他项目中复用我们的模块。
模块是现代 Javascript 应用开发里的不可或缺的部分，它帮助我们轻易的组织和维护代码。在 Javascript 中模块化的方式有很多，通常我们把这些模块化的方法称之为模块化模式。像 Bit 这个工具，它不需要任何重构工作，就可以把我们的模块或者组件转换成其他任何项目中可以复用的代码了。
Javascript 并没有像其他编程语言拥有访问修饰符的特性（现在 Typescript 之类的语言包含这些特性），例如你无法声明变量为私有（private）或者公开（public)。所以模块化模式也常常被用来去模拟封装（Encapsulation) 的理念。
这种模式我们可以通过即行函数 IIFE（immediately-invoked function expression)、闭包和函数作用域来模拟，例如：
const myModule = (function() { const privateVariable = &amp;#39;Hello World&amp;#39;; function privateMethod() { console.log(privateVariable); } return { publicMethod: function() { privateMethod(); } } })(); myModule.publicMethod(); 上面的代码是即行函数的方法，通过立即执行函数，并把返回结果指向了 myModule 变量。由于闭包、返回的对象仍然可以访问定义在即行函数内的函数和变量，当然这些操作是在执行完即行函数产生实例之后了。我们可以看到，变量和方法被定义在即行函数内部，对于模块外部的作用域来说即达到了 private 的效果。
当代码被执行后，变量 myModule 类似于：</description></item><item><title>利用 Atomic 构建 React 项目工作流</title><link>//imziv.com/posts/2018/%E5%88%A9%E7%94%A8-atomic-%E6%9E%84%E5%BB%BA-react-%E9%A1%B9%E7%9B%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/</link><pubDate>Thu, 01 Nov 2018 20:52:46 +0000</pubDate><guid>//imziv.com/posts/2018/%E5%88%A9%E7%94%A8-atomic-%E6%9E%84%E5%BB%BA-react-%E9%A1%B9%E7%9B%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid><description>原文地址: http://imziv.com/blog/article/read.htm?id=89
用过 React 的朋友都知道，React 项目文件夹的划分是有很多种的，在 React 官方关于文件结构这个部分给出了一些社区比较常见的构建方式的示例。例如有通过 features 或者 routes 进行分组的，也有通过模块类型（type) 划分的。在文档提到了一种针对 components 进行细化组织的方法 —— Atomic Design。如果还没了解过这个设计方法的朋友，不妨来看一看。
什么是 Atomic Atomic 是一套指导设计前端组件（Components）架构的方法。在我们的日常工作中，如何更好的划分和管理前端组件常常会是我们碰到的问题。Atomic 通过一系列设计思想和原则，可以很好指导我们的项目架构。用 Atomic 作者自己的话说，这套设计方法的灵感是来自于自己曾经学习过的化学课，以及对自然知识本身的思考。作者通过原子（Atoms)、分子(Molecules)、 有机体(Organisms)、模板(Templates), 页面(Pages) 这 5 种基本类型组件，通过灵活的组合，从而来满足我们日常的页面开发需求。 让我们先一一了解这 5 中不同类型的组件类型。
原子（Atoms) 正如化学知识中所表述的，原子（Atoms)是元素能保持其化学性质的最小单位，所以正好利用原子的概念，可以用来组件系统中的最小单位的组件，或者说抽象到最小粒度的组件，即我们在 HTML 中常见的一些基本元素，例如：按钮（buttons)，表单标签(labels)，输入控件（input)等等。既然是最小单位，Atom 类型的组件显然是无法再进行任何拆分了，如果能继续拆分，那么该组件应该被划分为分子组件（Molecules）。
分子（Molecules) 我们都知道，在化学概念中，分子是有若干原子组成。通过组合各种原子组件，我们可以轻易的可以组合出某种功能的分子组件。例如通过组合 input 控件和 button 组件，我们可以得到一个搜索（Search)分子组件，通过组合 button 和 a 标签，可以可以组合分页（Pagination）组件。
有机体（Organisms) 仅靠分子组件和分子组件的抽象，仍然是不能满足我们实际工作中对组件复用的需求，例如我们我们大部分项目中都有导航栏（Navigation Bar)、页头（Header)、页脚（Footer)、边栏（Sidebar)、列表（List) 等等组件，显然可以根据需要可以抽象成独立组件，以便后来的项目可以直接使用。可以看到的是，在有原子和分子组件的情况下，我们通过灵活组合这些原子、分子组件的方式，便可轻易达到我们的需求。而通过这类方式组合的组件类型我们便称之为有机体组件（Organisms)。
模板（Templates) 到这里，模板层就很好理解了。很显然，模板层是原子、分子、有机组件的结合体。例如包含头部（Header、Content、Footer)常见部分的首页模板、又或者各种左右上下布局模板组件等等。
页面（Pages) 页面这一层可能是复用率最低的一层了，因为业务需求大部分时候各不相同的，当然也不排除有复用页面的情况。页面组件自然就是个包含了其他四种组件类型的综合体了。有了前几层组件的抽象，可以轻松的应对各种业务页面，并且不断地可以丰富新组件到各类型自己中去，以便后面的项目中持续使用。
综合看下来，通过这 5 种组件的划分，就可以很好的满足我们实际项目中对页面组件进行划分和管理了。
Atomic 实践 根据 Atomic 的思路, 以 src 目录为基础，在 React 项目中，我可以得到了类似如下的开发目录：</description></item><item><title>《卓有成效的管理者》读后感</title><link>//imziv.com/posts/2018/%E5%8D%93%E6%9C%89%E6%88%90%E6%95%88%E7%9A%84%E7%AE%A1%E7%90%86%E8%80%85%E8%AF%BB%E5%90%8E%E6%84%9F/</link><pubDate>Sat, 13 Oct 2018 15:35:05 +0000</pubDate><guid>//imziv.com/posts/2018/%E5%8D%93%E6%9C%89%E6%88%90%E6%95%88%E7%9A%84%E7%AE%A1%E7%90%86%E8%80%85%E8%AF%BB%E5%90%8E%E6%84%9F/</guid><description>通篇阅读下来，其实并没有太多令我印象深刻或者惊喜的点，或许因为这是本纯理论型的管理类书籍的原因。整本书总览的话，在我看来强调的最多的应当是成效二字。此书出版于 2005 年，距今已经过去 13 年之久， 彼得·德鲁克作为管理学大师，其作品和思想早已通过各种传播途径深入并影响这现代企业的管理者，所以文中很多的点，我们在其他地方或许多多少少也都接触过一些了。文章开篇就首要传达出卓有成效是可以通过学习，并且做到可控的, 同时也是为接下来阐述影响“成效”的一些主要因素做了铺垫。阅完全文，我对一观点做了些个人理解。
所为管理者的承诺 德鲁克提到的承诺，我的理解是例如企业成立之初的初心、价值观；产品设计时的为客户解决的核心需求。大部分时候，事情随着时间渐渐推移，我们往往会忘记当时为何出发，为何开始，所以对于事情最后产生的结果，往往也并不能如我们最初所愿。在这里，让我想到第一性原理，无论事情如何发展，我们应该更关注和看重（事情/事物）本质，围绕核心问题去开展工作。
专业人员如何发挥成效 要求专业人员要以更全局的视角和考量去执行工作，而不是局限固有角色，固有职责。例如从研发整个产品而言，作为开发人员应该更多的思考甚至参与产品设计、测试、运维等方面的事情，其他角色也是如此。说到底不是为了工作而工作，是为了要解决的核心问题和目标而工作。
正确的人际关系 强调的更多的是对管理者的自我要求，例如互相沟通、团队合作、自我发展、培养他人等方面的能力。作为一个技术出身的人，某种程度上这可能是对自我最大的挑战。与人沟通打交道的的复杂度，可能远困难于计算机。然而关于如何提升这些能力，书中并没有太多具体的方法论。我想解决的办法的话，一方面需要提示自己工作中更积极主动的沟通，另一方面也可以通过阅读，协作训练自己的表达技巧。
发挥人的长处 段落开篇就提到管理者应该发挥人的长处，扬长辟短的观点，这自然是无需多说的道理。如何避免用短，德鲁克提到了一些基本方法，例如通过设置组织和规则来减少因为人的缺点而带来的影响，又例如我们应该因事用人，而非因人设事。实际工作中，发现长处对管理者而言可能也是种能力要求，所以而如何培养发觉优点的能力也是需要关注和解决的问题。
决策的五要素 原文过于术语，用自己的理解调整了下：
确定问题的性质，例如是经常性的，还是偶发特例，从而便于确立用何种方式解决，例如是否通过建立规则或者原则来解决问题。 设置问题边界（觉得这个原则，对于产品需求设计同样有用） 根据实际条件，思考问题解决方案 解决方案应该包含实际意义的可执行计划 执行中注重时刻反馈，以便印证和调整决策 最后 其实读下来，甚至感觉讲了很多专业的词汇和概念，当然也引用了一些名人事迹和实例。这本书对“成效管理”的方法论阐述的比较全面了，但是应用到实际缺也是另一种挑战了。</description></item><item><title>你不知道的 Console</title><link>//imziv.com/posts/2018/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-console/</link><pubDate>Sat, 07 Jul 2018 16:16:51 +0000</pubDate><guid>//imziv.com/posts/2018/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-console/</guid><description>相信很多 Web 开发者跟我一样有个习惯，经常会不自觉的打开感兴趣网站的控制台（Console)。很多公司会在控制台中打印一些招聘或者安全警告的信息。作为一位开发者，当然更多的关心的是这些效果是如何实现的。今天我们不妨来重写认识下 Console 这个 API 对象。
简介 Javascript console是被提供用来访问浏览器Debug控制台的一个全局对象，一般我们可以直接通过console或者 window.console 的方式访问该对象。通常我们会利用该对象 debug 调试，当然你也可以跟其他公司一样，在上面发招聘信息。
其实除去我们平时常用的console.log、console.error、console.warn、console.info 方法外，其实console还有很多非常有用的 API。 当然，事先已经知道的同学当我没说。先看下列这张表：
方法 用途 console.assert() 判断第一个参数是否为真，false 的话抛出异常并且在控制台输出相应信息。 console.clear() 清空控制台 console.count() 以参数为标识记录调用的次数，调用时在控制台打印标识以及调用次数。 console.debug() console.log 方法的别称，使用方法可以参考 console.log() console.dir() 打印一条以三角形符号开头的语句，可以点击三角展开查看对象的属性。 console.dirxml() 如果可以，打印 XML/HTML 元素表示的指定对象，或者 JavaScript 对象视图。 console.error() 打印一条错误信息，使用方法可以参考string substitution。 console.group() 打印树状结构，配合 groupcollapsed 以及 groupEnd 方法; console.</description></item><item><title>Webassembly 技术的探索与实践</title><link>//imziv.com/posts/2018/webassembly-%E6%8A%80%E6%9C%AF%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5/</link><pubDate>Fri, 05 Jan 2018 21:54:33 +0000</pubDate><guid>//imziv.com/posts/2018/webassembly-%E6%8A%80%E6%9C%AF%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5/</guid><description>简介 Webassembly 是一种可以在浏览器端运行二进制格式代码的技术，他的目标则是想提供接近Native code的执行效率的技术体验。 相较于文本类型的Javascirpt而言，它拥有更小的体积，更短的加载时间，和更好的执行性能等特点 。Webassembly 允许你使用Rust或者C/C++等静态语言来编写，并生成目标文件后缀为wasm的二进制格式文件。通过Fetch或者Ajax与Webassembly提供的 API ，我们可以实现Javascipt与wasm模块的混用。
asm.js 与 wasm 相信很多人跟我一样有些疑问，asm.js 和wasm的关系，asm.js是Mozila工程师ALON ZAKAI提出的一种将静态语言编译为javascript的一种解决方案，这里有官方的PPT。而 asm.js 则实际上是 Javascript 的一个子集，通过在已有Javascript语法特上性进行可行的提前优化和性能改进（例如强制类型的一致性、手动的内存管理），从而达到编译器对Javascript代码提前优化的目的。所以，asm.js 实际上是一种针对Javascript编译器进行优化过的Javascript文本代码，而wasm则是浏览器直接支持的一种二进制格式文件，所以在加载速度上，文件体积上，执行效率上有更多优势。编写符合规范的asm.js代码，通过Emscripten编译工具来将静态语言编译为asm.js目标即可。
c语言源程序 int f (int var) { return var + 1; } 编译后的asm.js目标文件 // 通过`|0`提前声明变量和函数的返回类型。 function f(i) { i = i|0; return (i + 1)|0; } C/C++ 文件编译为 asm.js 目标文件的过程 注：LLVM 为底层虚拟机（Low Level Virtual Machine）的缩写，一种用 C++编写的, 可以用于优化任何静态语言（例如 Java，Go, Rust, Swift）的底层编译器基础技术。具体的编写和编译asm.js的方法可以查看 Emscripten 官方相关教程。
wasm 文件与 Javascript 生成机器码的区别 对比 2 种文件生成机器码的流程会发现，Javascript 文件生成机器码需要经过语法解析，代码优化，最后才转换成机器码等过程，而wasm的优势是本身就是通过编译器并优化过后的二进制文件，可以直接转换为机器码，省去了Javascript需要解析，优化的工作，所以在加载和执行上本身就具有优势。接下来我们尝试用C/C++写一个wasm模块。
用 C/C++ 编写一个 wasm 模块 搭建和安装 wasm 编写环境的步骤这里就不写了，具体可以查看官方， 这里我会编写一个模块，然后通过浏览器浏览运行结果。在这里我们利用递归算法，编写一个阶乘计算的模块factorial.</description></item><item><title>2017 年小结</title><link>//imziv.com/posts/2018/2017%E5%B9%B4%E5%B0%8F%E7%BB%93/</link><pubDate>Mon, 01 Jan 2018 23:58:20 +0000</pubDate><guid>//imziv.com/posts/2018/2017%E5%B9%B4%E5%B0%8F%E7%BB%93/</guid><description>前几天大家都在晒 18 岁的照片，感慨时间这把杀猪刀，因为最早的一波 90 后已经快 30，而最后一波 90 后也依然成年了。跟大家一样，对 2017 的感觉就是：快、快、快，而这种感觉以后应该会更加强烈。
我依然十分推崇用文字的方式记录生活、工作、学习，但是 17 年这方面我做的并不好。原因大致就是自控力下降了，自己很明显的能感受到，体现在例如我 16 年坚持了一年的阅读习惯 17 年基本残废，还有就是身上越来越多的赘肉，让我难免想到“油腻”这个词 0.0。工作上效率其实还是可以的，但是未来除了“效率”，还是需要注重下“效果”的。
翻过以前 QQ 或者博客上写过的东西，忽然发现当时自己的想法很幼稚，觉得怎么会是自己说过这样的话，如今我还是比较看开了这种思维。人的想法一直是在不断变化和修正的，跟一个系统一样，在不断进化，重构，完善，这是必经过程。所以以后也不会排斥各种记录方式。17 年我尝试了一种新的记录方式，利用微信给自己与自己进行了一些对话，当然还有一些看到喜欢的东西给记录了下来。截了图，做个记录：
2018 年 18 年我没有太多的期待，有一件事比较重要，就是治疗“拖延症”。过去一年里，我一直被这个词在缠绕，尤其是在生活里，很多事情我都是一拖再拖，能拖接着托。今年希望通过提升自控力来克服，可能需要些新的尝试。
最后，看到这篇文章的朋友，希望 2018 能如你所愿~</description></item><item><title>Decorator 简介及实战</title><link>//imziv.com/posts/2017/decorator-%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%AE%9E%E6%88%98/</link><pubDate>Sun, 05 Nov 2017 14:36:35 +0000</pubDate><guid>//imziv.com/posts/2017/decorator-%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%AE%9E%E6%88%98/</guid><description>前言 用过 Java 的朋友都知道，装饰器（Decorator)是一种十分非常方便改变类运行是行为的一种方式，例如在 Spring 框架中我们用到比较多的注解（@Autowired), 通过它可以自动实例化对象，从而可以精简代码。装饰器是典型的 AOP(Aspect-Oriented-Programming) 编程的应用，类似的 CSS 对于 HTML 的样式也是类似于这种思想，即从切面来改变和影响主对象的行为。
Decorator 简介 Decorator 是一种通过注解表达式就可以扩展类或者方法的函数。Decorator 可以应用到任何一个 class 或者 property 上。列如:
@myDecorator class A {} // 作用class @myDecorator doSomething() {} // 作用表达式 Javascript Decorator 目前任然是 ES7 提案状态，更多该特性的进度可以访问proposal-decorators查看。
Decorator 原理 说到更改对象的属性或者方法，大家肯定会想到Object.defineProperty(obj, prop, descriptor)方法，通过该方法，我们可以轻易的修改或者重写对象的行为或者属性，之前 Vue 中提到的双向绑定，即是通过重写set和get方法来实现的。所以在我们还未正式用上 Decorator 前，都是通过 Object.defineProperty 方法来实现。先来简单的认识下这个方法：
/** * obj : 需要修改属性的对象 * prop : 需要修改对象的属性名称 * descriptor: 用来定义属性具体行为的描述对象 **/ Object.defineProperty(obj, prop, descriptor) descriptor 属性说明 configurable : 定义属性对象是否可以被配置，即如果为 false ，定义修改的描述操作（writeable, get 等等）都无效</description></item><item><title>我用 Express.js 封装了一个服务器容器小工具</title><link>//imziv.com/posts/2017/%E6%88%91%E7%94%A8express.js%E5%B0%81%E8%A3%85%E4%BA%86%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%B9%E5%99%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/</link><pubDate>Tue, 28 Feb 2017 17:35:09 +0000</pubDate><guid>//imziv.com/posts/2017/%E6%88%91%E7%94%A8express.js%E5%B0%81%E8%A3%85%E4%BA%86%E4%B8%80%E4%B8%AA%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%B9%E5%99%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/</guid><description>背景 我们都知道利用 Node.js 可以非常轻易的就编写一个 Web Server。在没有利用集成 Gulp, Webpack，Web Server 等等脚手架工具前，在做一些简单的 Web 应用的时候，我通常的做法是：用 Express.js 封装好一个 Server.js 文件集成到项目中去，以便于开发和测试。例如通过二维码扫描 Chrome 的开发程序到手机端测试，例如需要跨域调用远程服务器 API, 例如 Ajax 异步加载，等等。当然，偶尔也会用用 Nginx 做测试开发环境，但是 Nginx 这玩意还是感觉太重，并且项目组的有些同学觉得安装麻烦，配置复杂，不易上手。
由于我们经常会收到一些活动页面，或者很少页面的开发需求，移动端，PC 端都有，所以如果每次都大张旗鼓的上脚手架，全家桶实在上有点杀鸡用牛刀的感觉。一堆依赖，每次重复的安装，很占用硬盘空间。正因如此，我便希望把现有的基于 Express.js 的 server 给封装成全局的程序，每次在这些小项目需要的时候，直接一个简单的命令行就可以进行开发和测试，要安装简单，轻便，配置简单。于是这个叫cup的工具就诞生了。
特点 随时随地针对项目目录开启 Server 服务 全局安装，简单的 CLI 支持自定义服务器端口 支持远程服务器代理（Proxy) 基本使用 安装 npm install -g mini-cup 示例 | - test | - css | - styles | - index.html 例如当你有个项目简单到只有以上一些文件和文件夹时，需要添加 server 容器来调试开发，你只需要在控制台切换到test项目所在目录，运行：
cup run test cup默认开启的服务器端口是3000，如果端口占用，或者需要指定其他端口的情况下，则可以通过如下命令：
cup run test -p 8080 通过选项参数-p指定端口为8080</description></item><item><title>完整的学习和使用 CSS 动画【翻译】</title><link>//imziv.com/posts/2017/%E5%AE%8C%E6%95%B4%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8css%E5%8A%A8%E7%94%BB%E7%BF%BB%E8%AF%91/</link><pubDate>Sat, 25 Feb 2017 19:30:23 +0000</pubDate><guid>//imziv.com/posts/2017/%E5%AE%8C%E6%95%B4%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E4%BD%BF%E7%94%A8css%E5%8A%A8%E7%94%BB%E7%BF%BB%E8%AF%91/</guid><description>一直以来，因为团队项目迭代节奏很快，每次发布的更新日志和版本更新都是通过人肉来完成的。有时候实在忙的团团转，对于手动的写这些更新信息就显得力不从心了。对于团队新来的小伙伴，有时候遇到些紧急情况，就更显的乱糟糟，还是得麻烦团队资深的同学。显然这些工作，用自动化工具再适合不过了。
本文是一篇项目自动化方面的使用教程，社区里面针对四类问题的解决方案很多，今天这里主要介绍的是 onventional-changelog 方案相关的内容。 如果你正在思考或者试图解决这方面的问题的话，不妨了解一下。
conventional-changelog conventional-changelog 是一款可以根据项目的 commit 和 metadata 信息自动生成 changelogs 和 release notes 的系列工具，并且在辅助 standard-version 工具的情况下，可以自动帮你完成生成 version、打 tag, 生成 CHANGELOG 等系列过程。
conventional-changelog 生态主要模块 conventional-changelog-cli - conventional-changelog 核心命令行工具 standard-changelog - 针对 angular commit 格式的命令行工具 conventional-github-releaser - 利用 git metadata 针对 Github 的发布工具 conventional-commits-detector - commit message 规范引用检测 commitizen - 针对开发者简单的 commit 规范 commitlint - commit Lint 工具 以上是 onventional-changelog 生态重要的几个主要模块，实际工作中这几个工具常常是配套使用的，当然也需要根据自己的情况而定。篇幅有限，今天我们就主要介绍 commitizen、conventional-changelog-cli 、standard-version 这三工具了。
commitizen commitizen 是一款标准化 git commit 信息的工具。在没有规范的情况下，开发人员的 commit 信息是常常是随意的，这就导致 commit 信息显的很无用。可是当你在做 git log、code review、编写 changelog 等情况时，良好的 commit 规范就显的尤为重要。</description></item><item><title>常用的 Linux Shell 命令</title><link>//imziv.com/posts/2017/%E5%B8%B8%E7%94%A8%E7%9A%84linux-shell%E5%91%BD%E4%BB%A4/</link><pubDate>Wed, 08 Feb 2017 17:21:03 +0000</pubDate><guid>//imziv.com/posts/2017/%E5%B8%B8%E7%94%A8%E7%9A%84linux-shell%E5%91%BD%E4%BB%A4/</guid><description>自己平时有可能会用到的 Shell 命令，之前用 Evenote 记录的比较零散，重新整理了下，以后慢慢补充。
文件操作 查看文件所属用户 ls -al 动态打印日志 tail -f /var/log/error.log 给指定目录的所属用户权限赋予指定人 # 把directry目录下的所有用户指向someone $ sudo chown -R someone:staff directory 用户组相关操作 查看用户组
groups 查看各用户与组的关联情况
id 添加新用户组
sudo groupadd mynewgroup 添加已存在的用户到一个组
usermod -a -G exampleGroup exampleUserName 改变用户主要的组
usermod -g groupName userName 查看文件内容 cat filename 查看目录所占磁盘容量 du dir # 显示dir的总容量以及次目录的容量，KB为单位 du -s dir # 显示dir的容量 测试用户目录权限 sudo -u admin stat /home # 测试用户admin对目录 /home 对权限 scp 获取远程服务器上的文件 # 把远程服务器/root目录下的remote.tar.gz文件下载到本地/home目录下， # 并保存为local.</description></item><item><title>Web 前端的状态管理（State Management）</title><link>//imziv.com/posts/2017/web%E5%89%8D%E7%AB%AF%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86state-management/</link><pubDate>Sun, 08 Jan 2017 22:38:01 +0000</pubDate><guid>//imziv.com/posts/2017/web%E5%89%8D%E7%AB%AF%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86state-management/</guid><description>背景 我相信很多朋友跟我一样，初次听到什么Flux, Redux， Vuex，状态管理的时候是一脸懵逼的。因为在外面之前前端大部分开发的时候，根本没有那么多的概念。自从 ReactJS 火爆后，什么Flux, Redux，React全家桶是一套一套接踵而来。搞的很多开发者甚是头大。所谓的 ReactJS 全家桶即ReactJS + Redux + Webpack， 当然其中的 Redux 可以用其他例如Mobx之类的替换。原本可能只是很简单的一些数据展示需求，当想用尝试使用 ReactJS 时，去 Google 搜索了一些教程，突然发现怎么用个 React 需要这么多东西。正如今年比较有名的一篇文章里面描述的那样 — ”在 2016 年学习前端是怎样一种体验&amp;rdquo;。
很显然，时代在进步，技术在进步，Web 业务需求在进步，浏览器性能的大幅度提升，促使 JS 能处理越来越多的事情。为了满足越来越复杂、丰富的WebApp需求，越来越多的原本后端处理的业务逻辑开始转移到前端来处理，同时更多复杂的前端业务在浏览器上面催生，原有的很多技术体系、解决方案已经不能很好的支撑这些越来越复杂的需求了。所以当我们在面临各种业务需求的时候，必定会出现各种各样的适合不同业务需求的技术解决方案。
很多朋友刚刚上手 React 的时候，被什么 Redux, 函数式都搞的有点摸不着头脑。因为之前很多时候写前端用一个 jQuery 就足矣，当转换到 ReactJS 时,忽然多出了个 Webpack, Redux, 然而 Redux 里面又包含了什么Reducer、Action、State管理、函数式等等概念, 搞的人的确很头大。前期较高的学习成本，造成了很多朋友就放弃了 ReactJS 的选型。而且很多开发者初期并不了解这些框架所解决的问题，缺乏足够的实践经验，造成很多人误认为这是把简单的问题越搞越复杂。可能大家回想本来很简单的问题，我用个 jQuery 就能搞定，甚至纯手撸原生 Javascript 都可以，怎么突然多出了这么多东西。例如 ReactJS 只是单纯的 View 层的解决方案，而 Redux 是一种状态管理框架，不仅支持 ReactJS，还支持Angularjs, 官方宣称的是它可以支持任务其他的视图库。正因越来越复杂的前端需求，层出不穷的前端解决方案和技术的推陈出新，造就了前端社区异常火爆的局面。而本文主要探讨前端的状态管理（State Management）
服务端渲染的 WEB 开发 就在几年前，前端工程师的大部分工作，可能还停留在利用 CSS, HTML 切页面，然后利用 JS 做些简单的动态交互，更进一步的前端开发者可能需要懂 Java, 或者 PHP 之类的语言，因为需要将写好的页面与模板引擎完成整合。</description></item><item><title>《明朝那些事》读后感</title><link>//imziv.com/posts/2017/%E6%98%8E%E6%9C%9D%E9%82%A3%E4%BA%9B%E4%BA%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</link><pubDate>Tue, 03 Jan 2017 00:23:08 +0000</pubDate><guid>//imziv.com/posts/2017/%E6%98%8E%E6%9C%9D%E9%82%A3%E4%BA%9B%E4%BA%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</guid><description>拿起这本书的时候是 2016 年十一的时候，正好缝上放假回家，为了减轻旅途中的无聊，就在 Kindle 上下载了这本书。这本书火起来的时候，我还是个高中生，而对历史书集的印象只是停留在历史课本的层次。我不得不承认的是，那时的历史课对我而言是相对乏味的，所以一直以来，我对历史相关的读物的兴趣是不大的，而且对于很多历史人物的认知是只知其名，不知其事。
也不知是什么原因，今年看了好几都讲历史相关的本书，也不知道是不是年纪越来越大的原因 0.0。明朝这书火的时候虽然我没看，但是我对他印象还是很深的。因为高中那会玩过新浪微博，而当年明月的新浪博客和这本书当时的影响力已经十分大了。所以今年在列书单的时候，看到在豆瓣评价如此之高的情况下，最终我把它装到了我的 Kindle 里。正好在元旦假期把它给看完了。不管如何，看了这么久，读后感还是要写的。
古人很单纯 通过历史读物，我认识到，原来几百年前年前的古人原来一点都不单纯（看怎么理解了）！除去当今社会的科学文化的发展外，古人的智力和情商，技术和手段丝毫不比现今社会差。常常会产生种错觉，80 年代的人可能会觉得 70 年代比较单纯，90 年代的人可能会觉得 80 年代的人比较单纯，嗯，也有可能 00 后觉得 90 后比较单纯。这让我忽然想起朝鲜民众见到他们伟大的领袖金正恩同志时总是热泪盈眶一样的场景，经常感叹，哇，他们好单纯。话说回来，大家身处的环境不同而已，很多事情要相对的看。而人生存始终要和人交织在一起的，而有人的地方，就有江湖，有江湖就有利益，有利益就会有斗争。
辛辛苦苦陪同朱重八同志打下江山的徐达，常遇春, 李文忠等等名将，好不容易拼死拼活的换来大明江山，却最后还是落在了自己的 Boss 手下。重八同志为了让自己能睡的安稳，自己的私心，把这些曾经跟自己出生入死的兄弟们一个个都送走了。这很明显跟我当年看的香港黑帮片，古惑仔什么的的价值观不不一样啊~
书中大量的篇幅讲述了皇帝，大臣，宦官之间的各种明争暗斗，勾心斗角，也是让我领略到了什么是搞政治，什么是厚黑学，也是大开眼界。而我始终相信，人性是人类最大的敌人。
理想主义者 整本书记录了从明朝的起源讲到终结，看到评论有人说这是一部厚黑学史。再次之前我还不太懂这是个什么概念。除去这些政治上的勾心斗角，令我印象更深的反而是那些理想主义者们。例如“知行合一”，心学集大成者——王守仁。不仅是个哲学家，也是个军事家，花了大半辈子，终于发现自己喜欢搞哲学。当时看到讲王圣人的英雄事迹时，实在是大快人心，无比崇拜。在我看来，明朝那个时候，他就开始搞“文艺复兴”了。当然还有其他理想主义者，例如航海家-郑和，著名医学家，《本草纲目》作者李时珍，等等。
好人，坏人，成功 以前有种错觉，成功人士应该都是好人。然而历史告诉我的是，不管是身处哪个社会阶层，好人，坏人都是并存在。然而成功的方式有很多种，助人行善，普度众生，为人民服务是一种；卑鄙无耻，捞财害命，毫无道义也是一种。位高权重，自称九千岁岁的奸臣魏忠贤，做尽恶事，仍然混到了皇帝身边，甚至影响了整个明朝的历史。显然，好人，坏人，与所谓的成功并没有必然联系。有的只是不同的生存方式。
有时候要认命，环境很重要 要知道世上有很多事情，不是光靠努力就可以的。有时候，要看天命，所谓的天命，在我看来就是时下的大环境。崇祯皇帝莫名其妙的就坐上了本来看似与自己无关的皇帝。这个天上掉下的馅饼，似乎并不是个美事。没想到自己接手时的明朝，已是一盘烂摊子。刚上台就要面对魏忠贤这种无耻小人，整个时局是内忧外患，还有天灾人祸，全让他赶上了。纵使他夜以继日的拼命劳作，兢兢业业，也无法挽回明朝的颓势，最终明朝历史戛然而止。这也就是书中所提到的气数已尽, 大势已去, 努力并不能挽回明朝的终止。当然崇祯皇帝这种态度还是值得肯定的~
文明之光 前段时间看了吴军博士的一个系列书籍《文明之光》，这是一本讲那些看起来似乎微不足道，却对人类文明影响巨大的发明创造的书籍。例如”中国的瓷器“，”轮子和楔形文字“，&amp;ldquo;造纸术“， ”垄耕种植法“等等。作者在书中前言这样说道：
在历史上，人类对强者的崇拜，对权力的兴趣比对文明的兴趣更大。 翻开世界各国尤其是中国历史教科书，基本上都是在讲述王侯将相攻城略地的丰功伟绩, 帝国的扩展和兴衰，很少讲述世界各地区对文明的贡献。 那么为什么很多人对那些王侯将相的故事津津乐道呢？ 其实人类几千年的文明史和地球的历史相比，实在太短暂了， 大约相当于几分钟和一年的关系。依然崇山权力，这本身就说明人类还很年轻。 [当年明月] 在书的最后，通过`徐霞客`的故事，和一句他从不起眼读物上看到的话 作为结束语： “成功只有一个——按照自己的方式，去度过一生“ 之前从其他渠道看到过这句话，今天也算是知道出处了~
总而言之，言而总之，用现在时髦的话说就是：“去做你想做的事，去成为你想成为的人”。
原文地址：https://imziv.com/posts/2017/明朝那些事读后感/</description></item><item><title>而惑之年</title><link>//imziv.com/posts/2016/%E8%80%8C%E6%83%91%E4%B9%8B%E5%B9%B4/</link><pubDate>Sat, 31 Dec 2016 23:55:56 +0000</pubDate><guid>//imziv.com/posts/2016/%E8%80%8C%E6%83%91%E4%B9%8B%E5%B9%B4/</guid><description>就在告别 2016 年的前一个小时，我又重温了又宫崎骏老爷子编剧的《侧耳倾听》这部平淡温情的动画片。16 年马上就要过去了，而它仿佛一直就在询问我：&amp;rdquo; 我马上就要走了，你是不是该对我说点什么？“。就在今年的 2016 年一月一日，我写下了 2015 年的总结。看着去年的文字，时间整个就像篇书页，就这么翻过去了。
如果说今年要让我用一个字来形容整年的生活的话，我可能会选择”惑“这个字。过去很长一段时间里，我坚信是个比较了解自己的人。然而经历过种种，才偶尔发现，有时候自己都搞不懂自己了。变得有些犹豫，变得优柔寡断。
实在不知道该对今年的自己说些什么，总而言之就是不满意。身体下滑，自控力下滑，人的状态也下滑。可能是年纪越来越大的原因，单身太久，或许是其他什么原因。圈子越来越小，沟通能力也越来越差，越来越不爱说。总而言之，言而总之，要改变的太多。
今年就不多说了，加油吧，少年~！</description></item><item><title>写作给我带来的益处</title><link>//imziv.com/posts/2016/%E5%86%99%E4%BD%9C%E7%BB%99%E6%88%91%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%9B%8A%E5%A4%84/</link><pubDate>Thu, 20 Oct 2016 16:38:52 +0000</pubDate><guid>//imziv.com/posts/2016/%E5%86%99%E4%BD%9C%E7%BB%99%E6%88%91%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%9B%8A%E5%A4%84/</guid><description>刚刚进入工作那会儿， 经常通过搜索引擎搜索到各种大牛的博客，会在里面发现他们写的各种技术文章，人生经历，思考，旅行，人文等等。各种类型的文章。自己平时工作中遇到的问题，也尝尝是从这些文章中获益。所以从那时候自己也开始去培养写博客的习惯。
刚开始写博客那会，写的大部分内容主要是技术文章，什么算法啊，Java 语言等等方面的知识。最近有回头去看看以前写的东西，从最基本的内容排版，文章内容结构去重新审视，比较粗糙。但是通过近 3 年来自己的断断续续的坚持，发现在写东西方面还是有一些进步。从最开始的写技术，到现在我会写写自己对业界的见闻和看法，会写旅行日记，会写一些思考。技术文章也比以前更有章法，内容组织的也更好。
这么久的坚持，我是深深感受到了坚持写作中的受益是巨大的。我就简单的罗列几条。
一、增强了自身的语言表达能力写作是语言的另外一种表达方式，文字有文字的魅力。长期的写作，会锻炼自身语言文字的组织能力。有时候为了去表达清楚一个观点，知识点，你必须去精准，斟词酌句，理清逻辑，不然自己不清不楚，读的人更是一头雾水。所以长期在这种思维的自我要求下，对自身语言的掌控和表达方面一定会有很大的帮助。
二、行文内容的组织架构能力有时候想要去讲清楚一个知识点，观点的时候，为了达到更好的效果，便会理清整个文章的逻辑，模块，然后按模块填充文章的内容，就好比书本的目录一样。这是一个非常好的习惯，让我今后去表述的时候回提前就思考的事情，这种思维模式对工作十分有帮助。
三、思考沉淀的好方式 有很多人有些日记，笔记的习惯。而这些都是写作的一种。通过这种写作的方式，与自我对话，与自己内心对话的方式，可以更好的总结，反思，重新认识自己。能让我们队自身有更好的认知。
以上是我简单的罗列好处，其实写作的好处简直太多，就不在此一一列举了。希望自己能坚持，坚持到老！</description></item><item><title>又见南京 - JSConf 之行</title><link>//imziv.com/posts/2016/%E5%8F%88%E8%A7%81%E5%8D%97%E4%BA%AC-jsconf%E4%B9%8B%E8%A1%8C/</link><pubDate>Tue, 06 Sep 2016 00:22:28 +0000</pubDate><guid>//imziv.com/posts/2016/%E5%8F%88%E8%A7%81%E5%8D%97%E4%BA%AC-jsconf%E4%B9%8B%E8%A1%8C/</guid><description>杭州因为这几天要举办G20峰会，所以杭州掀起了出行潮，为大会腾空间。在放假的前天我其实都未决定要离开杭州，准备留杭州泡泡图书馆什么的。而在一顿中午饭过后，得知能聚集人的地方都得关门，我便匆忙的在 12306APP 上购买了回武汉的车票，决定回家。因为票买的太晚，显然这个时候回武汉的车票早已售罄，我便买了一张杭州出发到南京南，然后准备从南京南转车回武汉。
记得在放假前几天我在公司群里跟小伙伴分享了JSConf在南京举办的消息，并且正好在G20我们放假期间。并且我们开发组尊崇的Vuejs的作者尤雨溪大神也会过来，分享关于Vuejs2.0相关的主题。然而JSConf官网上的门票已经早早卖完了。所以当时也并没有多想了。而且由于过去的一些参会经历，我对这种会议并没有太多好的印象。所以当时并未太想参与。
当我乘上动车，在抵达南京前，看到几个技术圈里面都在讲明天再南京举办的JSConf的事情，而我想想我回武汉后只能呆在我姐家中，也并没有什么事情可做。所以遂想既然我都要到南京了，就不回去了吧，反正这座城市我也不陌生，不如就去参加JSConf吧，顺便见见老同学，老朋友。没有门票，我想，总会有办法的。
一切都来得太突然，从中午我突然决定买票回家，然后并在回家的途中，又突然决定在南京停留。这 2 次突然的决定我自己都决定有点随性。不过所幸的是，我突然联系在南京的同学，将可能在他那边宿留的消息告诉他后，并得到了肯定肯定的回答。而第二天，我又幸运的从一位因病不能参会的 JSER 手中获得了一张早鸟票（只有 300 元，其他的票都 4 到 5 百左右）.一切都太突然，而一切又如此顺理成章。
体验过南京的便捷地铁后，真的不得不吐槽下杭州地铁方面的落后。当然多达 20 多个出站口的新街口地铁站，依然让我找不着北，纵使我是一个方向感比较好的人。出了新街口地铁站，各种高楼大厦汇聚眼前，颇有纽约时代广场的感觉啊（哈哈，我并没有去过纽约时代广场，随意意淫）。秋天的玄武湖，满是金黄的银杏叶，非常漂亮。春秋季节的紫金山，是南京市民户外散步，骑车，放风筝，爬山的好去处。南京与武汉很像，大学城。像历史悠久的南大，美女如云文艺气息浓厚的南师大等等。更是有例如张嘉佳，李志，先锋书店这等文艺典范。总而言之，众多的因素，促使了南京这座城市的浓郁的文艺气息。
JSConf 还是比我想象中的要好的，还是挺有收获的。不管是干货还是湿货，我觉得这次 JSConf 之行对我而言是次挺难忘的经历。具体的技术点梳理，知乎已经有很多不错的回答了。而且这次来此 Facebook 的分享嘉宾James Kyle的 Presentation 着实把大家的研究给辣瞎了。本身也在知乎上回复了关于自己 Presentation 的看法(详情可以点击)。参加 JSConf 前，我也就参加过 D2 前端论坛，基本上其他大大小小的也参与过，也看过不少视频，很多的感觉并不是太好。但是这次我还是看到了很多不同东西，看到了很多分享嘉宾大老远从地球的一端飞过来，而给我们分享的内容也就那么几十分钟，其实这一切都挺不易的。具体的技术内容我就不讲了，嘉宾各具特色，精美的 PPT, 各类的开发者，有高中生，还有类似医生转开发者的，还有拖家带口的，例如朴灵大大，当然还有在大会上直接点评甚至喷嘉宾的那位童鞋，等等。很多的因素，让我除了技术上的收获外，更多的是体会到了这个社区很多不一样的一面，很多东西变得更立体，更鲜活。
另外这次也跟很多开发者也相互交流过自己所在做的东西，所用到的技术，然后相互获取一些灵感。我觉得这种大会除去一些干货以外，更多的是提供一种平台，促成许多面对面的交流，然后认识一些新的朋友。毕竟线上和现实还是有区别的。
嗯，最后希望 JSConf 越办越好， 南京，再见。</description></item><item><title>不要给自己制造过多的心理包袱</title><link>//imziv.com/posts/2016/%E4%B8%8D%E8%A6%81%E7%BB%99%E8%87%AA%E5%B7%B1%E5%88%B6%E9%80%A0%E8%BF%87%E5%A4%9A%E7%9A%84%E5%BF%83%E7%90%86%E5%8C%85%E8%A2%B1/</link><pubDate>Mon, 01 Aug 2016 00:38:08 +0000</pubDate><guid>//imziv.com/posts/2016/%E4%B8%8D%E8%A6%81%E7%BB%99%E8%87%AA%E5%B7%B1%E5%88%B6%E9%80%A0%E8%BF%87%E5%A4%9A%E7%9A%84%E5%BF%83%E7%90%86%E5%8C%85%E8%A2%B1/</guid><description>碰巧在《旅行的艺术》中读到斯曼的小说《逆流》的故事，主人公是一个愤世嫉俗的人，为了避免遇见他所认为人的丑陋和愚蠢，便足不出户，一人呆在家里阅读各种文学经典。突然某天透过狄更新的小说，被书中描述的伦敦所吸引，所以决定亲自去伦敦一睹真容。于是他换上了行装，坐火车到达了巴黎。然而就在开往伦敦的火车发车前，他突然想到到达伦敦后会面对各种吃穿住行的问题，脑补到各种不好的情况，于是思考一番后，觉着通过书籍一样可以达到了解伦敦的各种情况，遂又决然的带着行李返回到了家中。
读到这个故事时候，我觉得跟生活中遇到的很多情况太相似了。当我们原本想去做一件事后，如果思考过多，带来了过度的思想包袱，很容易造成这件事情最后不了了之。但是如果当你对某个想法付诸实践行动后，由于现实的情况太过复杂，往往碰到的情况会大大超过你的预期，往往会造成开始即结束的局面。例如像天气，心情，甚至一阵风这样的因素都能影响你所要做的事情的方向和结果，就像蝴蝶效应一样。所以过高的心理预期，往往会阻碍事情的发生和发展。我们可以列举几个生活中的例子。
例如和朋友出去游玩，出发前被各大旅游网站的宣传照片和文字描述所深深打动和吸引，很容易产生过高的预期，一切都想起起来那么美好。然而很可能当你从出门的那一刻开始，一切都变得可能不那么美好了。因为有可能一出门你就会碰到诸如堵车，需要乘坐长途汽车等等令人焦虑和疲乏的事情。当你抵达景点后，你很可能会发现，实际的风景好像和照片上的有出入，没有想象的那么震撼，为什么我拍不出宣传图上的效果。然后你可能会在某个景区走上一整天，人山人海，据说的美食并没有你想象中该有的味道。心里面有那么一刻：“我这个 SB 为什么不呆在家睡觉&amp;quot;的感觉。
又譬如曾经喜爱的小说要被改编成影视作品了。曾经看这部小说的时候，自己被感动的泪流满面，被故事的构思和情节所深深吸引，你甚至幻想过这些事情发生在自己身上。你用自己的想象力完成了男女主角的塑造，在自己内心烙上了深深的印记。当改编好的作品被搬上银幕时，你发现男主角是自己讨厌的演员，你感觉故事情节好像没有原小说那么感人深受，而宣传方所谓的大片效果也只值 5 毛钱，跟自己的想象的画面大相径庭。总之，你很失望，以致后来你对此类作品越来越不抱有任何期待，也越来越少的去影院类似小说改编的影视作品了。
当期望的事情总不能完成或者实现后，这样很容易让生活堆积空虚的情绪。
有时候周末会有些想法想去做，但最后都会由于各种原因而放弃。很多时候都是由于自己过多的思考，产生了心理包袱，从一开始的兴奋，到决定放弃。当然我并不是说当我们有想法做些事情的时候，就不需要理性的去思考，只是想说思考也需要克制，不要给自己设置过高的期望值，也不要给自己造成过度的心理负担，这个度掌握能力是需要长期锻炼的。然而当事情如果已经发生时，我们应该积极的响应，而不是发现跟预想不一样之后就选择逃避问题。既选之，则安之。</description></item><item><title>实现图片的异步加载</title><link>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%9A%84%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/</link><pubDate>Mon, 27 Jun 2016 11:01:48 +0000</pubDate><guid>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%9A%84%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/</guid><description>图片异步加载功能是现在 web 中非常常见的一个针对 web 做优化的方法。尤其是在移动端，面对大量的图片列表的时候，如果没有做相应的优化，会直接导致页面滑动和加载的卡顿，而且用户会莫名的发现当前应用占用的流量会很大，因为他可能都没有浏览到很多图片，而程序就自动加载了所以的图片，对于一个流量吃紧的人来讲，这个也是很讨厌的。所以实现按浏览需求加载时十分有必要的。
其实实现图片异步加载的核心思路十分简单，就是通过判断当图片元素是否出现在视窗范围内后，则去加载图片资源，否则不加载。所以我们需要首先解决判断 img 元素是否处于视图范围内的这个核心问题。让我们看看下面的图：
通过抓取 img 元素，js 提供了相应的方法让我们可以获取到 img 元素距离视图 top，和 left 的距离，viewport 的高度和宽度等数据。然后通过监听窗口滚动事件，当页面滚动的时候，我们就去动态检测 img 元素的 top 和 left 值，与视窗的高度和宽度作比较，从而判断当前的 img 是否处于视窗范围。计算如下：
处于垂直范围： 图片距离视窗顶部距离 &amp;gt; 0 &amp;amp;&amp;amp; 图片距离视窗顶部距离 &amp;lt;= 视窗高度 处于水平范围： 图片距离视窗左边距离 &amp;gt; 0 &amp;amp;&amp;amp; 图片距离视窗左边距离 &amp;lt;= 视窗宽度
解决了这个判断图片在可视范围内的核心问题后，那么其他的问题都是否简单了。我们看下详细代码：
获取视窗的高度和宽度 var _viewPortHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0), _viewPortWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0); 是否处于垂直范围 function isOnVerticalViewPort(ele) { var rect = ele.getBoundingClientRect(); // 获取距离视窗的位置信息 return rect.</description></item><item><title>Cordova 开发总结(插件篇）</title><link>//imziv.com/posts/2016/cordova-%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%E6%8F%92%E4%BB%B6%E7%AF%87/</link><pubDate>Fri, 24 Jun 2016 14:57:57 +0000</pubDate><guid>//imziv.com/posts/2016/cordova-%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%E6%8F%92%E4%BB%B6%E7%AF%87/</guid><description>最近刚刚做完一个用 Cordova 开发了一款电子商务的应用。在选用 Cordova 前，我有考察过，国内的 Appcan, Apicloud 等等的解决方案。其实 Appcan，ApiCloud 的混合方案挺完整的，从开发，框架，到打包测试，数据统计都包含了，但是我还是更倾向于开源的 Cordova, 我相信开源社区的力量应该更强大，所以最终选择了 Cordova 作为解决方案。事实上，我用 Cordova 开发遇到目前所以需要的插件都是可以通过 Google 查找到的。在此总结下我用到的插件。
Crosswalk 这是一个单独定制的 Webview 插件，包含了大部分最新的 HTML5 特性。Crosswork Cordova 插件目前只支持 Android, iOS 需要自己手动的集成。在如今安卓机这种测试机可以装一箱子都不止的情况下，使用统一的 Webview 是十分有必要的。可以避免大部分的兼容性问题，而且可以保持不错的性能。当然有个弊端就是添加这个插件，打包的 apk 会增加 20MB 左右。
极光推送(JPush) 极光的推送插件在 Cordova 上的集成也是非常的方便，顺利的话 1 个小时就可以搞定。刚开始的时候我还有点慌，担心推送插件的集成问题，没想到看了下官网，有从 Cordova 的集成版本，还支持自动安装。
切页转场动画 刚开始我利用 Angularjs 集成了 CSS3 的转场动画，打包跑在 iOS 上时其实还好，但是到 Android 端的时候，弊端尽显，实在不理想，最好我把转场动画都直接撤掉了，留下个 loading 动画。显然整个界面的切换就变的干巴巴了。最后找到com.telerik.plugins.nativepagetransitions这个转场插件。这个插件支持Slide,Flip,Fade, Drawer, Curl等 5 种效果，集成和调用也很简单。
键盘插件（Keyboard) 大家都知道在移动端调出键盘输入操作时，调出的键盘会挤出自己当前的界面，造成页面的样式错乱的问题。Keyboard 插件可以监听键盘的展示隐藏事件，禁止 input 时键盘出现界面滚动等等问题。
支付 Alipay 做移动应用肯定少不了支付，支付宝的 Cordova 插件其实很多，但我搜索了一圈还是这个比较好使~
总结 以上是我用的几个主要插件，因为 Cordova 里面像Camera, File, 其他类型的插件太多太多了。完全可以根据自己的喜好来选择。总而言之，Cordova 本身由于这么多年时间的积累，造就了它在插件等等资源上的很多的优势。另外，微软刚刚开源的Xamarin据说也是个非常不错的混合开发方案，用 C#编写源码， 有机会试试~</description></item><item><title>使用 iScroll 实现上拉或者下拉刷新</title><link>//imziv.com/posts/2016/%E4%BD%BF%E7%94%A8-iscroll-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E6%88%96%E8%80%85%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/</link><pubDate>Tue, 07 Jun 2016 11:56:52 +0000</pubDate><guid>//imziv.com/posts/2016/%E4%BD%BF%E7%94%A8-iscroll-%E5%AE%9E%E7%8E%B0%E4%B8%8A%E6%8B%89%E6%88%96%E8%80%85%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0/</guid><description>上拉或者下拉刷新的需求在移动端是非常常见的需求，大部分情况下，实现这个效果都使用网上现有的解决方案，例如有人使用swiper这个插件， 也有人使用iScroll这个滚动插件。本文的示例是利用 iscroll 实现的下拉刷新效果。
iScroll 简介 iScrool是目前最成熟的自定义滚动解决方案之一，在移动端和 PC 有很好的兼容性。iScroll 官方提供了 5 个不同的版本：
iscroll.js 通用版 包含了大部分公共特性 iscroll-lite.js 缩减版 削减了一些功能特性，例如：滚动条，鼠标滚轮等等 iscroll-probe.js 探索版 此版本可以满足你获取滚动条位置的需求。 iscroll-zoom.js 滚动缩放版 iscroll-infinite.js 无限制版 根据不同的需求，选择相应的版本，当前的示例中，我们选择的是iscroll-probe.js版。Gitbook 地址：iScroll API 中文版
详细使用 代码思路则是：利用监听滚动条的scroll事件，判断下拉或者上拉的距离，做上触发距离标记，当scrollEnd事件触发时，执行数据加载。让我们看核心部分代码：
HTML 代码结构 &amp;lt;div id=&amp;#34;MyScroller&amp;#34; class=&amp;#34;main&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;warpper&amp;#34;&amp;gt; &amp;lt;div id=&amp;#34;PullDown&amp;#34; class=&amp;#34;scroller-pullDown&amp;#34; style=&amp;#34;display: none;&amp;#34;&amp;gt; &amp;lt;img style=&amp;#34;width: 20px; height: 20px;&amp;#34; src=&amp;#34;rolling.svg&amp;#34; /&amp;gt; &amp;lt;span id=&amp;#34;pullDown-msg&amp;#34; class=&amp;#34;pull-down-msg&amp;#34;&amp;gt;下拉刷新&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;ul id=&amp;#34;Content&amp;#34; class=&amp;#34;dropdown-list&amp;#34;&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;div id=&amp;#34;PullUp&amp;#34; class=&amp;#34;scroller-pullUp&amp;#34; style=&amp;#34;display: none;&amp;#34;&amp;gt; &amp;lt;img style=&amp;#34;width: 20px; height: 20px;&amp;#34; src=&amp;#34;rolling.</description></item><item><title>实现 Checkbox 组件化(Component)</title><link>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0-checkbox-%E7%BB%84%E4%BB%B6%E5%8C%96component/</link><pubDate>Thu, 19 May 2016 19:53:50 +0000</pubDate><guid>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0-checkbox-%E7%BB%84%E4%BB%B6%E5%8C%96component/</guid><description/></item><item><title>CSS3 实现自定义 Checkbox</title><link>//imziv.com/posts/2016/css3-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89-checkbox/</link><pubDate>Sun, 17 Apr 2016 20:27:24 +0000</pubDate><guid>//imziv.com/posts/2016/css3-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89-checkbox/</guid><description>之前我写了一篇自定义 checkbox 的文章，通过 css3 实现自定义的 checkbox，并没有使用当今流行的 Reactjs, 或者 Vuejs 之类的进行组件化。但是很显然，这样封装的 checkbox 组件复用的时候非常麻烦。如果在新项目中使用的话，可能需要同时拷贝 css 和 html 文件进行整合。从 html 语义角度上讲，代码的易读性也不是很强，显然这样的组件显然不利于维护。
其实 Web Component 是前端界一直非常热衷的一个领域，因为原生的 HTML 在维护复杂网页应用时，实在是太差了。所以才出现了诸如 Google 的Ploymer、Facebook 的Reactjs等等。而且很多MVVM的框架也自带组件化的方案,例如Angularjs的指令，但貌似ng的这个用起来太复杂。用第三方组件化的框架去实现的话，你需要依赖框架本身很多东西，很多时候我们只是简单的几个组件，不是很大，也不是很多，所以为了保证组件的轻量，简单,其实这个时候我们并不想采用第三方的框架。接下来我会介绍使用Shadow DOM和registerElement的方式去实现组件化。
先看看实现后的调用方式：
&amp;lt;div class=&amp;#34;line&amp;#34;&amp;gt; &amp;lt;label&amp;gt;checkbox1 &amp;lt;/label&amp;gt; &amp;lt;check-box class=&amp;#34;mycheck&amp;#34; checked=&amp;#34;true&amp;#34; id=&amp;#34;ComCheckbox&amp;#34;&amp;gt;&amp;lt;/check-box&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;line&amp;#34;&amp;gt; &amp;lt;label&amp;gt;checkbox2 &amp;lt;/label&amp;gt; &amp;lt;check-box class=&amp;#34;mycheck&amp;#34; checked=&amp;#34;false&amp;#34; id=&amp;#34;ComCheckbox1&amp;#34; value=&amp;#34;2&amp;#34;&amp;gt;&amp;lt;/check-box&amp;gt; &amp;lt;/div&amp;gt; 看起来是不是很简洁，调用自定义的checkbox组件不需要那么多扰乱阅读的元素，只需要一个明确的check-box标签，既可以表示checkbox组件。效果如下：
好了看了效果，我们来看看具体怎么实现的吧。在线 demo 查看
组件的组成 通常情况下，我们一个组件一般是由html模板，css样式，js脚本逻辑三部分组成的。他们的作用我就不多废话了。至于当前组件的 css 样式自定义方法请看我上一篇文章CSS3 实现自定义 checkbox，这里我就不重复这部分了。
在项目工作区新建一个component-checkbox.html文件， 这个文件会被当做整个组件，在我们需要引用的页面中通过link标记动态的引入。 component-checkbox.html文件即包含了 HTML 模板，CSS 样式，JS 三个部分，他们在组件文件中的分布如下： &amp;lt;template&amp;gt; &amp;lt;style&amp;gt;// 放CSS样式定义&amp;lt;/style&amp;gt; // 放HTML标记 &amp;lt;/template&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; // JS脚本逻辑 &amp;lt;/script&amp;gt; 具体 HTML/CSS 定义 &amp;lt;template id=&amp;#34;CheckBox&amp;#34;&amp;gt; &amp;lt;style&amp;gt; .</description></item><item><title>老博客升级</title><link>//imziv.com/posts/2016/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7/</link><pubDate>Mon, 04 Apr 2016 23:55:53 +0000</pubDate><guid>//imziv.com/posts/2016/%E8%80%81%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7/</guid><description/></item><item><title>《江城》读后小记</title><link>//imziv.com/posts/2016/%E6%B1%9F%E5%9F%8E%E8%AF%BB%E5%90%8E%E5%B0%8F%E8%AE%B0/</link><pubDate>Sat, 23 Jan 2016 00:38:08 +0000</pubDate><guid>//imziv.com/posts/2016/%E6%B1%9F%E5%9F%8E%E8%AF%BB%E5%90%8E%E5%B0%8F%E8%AE%B0/</guid><description>当我将要读完这本书的时候，竟然产生了一种依依不舍的感觉，感觉何伟这个我们曾经走在一条道路上的朋友，终于告诉了我们，他要离我们而去了一样。
作者用自己的生活琐事记录了那个年代的中国，一个跌跌撞撞缓慢成长的中国。文中描述了很多关于文革后遗症，计划生育，重男轻女，三峡工程，人口贩子等等很典型的中国问题。让我感觉到比较悲哀的是，从作者到中国至离开到现在已经过去了几十年，很多问题依然典型，经济虽然增长很快，但文化，民智，思想觉悟却有时给人不进而退的错觉。
总之，很感激这本书让我从不同的角度去认识了自己所生存的环境。</description></item><item><title>2015 年终总结</title><link>//imziv.com/posts/2016/2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate><guid>//imziv.com/posts/2016/2015%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</guid><description>大概一年前，我感觉自己是个全才，我觉得自己什么都能干，服务端，设计，产品，前端。但是经过近一年的思考和学习，我逐渐发现当你打开其中一扇门之后，才发现门后的世界是如此之大，才知道自己在此之前一直连个门都没入。所以我觉得专注是如此的重要，会做一件事情和做好一件事情是如此的千差万别。
工作 总结过去一年，我觉得自己最大的变化就是从过去的一个半服务端开发半前端开发的角色转换为现在专注的前端。这是一个很挣扎的过程，记得在我刚开始学习编程的时候，当时的方向是 C++的，但是同样的再后来的不断学习接触过程当中，我后来选择了 Java 语言作为我后来的方向。
经过近 2 年多的工作，经过不断的尝试和摸索，发现自己对于用户体验上面的东西比较关注，而且自己是个比较爱创造的人，所以经过一段时间的思考，最后决定专注在前端上面。
或许有些人会问，你专注前端，那是不是以后就只是写些 Css HTML,Javascript 这些东西了。其实我觉得前端其实就是用户体验交互，而且我决定这么去理解一个前端的工作是比较浅显的认识，我们可以对自己的要求更高一些，也许工作中并不需要。前端工程师不仅仅只是写些 Javascript，CSS 之类的, 为了实现各种人机交互，用什么工具语言都有可能。重点是如何利用好手中的工具，实现理想的交互体验。
学习 我也是近一年才觉得豆瓣是个好东西，或者说是个很不错的产品。我在豆瓣书单上面收录了近 50 多本书（书单)，有一半计划读的，还有一部分是过去读过和近一年阅读的。本来计划的每晚睡前阅读一小时，并且能保持一定的阅读质量，但是发现自己每周能做到的部分不是很多，但是值得庆幸的是，这个习惯我是越来越适应，坚持阅读的感觉也比以前越来越好了。
在一年前，我觉得我低估了阅读和写作的力量，经过近一年的断断续续的坚持，我逐渐发现这种学习表达方式对自己的帮助非常大。不过我计划里是每两周出一篇文章，技术，看法，想法，任何东西都可以。但是回头看今年我才完成了 10 多篇，自控力需要进一步提高。
英语过去一年还是有明显的提升的，从之前看到英文就会有逃惧的心理，到如今至少能面对，并且能看懂一大部分，当然这显然还不够，需要做更多的努力。在学习英文方面期间还有段小插曲，去培训机构试上了几天，但是我发现以我目前的状态根本就不适合，所以最终放弃了。本身有指定学习计划，但是我根本就不能坚持，所以我还是想慢慢来，再和自己较较劲。
感情 经常有人说我是一个情商低的人，大概很多年前我并不认同这一观点，而且我从来没觉得我情商低，我一直认为你们所谓的那些情商只是对待事物的不同选择方式而已，而每个人都有自己的处事方式。但是经过近几年的社会漂泊，终于逐渐让我体会到自己在这方面的欠缺，尤其是在与异性的沟通交流上，我觉得自己还是有障碍的。我完全相信，女性是这个星球上最深奥难懂的生物。
但是作为一个，单身男，爱好女的人来讲，我不得不开始正视自己的问题，通过改变自身和学习去提高这方面的意识。我是个从未向人回避过我是有些大男子主义的男生，当然很多年前我并不知道这个形容词的意味。另一方面，我觉得个人过去的经历让我在感情方面多了很多顾虑，例如对感情不自信，不善表达，不够勇敢，又或者自以为是。
总而言之，单身给我带来的最大的好处就是，我有了更多时间学习和写代码。这也许是一种不错的自我安慰方式。
锻炼 以前有个毛病，喜欢想很多，想很久远的事情，但是我逐渐发现，想太多是一件很不好的事情，过多的事情的积压，会打击你的信心，从而让坚持变为一件很难的事情。例如，看到健身身材很棒的人，就会(ˇˍˇ） 想～立马也变成那样，所以兴奋的马上去办健身卡，到最后发现自己根本无法坚持。到如今我能坚持一周至少能保证两到三次的很小的锻炼，利用瑜伽垫进行 1 到 2 组的俯卧撑，仰卧起坐的锻炼，每次量也不大，20 到 30 个左右。虽然这种训练不能让我身材变的如何，但是我发现通过这种简单的轻松的习惯，让我的自控力有了提升。这种方法我也是通过《自控力》这本书中习来的。最关键的是，我发现这样一组运动后，我更有进入阅读或者学习的状态。另外，我最近也有坚持每周一次游泳，对于我们这种行业来讲，游泳是一种很不错的选择。
新年 另外对于现在的工作我想说的就是：“只有你想不到，没有我做不到”。 （牛 B 哄哄）
对于工作和生活来讲，去体验更多自己想做的事情，提高做事的效率，把现有的计划执行的更好，找到人生中的另一半这些都是我要做的事情。
有时候回头想想，觉得自己的生活很无聊，但是生活本身不就是枯燥的吗？学会在枯燥，浮躁的生活中寻得一份宁静，去体会生活，去改变和寻找自己本身，这本身就是一种修行。学会自娱自乐，学会发现和寻找生活中的乐趣，本身就是一件不易的事情。所以每次这样想来，也就能寻得一些自我慰藉了。</description></item><item><title>Cordova 开发环境的搭建</title><link>//imziv.com/posts/2015/cordova%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 23 Nov 2015 13:58:34 +0000</pubDate><guid>//imziv.com/posts/2015/cordova%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</guid><description>Cordova 为目前做混合式开发中比较受欢迎的一个解决方案了，并且拥有比较丰富的插件资源。本文介绍了 Cordova 开发的环境搭建过程。 由于 Cordova 命令行工具发布在了 npm 包管理平台上，npm 为 nodejs 内置的包管理工具，所以安装 cordova 前需要先确认你是否已经安装过 Nodejs。
Nodejs 安装 打开 Nodejs 官网下载页，根据自己当前的操作系统平台，选择对应的 nodejs 版本，下载完后直接点击安装程序，下一步完成即可。测试 nodejs 安装，打开控制台，输入：
node -v // 查看node版本plain npm -v // 查看npm版本 如果控制台成功输出当前程序安装的版本，那么你已经安装成功了。
Nodejs 版本管理工具(Nvm) 由于 Nodejs 目前的更迭速度很快，有时候项目组人员的版本可能各不相同，为了避免出现不必要的问题，尽量统一管理 node 的版本，所以我们需要 nvm 这样一个版本管理工具，来轻松的达到自由切换 nodejs 和 npm 版本的问题。
Linux 平台，Mac 安装和更新 curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh | bash 或者
wget -qO- &amp;lt;https://raw.githubusercontent.com/creationix/nvm/v0.29.0/install.sh&amp;gt; | bashplain 打开控制台输
nvm --version // 查看nvm版本 如果成功输出，那么 nvm 就安装成功了。更多的 nvm 可以在控制台通过 nvm &amp;ndash;help 查看。</description></item><item><title>Atom 在 Ubuntu 上中文乱码解决</title><link>//imziv.com/posts/2015/atom%E5%9C%A8ubuntu%E4%B8%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</link><pubDate>Wed, 05 Aug 2015 14:18:33 +0000</pubDate><guid>//imziv.com/posts/2015/atom%E5%9C%A8ubuntu%E4%B8%8A%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</guid><description>之前一直用的是 Sublime Text2, 但是 Sublime 在 Ubuntu 上不支持中文输入,着实让人蛋疼,当然也有一些解决方案,我都试过,比较麻烦.得知 Atom 即将发布 1.0, 所以下载了 Atom 0.9 多的版本,但是同样发现中文乱码.以下记录了 Atom 0.9 以及 1.0 版本在 Ubuntu 上的方块乱码以及 markdown-preview 乱码的解决方法.
Atom 乱码解决 首先你的确认你电脑上面是否安装过文泉驿正黑字体,默认情况下 Ubuntu 是没有这个字体的,所以如果没有那么请使用以下命令安装:
sudo apt-get install ttf-wqy-* 安装完成后或者确认已安装改字体的情况下, 使用快捷键&amp;rsquo;ctrl + ,&amp;rsquo; 或者点击&amp;rsquo;edit &amp;gt; Perferences &amp;gt; setting&amp;rsquo;, 找到&amp;rsquo;Editor Settings&amp;rsquo;下的&amp;rsquo;font-family&amp;rsquo;, 然后设置其字体为:
&amp;#39;DejaVu Sans Mono&amp;#39;, &amp;#39;文泉驿正黑&amp;#39; 然后查看下编辑器中文乱码是否已经显示正常.
markdown-preview 乱码
得知 Atom 自带 markdown 实时预览功能, 我也是很开心. 但是使用后发现, markdown-preview 也出现乱码问题. 我当时 0.9 版本上面进行设置的, 后来更新到 1.0 版本后,发现之前的设置都失效了.所以下面两种方式都会列出来.
老版本版本 由于 markdown-preview 是读取插件本身的样式, 所以在这里我们是手动更改插件的字体样式为&amp;rsquo;DejaVu Sans Mono&amp;rsquo;, &amp;lsquo;文泉驿正黑&amp;rsquo;即可</description></item><item><title>小游厦门</title><link>//imziv.com/posts/2015/%E5%B0%8F%E6%B8%B8%E5%8E%A6%E9%97%A8/</link><pubDate>Mon, 27 Jul 2015 23:53:20 +0000</pubDate><guid>//imziv.com/posts/2015/%E5%B0%8F%E6%B8%B8%E5%8E%A6%E9%97%A8/</guid><description>说起厦门，大家自然而然的就会想到厦门大学,鼓浪屿,厦门国际马拉松赛等等标志性的词语。厦门市的别称叫“鹭岛”，据说以前是白鹭的栖息之地，不过这次旅途当中我倒是一只白鹭也没见到，不知是季节的原因还是环境原因。
厦门大学 最早接触到厦门这座城市还是当年初中（已记不太清）时，通过中央 3 套的《同一首歌-走进厦门大学》这个节目认识的，当时通过电视机里面的镜头，给我展示了一个美丽，清新的印象，所以我当时甚至还告诉自己，以后我也要去厦门大学念书，可惜当年不努力，沦落成了学渣。
厦门大学的校区众多，正如我当时座公交听到当地人所说的一样，整个厦门市到处都是厦大建的房子，可见厦大在整个厦门市的地位。现如今到厦门旅游的游客众多，厦大已成为游客去厦门旅游必去的景点之一。而厦门大学现在更是被冠上了&amp;quot;恋爱圣地”， “谈恋爱，到厦大”等等标签，许多旅游网站都是打着这样宣传标语。
芙蓉湖里的黑天鹅
体育场
在我们打车去厦大途中得知，厦大采取了每日限额参观，去厦门大学（思明校区）需要刷身份证进入，入口则是厦大群贤校门，其他入口貌似不能进，所以千万别走错了。
芙蓉隧道是厦大另一个有意思的地方，隧道墙壁上被学生涂鸦绘画了各种图案，有我们熟悉的卡通动漫，也有自己创作的。据说大部分都是毕业学生的作品，以此来告别自己生活四年的大学时光。
高数不会离开你
小卡通
由于这次出行比较匆忙，去厦大安排的时间并不是很充足，所以很多地方也没有细逛。
鼓浪屿 鼓浪屿是厦门旅游路线中另一个重要的点。鼓浪屿有“钢琴之乡”，“音乐之乡”等等的名头，这与岛上很有艺术风格的建筑还是比较相称的。小岛上的民居错落有致，很多建筑也是中西结合，各种穿插的小巷，这里面的街道布满了各种小吃，小玩意，台湾小商品，显的比较文艺清新。登上日光岩，可以俯瞰大半个厦门和整个鼓浪屿，整好我们去的那天天气晴朗，视野十分开阔，整体上给人的感觉还是比较棒的。
日光岩俯瞰
世界很大，我想去看看
萌萌哒
曾厝垵 曾厝（cuo)垵是我们这次旅程的住宿的地方,在去之前这个字(厝）我还不认识 0.0。选这个地点主要有几个好处，曾厝垵门口就是环岛南路，29 路公交到达的景点很多,包括去中山路和一号码头，而门口就是海边沙滩。从厦门北站有到曾厝垵的旅行大巴，20 块一个人，不过返回的时候则是 30 块，大巴到机场饶了一圈，赶时间的朋友要记得划算，到北站需要一个半小时左右。曾厝垵同样是一个小吃遍地的地方，错综复杂的小街里面各种海鲜小吃，酒吧，对了，之前在微博看到大冰在厦门新开了一个“大冰的小屋”没想到就在这里，所以我们当天晚上去街上扫完吃的后就去这个民谣小屋座了半天，听了听音乐和他们的吹牛 X。
曾厝垵
大冰的小屋
雨后的小街
陶吧小体验
注意事项&amp;amp;总结 由于厦门旅游的各种开发，游人的增多，当地环境保护的欠缺，我们在鼓浪屿旁边的沙滩游玩时，发现海水里面各种垃圾不断漂浮到沙滩上，着实很脏。在网络上定住宿的地方还是得仔细谨慎些，照片还是很容易糊弄人的，这个我们吃了些小亏，也是长了记性。厦门的黄牛疯狂，去厦大可以找黄牛不用排队，去鼓浪屿的门票本来 35 元硬是吵到了 100~150 甚至更高。这些黄牛先通过刷票攒到自己手中，然后当游客去轮渡中心购票时发现没票，这一点也是我们之前没有仔细搞清楚的地方，吃了个亏，票也是从黄牛手里面买的。所以去游玩的朋友一定要注意，尽量提交订票，甚至找旅行社。还有就是去鼓浪屿岛上游玩的景点同样是需要门票的，这个也应该提交网上订好，到岛上去了以后再领。
另一个坑人的地方，由于从鼓浪屿返回的人众多，所以排队轮渡情况糟糕的话要花上 2~3 个小时，但是这些黄牛却说可以快速上传。后来由于实在是时间原因，我们花了 40 块，最后得知他们只是给我们带到了一个叫內厝澳码头的地方，这个地方基本上人来就可以上船，排队很快。原来只要通过身份证购票的游客，都可以通过这些提供刷卡的码头，大部分游客不知，便都挤到了三秋田码头。所以很坑啊~
总之厦门还是一个值得去的地方，如今每个旅游城市人都是很多，很多情况需要做好心理准备，还有旅游攻略，像我们上面碰到的坑都是功课没有做足的后果。如果提前预防了这些问题，那么整个行程的麻烦将会少上许多，影响心情的因素自然也会少上一些。
最后放几张美食照：
大肠包小肠
榴莲酥
海鲜排挡
2015/07/27 于杭州</description></item><item><title>使用网易云音乐，丢掉 QQ 音乐吧</title><link>//imziv.com/posts/2015/%E4%BD%BF%E7%94%A8%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%A2%E6%8E%89qq%E9%9F%B3%E4%B9%90%E5%90%A7/</link><pubDate>Thu, 28 May 2015 23:07:27 +0000</pubDate><guid>//imziv.com/posts/2015/%E4%BD%BF%E7%94%A8%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90%E4%B8%A2%E6%8E%89qq%E9%9F%B3%E4%B9%90%E5%90%A7/</guid><description>我是一个听音乐的重度用户，基本上每天大约有三分之一的时间里我在使用网易云音乐去听音乐。包括工作写代码的时候，跑步的时候，去上班的途中我都去听。首先需要声明的是，在这里我不是故意的去抹黑其他的音乐产品，我只是谈谈我一个真实用户的真切感受。 由于喜欢听音乐的原因，自从开始接触互联网后，我便开始接触了很多音乐播放类产品，从早期的千千静听，酷我音乐，酷狗音乐，QQ 音乐，豆瓣 FM，虾米音乐，JingFM, 多米音乐，落网等等，有太多的音乐产品，我都数不过来。其实不难看出，网易做音乐类产品还是近两年才发力，早期根本没有涉足此类的音乐市场，除了给我印象深刻的网易邮箱里内置的在线音乐播放器以外。
在使用网易云音乐之前，豆瓣 FM 和 QQ 音乐是我主要的听音乐产品。豆瓣给人的印象就是，小资，独立，经常可以听到和发现一些市面上比较小众，但是又很耐人寻味的音乐，而且豆瓣本身就聚集了一大批的热爱文艺的人，所以如果你遇上喜爱曲风相近的人，那么分享出来的音乐也就比较容易合你的胃口。QQ 音乐由于与 QQ 账号绑定的原因，早期的时候，结合 QQ 客户端，它的账号同步功能占了很大的优势，而且利用 QQ 社交的影响，加上它足够丰富的曲库，让大部分用户都难以割舍它。但是这些并不能掩饰 QQ 音乐是一个做的比较烂的产品。我相信那时很大一部分音乐重度用户泡在虾米和豆瓣上。而今天我主要讨论的产品则是网易云音乐和 QQ 音乐。
产品外观 相信使用过网易云音乐产品的朋友第一次都会被其整洁，简练，精致的的外观所吸引，从整个 Web 产品到 PC 端，移动应用，都保持着高度一致的美感。其标准性的碟片播放界面十分讨用户喜爱，罗永浩（这个人比较凶悍）甚至直接在锤子手机中引入了网易云音乐。而反观 QQ 音乐层次不齐，细节上面远远没有网易云音乐用心。外观对于一款产品的作用的不言而喻的，就好比你第一次见到两道菜，你肯定会更倾向于菜色更佳的，当然你也会说，光看菜色不行啊，口感才是最重要的，而不巧的是，网易云音乐的口感同样于外观一样出色。
网易云音乐
QQ 音乐
以上只是两个 PC 端的一角，我记得之前的 QQ 音乐客户端不是长这样的，也不知道是不是参考过网易云音乐 0.0。
内容 如果说像豆瓣，落网这种音乐产品适合那些喜欢小资，独立且口味挑剔的用户的话，那么网易云音乐则是包揽各种类型，但是网易云音乐比较人性化的一个地方就是，他会通过你听音乐的喜欢，通过云端的计算帮你推荐适合你口味的歌单。歌单这东西其实 QQ 音乐和其他同类型的音乐产品早就有的东西，但是 QQ 音乐的这个功能真的不好用！网易云音乐对用户提出的歌曲，歌词补充，歌词翻译也是有求必应，响应的很及时，在知乎上经常可以看到用户对网易这一点而赞不绝口。
网易云音乐的每首歌曲下面的评论面板也是一大特色，继承了网易新闻评论面板的基因。经常能看到很多有趣，感同身受的人。音乐本身就是很神奇的东西，当你感受到欢喜，悲伤等等情绪或者其他美妙的时刻时，有时候也想找人分享这一刻你的感受，而在评论面板上面你可以找到一批这样的人！
网易云音乐还有一大特点就是，上面音乐的音质都很不错，相较于 QQ 音乐来讲，还没做好就开始想让我们冲绿钻来体验，网易简直就是太有良心了。还有就是应用上面的 MV,配合着漂亮的应用界面，简直就是相当享受。总之，在网易云音乐上，你想听老歌，小资，乡村迪斯科（《我的滑板鞋》之类），还是乡村音乐，另类偏门，总之基本上你全都能找到。而且网易云音乐上现今的 DJ 节目同样做的很出色，简直就是应有尽有，关键是主动帮您挑选。
网易云音乐同样引入了不错的社交，除了刚才上面提到的评论功能，其使用了开放的注册策略，微博，自家的网易账号，腾讯微博，手机账号等等，并不像 QQ 等其他产品，封闭的只能使用 QQ。虽然没有 QQ 音乐天然的社交优势，但是在网易云音乐上，同样依靠这这些开放的注册策略，你可以关注一些有同样音乐类型的人，听他们分享的音乐。
为什么我要写这篇文章 前段时间，微信，QQZone 利用自己垄断的优势，直接屏蔽了网易云音乐其重要的分享社交功能，虽然网易云音乐通过一些方式实现了微信上面的分享，但是 QQZone 直接过滤了。本来用户想和其他人分享自己的心情，分享好的音乐的，这样利用自己的垄断打击竞争对手，完全不顾用户的感受，简直是可耻！如果自家产品用心，让用户感受到用心的话，我相信像网易这种后起之秀是根本不会得到任何机会的，只怪自己产品太烂，为用户做的太少，最后利用这种手段，实在让人心寒，国内的互联网公司就这种尿性吗?
最后说一句：
赶紧卸掉 QQ 音乐吧！</description></item><item><title>HTML5 文件异步上传 — h5uploader.js</title><link>//imziv.com/posts/2015/html5-%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0-h5uploader.js/</link><pubDate>Thu, 07 May 2015 23:11:53 +0000</pubDate><guid>//imziv.com/posts/2015/html5-%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0-h5uploader.js/</guid><description>之前写过一篇 H5 异步文件上传的文章, 但是很多朋友看着我的这个教程还是出现很多问题，文章写的不是很好，比较早了。其实通过 H5 做异步上传已经非常简单了，通过查看文档，便可以很轻松的完成这个功能，当然，如果你不愿意查看文档自己动手的话，那么就用插件咯。h5uploader是我最近封装的 HTML5 上传插件，代码才白来行，使用的话也比较简单，支持文件大小，类型，progress 等等功能。本篇教程，将向你展示 Nodejs,Java 两种服务端的上传方法，并且附有源代码示例。
插件下载 如果你是bower的用户的话，可以直接通过以下命令：
bower install h5uploader --save 当然也可以直接从 Github Clone 此项目：
git clone https://github.com/wewoor/h5uploader.git HTML 代码 &amp;lt;input type=&amp;#34;file&amp;#34; id=&amp;#34;myfile&amp;#34; value=&amp;#34;&amp;#34; name=&amp;#34;myfile&amp;#34; multiple=&amp;#34;multiple&amp;#34;/&amp;gt; &amp;lt;button id=&amp;#34;uploader&amp;#34;&amp;gt;Upload&amp;lt;/button&amp;gt; 以上是一个 file 类型的 input 元素以及一个上传触发按钮，后面带有 multiple 属性，表示次处支持文件多选上传，当然，你也可以一次提交多个 input 元素，例如：
&amp;lt;input type=&amp;#34;file&amp;#34; id=&amp;#34;myfile&amp;#34; value=&amp;#34;&amp;#34; name=&amp;#34;myfile&amp;#34; multiple=&amp;#34;multiple&amp;#34;/&amp;gt; &amp;lt;input type=&amp;#34;file1&amp;#34; id=&amp;#34;myfile1&amp;#34; value=&amp;#34;&amp;#34; name=&amp;#34;myfile&amp;#34; multiple=&amp;#34;multiple&amp;#34;/&amp;gt; &amp;lt;button id=&amp;#34;uploader&amp;#34;&amp;gt;Upload&amp;lt;/button&amp;gt; 这种方法同样是可以的，只不过服务端解析的时候要更麻烦。
Javascript &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;html5uploader.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; var uploader = document.getElementById(&amp;#39;uploader&amp;#39;); uploader.addEventListener(&amp;#34;click&amp;#34;, function(e) { H5Uploader.</description></item><item><title>利用 Gulp 优化部署 Web 项目</title><link>//imziv.com/posts/2015/%E5%88%A9%E7%94%A8gulp%E4%BC%98%E5%8C%96%E9%83%A8%E7%BD%B2web%E9%A1%B9%E7%9B%AE/</link><pubDate>Sun, 26 Apr 2015 11:27:16 +0000</pubDate><guid>//imziv.com/posts/2015/%E5%88%A9%E7%94%A8gulp%E4%BC%98%E5%8C%96%E9%83%A8%E7%BD%B2web%E9%A1%B9%E7%9B%AE/</guid><description>Gulp Gulp是一款项目自动化的构建工具，与Grunt一样可以通过创建任务（Task）来帮助我们自动完成一些工作流的内容。当然，今天我们的内容并不是讨论这二者的区别，仅仅是介绍介绍如何利用 Gulp 来优化我们的 Web 项目中前端自动化工作流。
引言 相信不少人看过百度大牛张云龙的那篇讲解大公司里怎样开发和部署前端代码?的文章，如果没有阅读的朋友请戳。由于在项目部署时，我们需要对项目 js，css,image 等文件进行压缩，合并处理，从而减少客户端对服务 Http 请求，已达到增强页面的加载速度，优化服务器带宽压力等等目的。所以本文主要讲的是利用 Gulp 优化我们 Web 部署优化工作。
安装&amp;amp;初始化 首先你得确保你的电脑上面是否已经安装了 Nodejs, 如果没有安装的话，那么请移步。假定有如下一个 Nodejs 的 Web 项目（当然你也可以是其他的例如 Java，.Net 的 Web 项目，且具体开发目录如下：
|- project |- src // 前端项目的源文件 |- js |- html |- images |- css |- bower_component // bower 前端依赖包管理 |- node_component // nodejs 插件 |- server |- api |- views |- app |- assets // 前端静态文件存放目录 |- js |- css |- images |- templates |- .</description></item><item><title>利用 javascript 和 WebGL 绘制地球 【翻译】</title><link>//imziv.com/posts/2015/%E5%88%A9%E7%94%A8javascript%E5%92%8Cwebgl%E7%BB%98%E5%88%B6%E5%9C%B0%E7%90%83-%E7%BF%BB%E8%AF%91/</link><pubDate>Sun, 22 Mar 2015 01:43:59 +0000</pubDate><guid>//imziv.com/posts/2015/%E5%88%A9%E7%94%A8javascript%E5%92%8Cwebgl%E7%BB%98%E5%88%B6%E5%9C%B0%E7%90%83-%E7%BF%BB%E8%AF%91/</guid><description>原翻译：利用 javascript 和 WebGL 绘制地球 【翻译】
在我们所有已知的 HTML5API 中，WebGL可能是最有意思的一个，利用这个 API 我们能够在浏览器中创造出炫酷 3D 场景的能力。本文将完整的向你展示一些炫酷是如何实现的。
需要特别指出的是，这篇教程我们将会构建一个地球行星模型，这个模型可以像一个兴奋的人一样环绕的旋转，另外，它可能使我们可以获得一些其他程序员的称赞，好吧，就这么多了。
准备 这篇教程我们将会用到一个令人着迷的WebGL插件:three.js. 这个插件跟 JQuery 有点像，不过它是针对WebGL的，它将很多复杂的原生 API 访问接口进行了抽象，从而让我们可以更轻易的利用WebGL的特性。
在 HTML 中，我们的可以通过正常的 script 标签引入这个插件，如下：
&amp;lt;script src=&amp;#34;//cdnjs.cloudflare.com/ajax/libs/three.js/r63/three.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 此处我们引用的是 CDN 版本，如果你有必要，可以使用本地的方法引入。然后我们需要确保WebGL有东西可以在上面进行渲染。这里我们有个灵活的做法：我们可以直接将一般的 Div 或者 Canvas 写到 HTML 中，或者我们可以另外用 JS 创建并且追加 canvas 元素到 Dom 里后再去渲染。这里我们采用第一种容易点的方法，如下：
&amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;container&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;earth.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; 添加完script标签连接到 Dom 中后，我们的 HTML 部分差不多就完成了。
下一步 Tree.js 本身是趋向把东西做的非常接近真实的 3D 桌面程序的。我们拥有一个场景，有一些东西现场直播，然后通过摄像机去浏览，然后有些灯光，特效，渲染在整场景上面，当然他们自身也全都是 3D 对象。这个场景的元素列表似乎有点吓人，在我们的earth.js文件里，所有的这些元素都可以当成形状变量，Javascript文件如下：
var scene, camera, light, renderer, earthObject; var WIDTH = window.</description></item><item><title>随笔-家</title><link>//imziv.com/posts/2015/html5-%E5%85%A8%E5%B1%8F%E7%89%B9%E6%80%A7/</link><pubDate>Sat, 24 Jan 2015 21:56:59 +0000</pubDate><guid>//imziv.com/posts/2015/html5-%E5%85%A8%E5%B1%8F%E7%89%B9%E6%80%A7/</guid><description>全屏功能是浏览器很早就支持的一项功能了，可以让你页面中的 video, image ,div 等等子元素实现全屏浏览，从而带来更好的视觉体验，来看看怎么使用吧。先来看看有哪些 API 和事件支持。
API // 元素请求全屏显示 element.requestFullscreen() // 检测文档的当前状态是否允许执行全屏操作 document.fullscreenEnabled() //当前显示的元素是否处于全屏状态，如果处于，则返回为非空对象，否则返回null document.fullscreenElement() //元素退出全屏显示 document.exitFullscreen() 上面除了RequestFullscreen()是支持element 对象以外，其他 3 个都只是支持document.
Event fullscreenchange // 全屏状态更改时触发 fullscreenerror // 执行全屏错误时触发 由于每个浏览器实现的方式不一样，所以我们实际的调用中还不能直接这样写，需要针对不同的浏览器做支持检测，下面跟着详细的例子看下具体兼容代码。
html &amp;lt;body&amp;gt; &amp;lt;img id=&amp;#34;imgFS&amp;#34; src=&amp;#34;&amp;#34;/&amp;gt; &amp;lt;a id=&amp;#34;btnFS&amp;#34; href=&amp;#34;javascript:;&amp;#34;&amp;gt; FullScreen &amp;lt;/a&amp;gt; &amp;lt;/body&amp;gt; javascript var fullScreen = document.getElementById(&amp;#39;btnFS&amp;#39;); fullScreen.addEventListener(&amp;#34;click&amp;#34;, function(){ var status = document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullscreenEnabled || document.msFullscrrenEnabled; if (status) { var img = document.getElementById(&amp;#34;imgFS&amp;#34;); if (img.requestFullscreen) { img.requestFullscreen(); } else if (img.</description></item><item><title>随笔-家</title><link>//imziv.com/posts/2015/%E9%9A%8F%E7%AC%94-%E5%AE%B6/</link><pubDate>Mon, 12 Jan 2015 23:07:08 +0000</pubDate><guid>//imziv.com/posts/2015/%E9%9A%8F%E7%AC%94-%E5%AE%B6/</guid><description>最近大家都又开始在 12306 上面开始抢火车票，不禁又提醒我 2014 年已经恰恰流逝。而春节又马上临近，是时候开始买回家的车票了。
突然发觉不知从何时起，我变成了一个不那么爱回家的人了。记得初中那会儿，由于学校离家比较远，我们就开始寄宿学校了，初一初二的时候每周回家 2 次，到初三的时候基本就只能周五回家一次，每次从家补寄下周的粮食。那时候经常和同学下自习 8，9 点后骑自行车回家，穿梭在山边的公路上，伴着一点点月光，虽然路上很漆黑，但是还是会冒着黑夜回家。每次周五放学，都是迫不及待，飞奔着跑向宿舍，拿起行李就跑出了学校。
上高中了，这次离家更远了，到了市里的一所高中，每次一个月才能回家一次。前一年我跟初中的时候一样，每逢放假的时候，人都是飞奔出教室的，然后跑进宿舍楼，然后飞出校门，飞进汽车站。后来大二开始，母亲和父亲一同外出打工后，我就开始很少回家了。后来是每次放假，我也不着急了，站在教学楼上看着放假后那些兴奋回家的同学们，直到操场上面寥寥几个人。每次暑假，也就回老家短暂的住上三，二日，便开始了暑假打工的生活。事实上暑期打工从我初中一毕业就开始了，一直到我大学毕业正式参加工作。
后来上大学了，相较于那些跨省上学的同学来说，我离家还是比较近的，但是由于父母常年不在老家，所以我也只是像清明节或者其他假期才会回老家住上几晚。这样算下来一年也回不了几次家，算上春节，也就一个月的左右。而每次我发现我对家的依恋的感觉都变得越来越淡。
这几年感觉自己就像飘在外面一样，身上染上了很多坏毛病，不喜欢与父母交流，越是亲密的人我可能越是说话刻薄。有时候会很讨厌自己。有时候想改变，但是却不知道怎么改变，想去多关心关心父母，朋友，但是告诫过自己的，临场时确又回到了原点。
如今已经离开学校一年左右了，我从一陌生的城市来到了另外一座陌生的城市，曾经有想过回去，但是不知道为什么总有些力量吸引我继续这样的日子，也许是好奇心，也行是我太年轻。</description></item><item><title>NodeJS CSV 导出文件名和内容乱码解决</title><link>//imziv.com/posts/2014/nodejs-csv%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6%E5%90%8D%E5%92%8C%E5%86%85%E5%AE%B9%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</link><pubDate>Tue, 04 Nov 2014 15:29:19 +0000</pubDate><guid>//imziv.com/posts/2014/nodejs-csv%E5%AF%BC%E5%87%BA%E6%96%87%E4%BB%B6%E5%90%8D%E5%92%8C%E5%86%85%E5%AE%B9%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3/</guid><description>// 解决不同浏览器下载文件名称乱码 var userAgent = (req.headers[&amp;#39;user-agent&amp;#39;]||&amp;#39;&amp;#39;).toLowerCase(); res.set(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/octet-stream;charset=utf-8&amp;#39;); if(userAgent.indexOf(&amp;#39;msie&amp;#39;) &amp;gt;= 0 || userAgent.indexOf(&amp;#39;chrome&amp;#39;) &amp;gt;= 0) { res.setHeader(&amp;#39;Content-Disposition&amp;#39;, &amp;#39;attachment; filename=&amp;#39; + encodeURIComponent(filename)); } else if(userAgent.indexOf(&amp;#39;firefox&amp;#39;) &amp;gt;= 0) { res.setHeader(&amp;#39;Content-Disposition&amp;#39;, &amp;#39;attachment; filename*=&amp;#34;utf8\&amp;#39;\&amp;#39;&amp;#39; + encodeURIComponent(filename)+&amp;#39;&amp;#34;&amp;#39;); } else { res.setHeader(&amp;#39;Content-Disposition&amp;#39;, &amp;#39;attachment; filename=&amp;#39; + new Buffer(filename).toString(&amp;#39;binary&amp;#39;)); } // 解决excel打开内容乱码 var dataBuffer = Buffer.concat([new Buffer(&amp;#39;\xEF\xBB\xBF&amp;#39;, &amp;#39;binary&amp;#39;), new Buffer(data)]); res.send(dataBuffer);</description></item><item><title>Hybird App ( 混合模式移动应用)开发初体验</title><link>//imziv.com/posts/2014/hybird-app-%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%88%9D%E4%BD%93%E9%AA%8C/</link><pubDate>Tue, 28 Oct 2014 18:27:06 +0000</pubDate><guid>//imziv.com/posts/2014/hybird-app-%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%88%9D%E4%BD%93%E9%AA%8C/</guid><description>最近 1，2 个月一直都尝试开发一款 hybird app，遇到了很多问题，谈谈自己的体会。
Hybird app (混合模式移动应用），它利用例如安卓端 webview 组件+HTML5 内嵌的方式混合的方式开发的移动应用， 好处显而易见，由于内嵌的是 Html5, 所以跨平台，扩展性，开发成本都是很不错的优势。
Hybird App 拥有很多从开发工具到打包发布的解决方案，比较出名的是来自 Adobe 的 phonegap, 国内有 AppCan,这 2 种解决方案都有比较好的工具平台。这次我采用的的是 Appcan, 需要注意的是 Appcan 的开发工具只有 windows 平台的，另外不得不吐槽的是，方案里面集成的 js 插件脚本，bug 很多。
我采用的技术架构，如图：
其中利用 Appcan 作为应用的打包平台，通过其内置的 JS 组件进行数据请求，请求得到的数据利用 JS 做些业务逻辑处理后，使用 Angular 进行绑定渲染，UI 组件的东西则用的 GMU.js,而 gmu 内置了 zepto.js 和 scroll.js 等等, 页面则是 h5+css3。可以看到的是与传统的 web 相比，其中多了不少 js 框架和库的应用，毕竟把数据的调用和业务处理都移到了 JS 端，所以在这里提醒大家，可以考虑加入 js 模块管理的框架，例如 seajs。数据绑定这块感觉 Angular 真的很棒，写好绑定后，只需要专注后端 JS 数据的业务处理即可，提升了不少开发效率。
在编码阶段遇到了不少问题，例如并不能利用 url 像平时那样进行参数传递，发现抓取不到页面跳转后的参数。为了减少请求次数，也尝试采用 LocalStorage 缓存 json。通过 Manifest cache 缓存 html,css,js 文件，来提升界面的响应速度。通过 css3 替代 js 做动画效果，但是效果并不理想，感觉还是没有 js 来的流畅。页面跳转白屏，数据加载的延迟等等状况，加载动画体验需要做的更好，而且尽量减少页面的跳转，把一些功能集中到单个 html 文件。</description></item><item><title>NodeJs 按行读取文件</title><link>//imziv.com/posts/2014/nodejs-%E6%8C%89%E8%A1%8C%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</link><pubDate>Tue, 02 Sep 2014 15:56:41 +0000</pubDate><guid>//imziv.com/posts/2014/nodejs-%E6%8C%89%E8%A1%8C%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</guid><description>次中方法非依赖第三方 package, 当然你可以用。
line-reader 直接上代码：
var fs = require(&amp;#39;fs&amp;#39;), readline = require(&amp;#39;readline&amp;#39;); var rd = readline.createInterface({ input: fs.createReadStream(&amp;#39;./test.txt&amp;#39;), output: process.stdout, terminal: false }); var i = 1; rd.on(&amp;#39;line&amp;#39;, function(line) { console.log(&amp;#39;第&amp;#39;+ i +&amp;#39;行：&amp;#39;+ line); write(line); i++; });</description></item><item><title>2014 年 8 月 9 日我离开了南京</title><link>//imziv.com/posts/2014/2014%E5%B9%B48%E6%9C%889%E6%97%A5%E6%88%91%E7%A6%BB%E5%BC%80%E4%BA%86%E5%8D%97%E4%BA%AC/</link><pubDate>Sat, 23 Aug 2014 14:53:16 +0000</pubDate><guid>//imziv.com/posts/2014/2014%E5%B9%B48%E6%9C%889%E6%97%A5%E6%88%91%E7%A6%BB%E5%BC%80%E4%BA%86%E5%8D%97%E4%BA%AC/</guid><description>2012 年 11 月份，我一人来到了南京这座陌生的城市。
2014 年 8 月 9 日，我离开了这座美丽的城市，只身来到杭州。
i love you more when i&amp;rsquo;m missing you.</description></item><item><title>细说 static 关键字及其应用</title><link>//imziv.com/posts/2014/%E7%BB%86%E8%AF%B4static%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</link><pubDate>Sat, 19 Jul 2014 12:59:48 +0000</pubDate><guid>//imziv.com/posts/2014/%E7%BB%86%E8%AF%B4static%E5%85%B3%E9%94%AE%E5%AD%97%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/</guid><description>场景 先看段代码，考虑以下场景，其运行结果是什么？
public class Test { static int i = 8; public void printI() { int i = 88; System.out.println(this.i); } public static void main(String arg[]) { Test t = new Test(); t.printI(); } } 最后的运行结果是：8
如果把 this 关键字去掉的话，则结果是 88 ，当然这里有一些对关于 this 关键字的考察。
static 关键字 包含了使用 static 关键字声明的变量或者方法与包含它的类实例对象是没有关联的。因为静态化的域或者方法在类实例化前就已经加载入内存当中了，而并非是需要实例化该类声明的对象后，内存中才会为其分配内存。让我们再看看下面的代码：
class Test { static int i = 8; public void printI() { System.out.println(&amp;#34;i:&amp;#34;+this.i); } public static void main(String arg[]) { System.out.println(Test.i); Test.test(); Test.</description></item><item><title>利用 JS 跨域做一个简单的页面访问统计系统</title><link>//imziv.com/posts/2014/%E5%88%A9%E7%94%A8js%E8%B7%A8%E5%9F%9F%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E7%BB%9F%E8%AE%A1%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 30 Jun 2014 14:48:56 +0000</pubDate><guid>//imziv.com/posts/2014/%E5%88%A9%E7%94%A8js%E8%B7%A8%E5%9F%9F%E5%81%9A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E7%BB%9F%E8%AE%A1%E7%B3%BB%E7%BB%9F/</guid><description>其实在大部分互联网 web 产品中，我们通常会用百度统计或者谷歌统计分析系统，通过在程序中引入特定的 JS 脚本，然后便可以在这些统计系统中看到自己网站页面具体的访问情况。但是有些时候，由于一些特殊情况，我们需要自己来设计统计系统。由于前段时间公司的业务需求，我也是自己尝试了下，本文提供的是一个基本思路，统计系统也比较简单。
几个基本统计需求： 1.统计 web 每个页面用户访问量 2.统计用户访问者的和 IP 地址信息 3.页面之间的跳转情况 4.访问高峰时间段
服务器结构： 数据库表设计：
以上只是我简单列举的需求，这边简单的就一张统计表，而这张统计表能满足的需求是不仅仅只是上面四个基本的需求的，可以看需求情况再做相应的业务处理。
tb_visit_count_log
ID ip (varchar) IP 地址 title（varchar）标题 cur_page(varchar) 当前页面 from_page(varchar) 源页面 time（datetime）日期时间 app(varchar) 应用 数据采集:
我们提交编写一个 JS 脚本，用来抓取当前页面中我们需要的数据，然后通过跨域请求道我们的 Statistics Server 进行存储，便于之后的统计分析业务的操作。
JS 跨域：
我们都知道在开发 web 应用的时候，我们经常利用去请求其它服务器内的脚本资源，src 是 source 的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在位置。所以利用这一点，我们可以通过 JS 动态创建标签，并抓取页面相关的信息后，设置该标签 src 地址为远程 Statistics 服务器地址，将其添加到当前文档中，该标签便会自动将请求发送到指定服务器，而服务器便可解析改请求中的参数和请求信息，将其存储入库。 示例代码：
(function() { var title = document.getElementsByTagName(&amp;#34;title&amp;#34;)[0].innerHTML, // 页面标题 url = window.</description></item><item><title>HTML5 实现图片文件异步上传</title><link>//imziv.com/posts/2014/html5%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0/</link><pubDate>Mon, 26 May 2014 15:31:58 +0000</pubDate><guid>//imziv.com/posts/2014/html5%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0/</guid><description>利用 HTML5 的新特点做文件异步上传非常简单方便，本文主要展示 JS 部分，html 结构。下面的代码并未使用第三发库，如果有参照，请注意一些未展现出来的代码片段。我这边的效果预览：
1.文件未选择 2.文件已选择
HTML 代码部分： 思路：下面代码中我利用 css 的 z-index 属性将 input=&amp;quot;file”标签隐藏在了 id=btnSelect 元素下面，通过触发 a 标签的点击后，弹出文件选择框。下面的 masklayer 用于点击确认按钮后的弹出层，避免用户重复点击确认按钮。
&amp;lt;div id=&amp;#34;wp&amp;#34; class=&amp;#34;warpper&amp;#34;&amp;gt; &amp;lt;a id=&amp;#34;btnSelect&amp;#34;&amp;gt;单击选择要上传的照片&amp;lt;/a&amp;gt; &amp;lt;input id=&amp;#34;uploadFile&amp;#34; type=&amp;#34;file&amp;#34; name=&amp;#34;myPhoto&amp;#34; /&amp;gt; &amp;lt;button id=&amp;#34;btnConfirm&amp;#34; class=&amp;#34;btn&amp;#34; &amp;gt;确认上传&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div id=&amp;#34;maskLayer&amp;#34; class=&amp;#34;mask-layer&amp;#34; style=&amp;#34;display:none;&amp;#34;&amp;gt; &amp;lt;p&amp;gt;图片正在上传中...&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; JS 图片文件验证部分：
验证部分为：大小，是否已经选择，文件的类型 三个部分。第一个 createObject 方法为创建本地图片文件的预览路径，依次验证是否为空，文件类型以及文件大小，不满足条件则一律返回
false,满足以上 3 个条件后，在 dom 中生成图片预览，添加 img 元素，然后利用 createObjectURL()方法获取预览路径。
代码：
//获取数据的URL地址 function createObjectURL(blob) { if (window.URL) { return window.URL.createObjectURL(blob); } else if (window.</description></item><item><title>Mysql 编写定时任务事件</title><link>//imziv.com/posts/2014/mysql%E7%BC%96%E5%86%99%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%BA%8B%E4%BB%B6/</link><pubDate>Tue, 13 May 2014 18:26:26 +0000</pubDate><guid>//imziv.com/posts/2014/mysql%E7%BC%96%E5%86%99%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%BA%8B%E4%BB%B6/</guid><description>场景：
　例如：某系统，用户每天只能拥有一次的抽奖机会，抽过后当天就不可再抽，但是过了 24：00 点后用户就重新拥有一次抽奖机会。像这种需要数据库定时对某个字段进行更新操作的任务，完全可以通过数据库本身的事件机制进行操作，而服务器端也不需要用额外的代码进行这种监控定时的操作。
Mysql:
　本文讨论的是 Mysql 数据库，Event Scheduler 事件调度器应该是在 Mysql5.1 引入的，所以使用定时任务调度时，请注意查看你的 Mysql 版本。
创建事件调度的语法：
/*创建事件event_name*/ DELIMITER $$ CREATE event IF NOT EXISTS event_name ON SCHEDULE 任务条件 ON COMPLETION PRESERVE DO SQL操作 DELIMITER ; 实例情景：每半个小时更新统计字段 count 为 0，
/*创建定时定时更新count字段事件*/ DELIMITER $$ CREATE event IF NOT EXISTS update_count ON SCHEDULE EVERY 30 MINUTE /*MYSQL注意时区设置，默认非中国时区*/STARTS TIMESTAMP &amp;#39;2009-12-18 02:58:00&amp;#39; ON COMPLETION PRESERVE DO update tb_count set count=0 $$ DELIMITER ; 如上，创建了一个名叫 update_count 的事件，执行条件则为每 30 分钟执行一次，(EVERY 30 MINUTE)，执行 Sql 为(update tb_count set count=0)， 当然你可能会按天执行，所以你也可以写(EVERY 1 DAY)，</description></item><item><title>为自己尝试写点东西吧，程序员们！</title><link>//imziv.com/posts/2014/%E4%B8%BA%E8%87%AA%E5%B7%B1%E5%B0%9D%E8%AF%95%E5%86%99%E7%82%B9%E4%B8%9C%E8%A5%BF%E5%90%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BB%AC/</link><pubDate>Thu, 01 May 2014 14:11:03 +0000</pubDate><guid>//imziv.com/posts/2014/%E4%B8%BA%E8%87%AA%E5%B7%B1%E5%B0%9D%E8%AF%95%E5%86%99%E7%82%B9%E4%B8%9C%E8%A5%BF%E5%90%A7%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BB%AC/</guid><description>2012 年秋季，正是大伙急于找实习工作的时候。尝试出去找过很多实习单位，但是基本上都是不靠谱，然后就是我自己能力的不足。所以找工作之路也是异常艰辛和曲折。
学了那么久的 Java，做过那么多的小练习，但是说实话，感觉没有一个作品或者成功是相对完整的，无论是在 UI 界面，功能完善上都是如此。原因大多是心态上比较敷衍，人比较懒惰，没有把东西当作真正的作品。那个时候看过很多大神写的博客系统，自己也玩过 wordpress,所以一直想给自己写一个博客系统，这一次决心做的像样些，要来的专业些。那个时候也是没有犹豫，便动手起来。
从前端 UI 的设计，到数据库后台的设计，差不多花了我将近半个月的时间，做出来一个看起来外观还行的博客系统，但是那个时候连后台也没有。只有基本的博文展示功能，太过于简洁，只不过前台看起来还行。所以那个时候我自己花钱买域名，买服务器，把它给放到网上，然后跟很多小伙伴分享了下自己的作品，也是收到了不少鼓励，然后还有很多有用的建议。也是这次动手认真的作品所带来的鼓励，在那段找工作艰难的时期，我一个人决定离开武汉，我要主动出击！果不其然，由于这件小作品，给我在后来很多次的面试中带来了更多的机会和肯定。
经过一年多的工作，一年多依然是学习了更多的知识，而回头看看曾经做过的小博客系统，里面凌乱的代码，和粗糙的细节处理等等让我又是动了重构它的心情。是的，我觉得让他更完整写，要做的更像样子些，我不仅要写的自己用的时候感觉像个系统，我还要让别人用的时候感觉爽，程序员做的产品不应该就是这样么，我们应该把自己当作真正的“工程师&amp;quot;看待，从码农到工程师是非常艰巨的一步，是一种巨的跨越！
仔细整理了一些，发现缺乏的功能太多，连个后台都没有！文章显示的排版也是很随意，每次写的文章需要预先排版后才放入数据库，是的，这就是我当时认为还可以的作品！！列举里下功能项，数据库不得不重新设计，需要新增很多表，为了避免自己在设计上的短板，我决定加入 Bootstrap 这个东西，看起来应该会更好些。服务器端依然用 Java 代码，但是这次换了我更加偏爱的框架 SpringMvc+Mybatis，开始的一周基本上原先的东西基本上全部作废了，重构基本上变成了重写 0.0。
我在代码里面添加了更多的注释，排版上也尽量让自己看起来舒服，我发现我有些小小的强迫症的倾向，现在工作当中对代码的要求也是越是如此。本来预先设计的数据表，在真正写功能的时候忽然发现很多地方并没有满足需求，所以也是会反复的增加或者修改字段，包括字段的长度或者类型等等。这也是让我更加意识到数据库的预先设计上是一件很麻烦的事情，需要考虑的足够周到。
当博客的界面第一次出来后，我发现不是很满意，无论是布局的高宽，色调的搭配我是反反复复改了好多遍，最后还是改的非常简洁的黑白，当时考虑到技术博客的目的，所以并未想要做出怎样炫酷的效果。自己更倾向那种持久耐看，简洁风的东西。这一次没有产品经理，也没有设计师的督促，每一个像素，每一个 div 都是自己要求自己做到相对满意。当然，可能有 PM，和设计师可能会产生更好的效果。
利用上班业余的时间去做额外的东西，有时候的确是相当累的一件事情，但是当你看到你的作品从你脑袋里面的想象慢慢被编织成一行行代码，最后运行到你眼前的时候，一种无形的力量推动着你一步步往前走。我知道一个博客系统没有什么特别的技术，对于很多人来说应该很简单，但是当你一个人想去把一件事情做好的时候，事实上再简单的事情也变得不简单，总会有些你意想不到的东西，总有些你没有能考虑到的事情出现，你需要一步一步慢慢的去完成它，收获的不仅仅是一份作品，更是一种心态。
园子里面也经常有朋友分享他们的作品，相信他们与我一样收获很多，如果你热爱创造，热爱编程，那么就去用代码去实现你脑袋里面的想法吧，无论别人做过没有做过，都应该去尝试，享受编程真正带来的乐趣!最后分享下作品的地址，当然还有很多地方不够完善，以后慢慢去改善，就像创造了生命，然后慢慢培养成长一样！各位五一快乐！
ZBLOG：http://imziv.com/</description></item><item><title>从文件导数据到数据库的性能优化思路（笔记）</title><link>//imziv.com/posts/2014/%E4%BB%8E%E6%96%87%E4%BB%B6%E5%AF%BC%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF%E7%AC%94%E8%AE%B0-/</link><pubDate>Fri, 25 Apr 2014 14:12:51 +0000</pubDate><guid>//imziv.com/posts/2014/%E4%BB%8E%E6%96%87%E4%BB%B6%E5%AF%BC%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%9D%E8%B7%AF%E7%AC%94%E8%AE%B0-/</guid><description>概述 最近公司一.NET 项目需要对其日志 Log 入数据库统计，写这个脚本导入的任务便落到我身上了。采用了熟练的 Java,这个日志也不是很大，一个文件大概几兆，有上万条数据，一天大概有 7,8 个文件需要这样的导入处理。由于之前写 Web 没有这么去批处理这么多数据，所以没有太注意性能，第一个版本程序导入速度慢的吓人，一个文件导完可能需要 10 多分钟，也就是说如果把每天的文件导完可能需要 2 个多小时的时间，听听就很蛋疼，最终经过优化后，一个文件导入也就几秒，甚至可以更短。目标日志文件的信息都是按行存储，所以程序中按行读取后，然后进行相应的字符串截取入库。下面则为思路分享以及主要代码的分享。
优化思路 1.程序流程： 程序先读取本地的文件到内存，然后把内存的数据批量 Insert 到数据库。 2.归纳：可以看出首先程序需要进行文件 IO 操作，然后则是数据 JDBC 操作，所以优化方向大致可以是以下几个： a.文件 IO 优化 b.JDBC 操作优化 c.使用多线程并行 JDBC 操作
文件常见 IO 简介 Java 的文件读写操作大概有这么几种方式，但是我们应该注意几种文件操作方式的区别，哪些操作方式适合不同的数据文件对象。 1.（InputStream/OutputStream) 为字节输入/输出流，这种读写方式都是按一定字节量读取数据。 2. （FileInputStream/FileOutputStream) 此方法继承自上面的（InputStream/OutpustStream）,同样按字节流输入/输出，用于读取图像之类的原始字节流 3.（FileReader/FileWriter) 此方法适用于按字符流的文件操作 4. （BufferedReader/BufferedWriter) 从字符输入流中读取文本，缓冲各个字符，从而实现字符、数组和行的高效读取。
注：更详细的 IO 操作说明，请查看具体的 JDK 文档。 此处我采用的 BufferedReader 按行读取，效率比较好 代码片段：
public static List&amp;lt;String&amp;gt; getLogLinesByBuf(String filePath){ List&amp;lt;String&amp;gt; items = new ArrayList&amp;lt;String&amp;gt;(); File file = new File(filePath); BufferedReader reader; if (file.</description></item><item><title>NodeJS 示例异步式(Asynchronous)IO 与同步式 Synchronous)IO</title><link>//imziv.com/posts/2014/nodejs%E7%A4%BA%E4%BE%8B%E5%BC%82%E6%AD%A5%E5%BC%8Fasynchronousio%E4%B8%8E%E5%90%8C%E6%AD%A5%E5%BC%8Fsynchronousio/</link><pubDate>Sat, 29 Mar 2014 14:21:07 +0000</pubDate><guid>//imziv.com/posts/2014/nodejs%E7%A4%BA%E4%BE%8B%E5%BC%82%E6%AD%A5%E5%BC%8Fasynchronousio%E4%B8%8E%E5%90%8C%E6%AD%A5%E5%BC%8Fsynchronousio/</guid><description>理解 IO
IO（Input/Output）通常是指计算机线程进行慈磁盘读写或者网络通信时的一种行为。
同步式（Synchronous)IO 和异步式(Asynchronous )IO
同步式：当计算机调度线程进行 I/O 操作命令后，由于文件的读写或者网络通信需要较长的操作时间，操作系统为了充分利用 cpu，此时会暂停到当前的 I/O 线程对 CPU 的控制（故又称同步式为阻塞式 I/O），把 cup 资源然给其他的线程资源，当 I/O 线程完成了操作时，此时操作系统会恢复此时的 I/O 线程，从而当前 I/O 线程重新获得了 cup 的的控制权，继续完成其他操作。 NodeJs 让很多前端开发者利用 JS 开发服务器变得异常的简单，而异步式 I/O 则是 NodeJs 的一大特点。 异步式：异步式 IO 又称非阻塞式 I/O，异步式与同步式不同的是，当线程进行 IO 操作时，操作系统并不是暂停当前的线程操作，而是执行完 I/O 指令后，操作系统继续让当前线程执行下一条指令，当 I/O 操作完成后，会通过事件（event)通知 I/O 线程，而线程在接收到通知后，会处理响应事件。 简单的说，同步式是让通过多个线程完成多个任务，而异步式则是通过一个线程完成多个任务，遇到 I/O 操作时，依然让线程继续执行其他指令，只是在 I/O 完成后通知线程调度响应事件即可。
图解：
示例代码：
异步式： 注意这里的异步式执行结果是，控制台会先打印 read over,然后才打印 package.json 文件中的内容，也就是说，线程执行文件 IO 时，继续先执行了 console.log(&amp;lsquo;read over&amp;rsquo;); 待读取操作结束后通知线程响应此时的回调函数，执行了结果打印操作。
1 /* 2 * 异步式（Asynchronous） I/O Example. 7 */ 8 var file = require(&amp;#39;fs&amp;#39;);//声明对象 9 //异步式读取 10 file.</description></item><item><title>Java 利用 Axis 远程调用 WebService 接口</title><link>//imziv.com/posts/2014/java%E5%88%A9%E7%94%A8axis%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8webservice%E6%8E%A5%E5%8F%A3-/</link><pubDate>Wed, 26 Mar 2014 17:28:40 +0000</pubDate><guid>//imziv.com/posts/2014/java%E5%88%A9%E7%94%A8axis%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8webservice%E6%8E%A5%E5%8F%A3-/</guid><description>准备工作：
　主要依赖的包：
　1.axis.jar
　官网：http://axis.apache.org/axis/
　2.jaxrpc.jar
　下载地址：http://www.java2s.com/Code/Jar/j/Downloadjaxrpcjar.htm
说明：
　在拿到 wsdl 地址后先分析清楚 xml 文件的一些参数，然后再动手写代码，例如 service 名称，targetNamespace,请求 operation 的名称，要传入的参数类型，返回结果类型等等。具体的代码参考如下：
1 package com.joysee.account.service.impl; 2 3 4 import java.rmi.RemoteException; 5 6 import javax.xml.namespace.QName; 7 import javax.xml.rpc.ParameterMode; 8 import javax.xml.rpc.ServiceException; 9 10 import org.apache.axis.client.Call; 11 import org.apache.axis.client.Service; 12 13 14 public class Test { 15 16 /** 17 * @param args 18 * @throws ServiceException 19 * @throws MalformedURLException 20 * @throws RemoteException 21 */ 22 public static void main(String[] args) throws ServiceException, RemoteException { 23 24 //WSDL地址 25 String wsdlUrl =&amp;#34;http://IP:PORT/ExampleWebService?</description></item><item><title>Java JSON、XML 文件/字符串与 Bean 对象互转解析</title><link>//imziv.com/posts/2014/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8Ebean%E5%AF%B9%E8%B1%A1%E4%BA%92%E8%BD%AC%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 17 Mar 2014 16:12:00 +0000</pubDate><guid>//imziv.com/posts/2014/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8Ebean%E5%AF%B9%E8%B1%A1%E4%BA%92%E8%BD%AC%E8%A7%A3%E6%9E%90/</guid><description>前言
在做 web 或者其他项目中，JSON 与 XML 格式的数据是大家经常会碰见的 2 种。在与各种平台做数据对接的时候，JSON 与 XML 格式也是基本的数据传递格式，本文主要简单的介绍 JSON/XML 文件的读写操作，以及与 Bean 之间的转换。示例代码都是经过 Demo 测试的，当然也会把代码上传到 GitHub.需要的朋友可以看看。
准备工作
我这里对 XML 与 JSON 主要依赖以下 2 个开源库，当然像针对 xml 和 JSON 解析的开源库非常的多，下面这 2 个感觉相对用起来比较简单。需要注意的是如果缺少下面 jar 文件中的一个，可能就会出现 ClassNotFound 异常，如果发现使用的方法在当前库中找不到，则可能是库版本不同造成的，可以去官网查阅。
1.JSON 解析库： Jackson JSON Processor 官网：http://jackson.codehaus.org/
2.XML 解析库 : Simple XML serialization framework 官网：http://simple.sourceforge.net/home.php
JSON 操作详细代码： 1.JSON 字符串转换为 Bean
/** * JSON字符串转换为对象 * @param src JSON字符串 * @param target 目标Bean */ public static &amp;lt;T&amp;gt; T String2Object(String src, Class&amp;lt;T&amp;gt; target) throws JsonParseException, JsonMappingException, IOException { ObjectMapper mapper = new ObjectMapper(); //配置，允许使用单引号字符的JSON mapper.</description></item><item><title>匿名函数块级作用域以及在 JQuery 中的应用</title><link>//imziv.com/posts/2014/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%9C%A8jquery%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</link><pubDate>Fri, 21 Feb 2014 10:59:00 +0000</pubDate><guid>//imziv.com/posts/2014/%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%9C%A8jquery%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</guid><description>最近经常回在群里面看到有些朋友问如下这样的 js 写法该如何理解的的问题,虽然可能对匿名函数有些理解，但是有时候看到 JQuery 源码或者其他 JS 库中同样的写法时，就有点不理解了，今天再次分享下这方面的知识点。
(function(){ })(JQuery); 对以上写法的理解：
　上面的这种写法通常叫做“块级作用域”，块级作用域的好处就是可以将匿名方法内部的变量进行私有化，当程序运行结束之后便将一些变量自动销毁。第一个（）号表示次函数为一个函数表达式，其中包含了一个匿名函数，后面的一个（）则表示执行这个函数表达式中的匿名方法，而 JQuery 则作为这个匿名函数的一个参数。
匿名函数
　通常声明一个匿名函数的方法是：
//匿名函数 var getPerson = function() { //次方法为函数表达式的声明方法 } getPerson();//调用匿名方法 所以大家又可以把上面的代码看成是这样子的：
function() { }(); 但是，虽然逻辑上是这么一回事，但是你如果按照上面的这种写法，运行的时候会出现语法错误的问题。所以这个时候利用（）这个分组操作符括起这个函数表达式即可，然后括号（）执行此函数。（关于函数声明的方法以及函数表达是的内容可以参考汤姆大叔的这篇文章http://www.cnblogs.com/TomXu/archive/2011/12/29/2290308.html）
JQuery 中的应用：
//此块级作用域中声明了2个参数 (function( window, undefined ) { // Use the correct document accordingly with window argument (sandbox) var location = window.location, document = window.document, docElem = document.documentElement, // Map over jQuery in case of overwrite _jQuery = window.</description></item><item><title>对近 2 年来“互联网思维”、“物联网”、“云计算”、“大数据”，“小白用户”等时髦词汇的些思考</title><link>//imziv.com/posts/2014/%E5%AF%B9%E8%BF%912%E5%B9%B4%E6%9D%A5%E4%BA%92%E8%81%94%E7%BD%91%E6%80%9D%E7%BB%B4%E7%89%A9%E8%81%94%E7%BD%91%E4%BA%91%E8%AE%A1%E7%AE%97%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B0%8F%E7%99%BD%E7%94%A8%E6%88%B7%E7%AD%89%E6%97%B6%E9%AB%A6%E8%AF%8D%E6%B1%87%E7%9A%84%E4%BA%9B%E6%80%9D%E8%80%83/</link><pubDate>Sun, 16 Feb 2014 15:41:00 +0000</pubDate><guid>//imziv.com/posts/2014/%E5%AF%B9%E8%BF%912%E5%B9%B4%E6%9D%A5%E4%BA%92%E8%81%94%E7%BD%91%E6%80%9D%E7%BB%B4%E7%89%A9%E8%81%94%E7%BD%91%E4%BA%91%E8%AE%A1%E7%AE%97%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B0%8F%E7%99%BD%E7%94%A8%E6%88%B7%E7%AD%89%E6%97%B6%E9%AB%A6%E8%AF%8D%E6%B1%87%E7%9A%84%E4%BA%9B%E6%80%9D%E8%80%83/</guid><description>平时喜欢关注科技新闻，所以会在经常科技栏目里看到关于什么“互联网思维”，“物联网”，“小白用户”，”云计算“等等这些热词的文章。但是个人觉得很多文章是过度解读，在给读者相应的一些正面信息的同时，感觉更多的是给很多读者造成了一些负面影响。下面谈谈我自己的一些感受。
　互联网思维
　过度解读的典型，弄得过渡的神秘。自从近些年互联网通过自身强大的力量对传统行业造成了巨大影响后，尤其电商更是炒的沸沸扬扬。然后通过几年便成长期了的小米公司更是达到了市值 100 亿美元，更是让很多传统行业者大跌眼镜，“互联网思维”这个词也就不知不觉经常被谁推到了科技新闻栏中。然后对互联网不是很熟悉的人，因为大家知道，或许很多传统行业的人以前可能不怎么太关心互联网络上面的事情，然后当互联网已经开始冲击自身行业的时候，才发现自己对互联网上那么的不熟。例如，很多人甚至没有玩过 QQ，微博微信，贴吧之类的互联网产品，而且这些东西更像是 80，90 后的代名词。甚至生活中年轻人经常嘴里面冒出来的一句话，一个词都是不能理解其中的含义或者笑点。其实说到底，是由于很多传统行业人，或者老一辈人他们没有去拥抱这个时代。当“互联网思维”这个词进入到很多传统行业人的脑海中去的时候，经常会把这个弄的神乎其神，好像“互联网思维”有多么的难，多么的高大上，而且还经常被各种编者来各种过度解读。“互联网思维”无非就是利用互联网“快速，强大的传播力”等特点，何必搞的那么故弄玄虚。
　物联网
　在一家物联网创业公司工作了一年多，也是有些体会。物联网其实属于互联网的一部分，其主思想应该是智能化，自动化。例如现在流行的是医疗，智能家居等。由于物联网这个新兴概念以及更加先进的传感设备的出现，让很多人看到了新的创业机遇，很多从事传统行业的人也是由于互联网的浪潮所吸引，参与到了物联网行业。关键是很多从传统行业转换过来的创业者并没有理解互联网，和物联网，经常做着做着就跑偏了。例如把物联网产品做成了互联网产品，本来是互联网与硬件的紧密结合，最好搞成了什么电子商务，即时通讯的产品。而且部分创业者老是想把什么农业，家居，方方面面都做，导致最后什么都做不好。大家都知道如今物联网本来就是新兴的东西，产品体验一旦差，根本就做不起来。所以入行请慎重，做产品要专一。
　小白用户
　有没有人跟我一样，听到这个词很蛋疼。什么叫小白用户？没上过网的？或者不会上网的？还是会上网玩 QQ 的？个人觉得目前互联网上的产品，用户体验一是对历史产品设计的一种继承，另一种就是对人类行为分析后的创新设计。不管你是什么用户，在我们进行产品设计的时候，无非就是沿袭目前互联网一贯的用户体验设计，要么就是进行创新新的设计，前者学习成本较低，后者学习成本较高而已，但是为了得到更好的体验，学习是必要的。至于那些没上过网的用户，就是非互联网用户，更谈不上小白用户。每当老板拿这个词来形容一些非互联网用户的时候，我就想吵架！例如之前做物联网产品的时候，老板把我们做的产品给一些就不上网的普通百姓看，本来物联网就是一个新兴的概念，那些连互联网都不了解，甚至连 QQ 都没有的用户，基本上看不懂我们的产品。目前我们设计产品的思路是深受互联网产品的影响的，所以一旦很多用户连互联网产品都不怎么用情况下，一些超前的东西你必须使用某些引导手段才行。所以请不要瞎定义小白用户，然后拿这个词说事儿～
　云计算 大数据
　近 2 年也是非常时髦的 2 个词，虽说的确是进入了大数据，云服务时代，但是这东西不是说拿来撑门面的，不是时髦的什么名牌。我发现很多小公司，还没用户就开始什么大数据，产品没出来老板就在外面大谈什么云服务，云计算。云计算和大数据其实是增强互联网产品的使用体验的有效技术手段，不是拿来显前卫，忽悠领导的时髦。建议做产品的还是脚踏实地，真正该采用什么手段的时候就采用。
　结语
　由于互联网给我们生活的影响，给传统行业的冲击，现在很多传统企业都想在互联网上分得一杯美羹，做房地产的，食品，医疗等等的，都在做自己的电商平台啊什么的。预感这 2 年是互联网的一波小高潮。对于我们程序员来说，嘿嘿，应该是很 happy 的。但是转行需谨慎啊，不懂互联网，很容易被技术团队坑的～
　（以上纯属个人闲来时的思考）</description></item><item><title>JS 实现星级评价</title><link>//imziv.com/posts/2014/js%E5%AE%9E%E7%8E%B0%E6%98%9F%E7%BA%A7%E8%AF%84%E4%BB%B7/</link><pubDate>Thu, 09 Jan 2014 16:55:00 +0000</pubDate><guid>//imziv.com/posts/2014/js%E5%AE%9E%E7%8E%B0%E6%98%9F%E7%BA%A7%E8%AF%84%E4%BB%B7/</guid><description>说明 　本方法采用了 Jquery 库，暂时检测兼容 IE8 版本。本示例的 2 种颜色的星星都是放入了一张 png 图片当中，当然还有其他的一些实现思路。本示例展示的情况是当前页面只有一个星级评价的情况。
思路 　通过对星级显示元素的，mouseenter,mouseout,click 三个事件的监听，从而星星显示的个数。其中我用了 2 个变量（temp_value,choice_value）来存放当前选定星级的值和当前临时的星级值；
temp_value : 临时的星级值； choice_value : 选择的星级值； mouseenter : 鼠标移入，获取当前所在的星星级别赋予 temp_value，调整当前星星的图片颜色； mouseout : 鼠标移除，通过对比 choice_value 值，重新调整星星图片颜色； click : 鼠标单击后，获取当前的星级值，赋值给 choice_value;（注意在 click 前已经进行过 mouseenter 事件了，click 后进行了 mouseout 事件了） 当完成选定值后，在需要提交评价值的时候，可以通过 JS 去获取变量 choice_value 的值； HTML 结构代码：
&amp;lt;h1&amp;gt;评价：&amp;lt;/h1&amp;gt; &amp;lt;ul id=&amp;#34;star&amp;#34;&amp;gt; &amp;lt;li title=&amp;#34;很差&amp;#34; id=&amp;#34;star1&amp;#34; star=&amp;#34;1&amp;#34;&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li title=&amp;#34;差&amp;#34; id=&amp;#34;star2&amp;#34; star=&amp;#34;2&amp;#34;&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li title=&amp;#34;一般&amp;#34; id=&amp;#34;star3&amp;#34; star=&amp;#34;3&amp;#34;&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li title=&amp;#34;好&amp;#34; id=&amp;#34;star4&amp;#34; star=&amp;#34;4&amp;#34;&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li title=&amp;#34;很好&amp;#34; id=&amp;#34;star5&amp;#34; star=&amp;#34;5&amp;#34;&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 注：如果页面中不止一个星级评价，也就是出现多行的情况，这个时候只需要对 Dom 中 li 的 id 进行一些改造，加上动态的下标，从而区分不同的元素。另外有个点就是，我把选定的星级值放入的是 JS 变量中去了，多个评价值的情况下，建议可以在 Dom 中加上隐藏表单域去存放选定的当前星级值。</description></item><item><title>Spring 中@Component 注解,@Controller 注解详解</title><link>//imziv.com/posts/2013/spring%E4%B8%ADcomponent%E6%B3%A8%E8%A7%A3controller%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/</link><pubDate>Tue, 24 Dec 2013 16:28:00 +0000</pubDate><guid>//imziv.com/posts/2013/spring%E4%B8%ADcomponent%E6%B3%A8%E8%A7%A3controller%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/</guid><description>在使用 Spring 的过程中，为了避免大量使用 Bean 注入的 Xml 配置文件,我们会采用 Spring 提供的自动扫描注入的方式,只需要添加几行自动注入的的配置,便可以完成
Service 层,Controller 层等等的注入配置.使用过程中,在 Service 层中的实现类头上加@Compopnet 注解，在 Controller 类头加@Controller 注解，便完成了配置。例如在
Controller 中当我们调用某个 Service 时就不需要 Set 方法了，直接通过@Autowried 注解对 Service 对象进行注解即可：例如
在 Controller 中：
@Controller@RequestMapping(&amp;#34;/test&amp;#34;) public class ExampleController { @Autowired private ExampleService service; } 在 Service 中
@Component public class ExampleServiceImpl Implements ExampleService { @Autowired private ExampleDao exampleDao; } Spring 中的 XML 配置：
&amp;lt;!-- 自动扫描service,controller组件 --&amp;gt; &amp;lt;context:component-scan base-package=&amp;#34;com.example.service.*&amp;#34;/&amp;gt; &amp;lt;context:component-scan base-package=&amp;#34;com.example.controller.*&amp;#34;/&amp;gt; 通常，在 Bean 为添加@Component 注解的情况下，在启动服务时，服务会提前报出以下代码中这样的异常情况下，此时应该检查相应 Bean 是否正确添加@Component</description></item><item><title>制作滑动条菜单，如何延时处理滑动效果，避免动画卡顿</title><link>//imziv.com/posts/2013/%E5%88%B6%E4%BD%9C%E6%BB%91%E5%8A%A8%E6%9D%A1%E8%8F%9C%E5%8D%95%E5%A6%82%E4%BD%95%E5%BB%B6%E6%97%B6%E5%A4%84%E7%90%86%E6%BB%91%E5%8A%A8%E6%95%88%E6%9E%9C%E9%81%BF%E5%85%8D%E5%8A%A8%E7%94%BB%E5%8D%A1%E9%A1%BF/</link><pubDate>Sat, 07 Dec 2013 16:47:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E5%88%B6%E4%BD%9C%E6%BB%91%E5%8A%A8%E6%9D%A1%E8%8F%9C%E5%8D%95%E5%A6%82%E4%BD%95%E5%BB%B6%E6%97%B6%E5%A4%84%E7%90%86%E6%BB%91%E5%8A%A8%E6%95%88%E6%9E%9C%E9%81%BF%E5%85%8D%E5%8A%A8%E7%94%BB%E5%8D%A1%E9%A1%BF/</guid><description>前几日在利用 JQuery 做菜单滑动标记这个效果的时候，最后发现滑动条在我用鼠标快速滑动的时候，会出现滑动条延迟滑动，并且有卡顿的现象,相当影响体验感受。不完美～
在几番询问下，得到了一个延时处理的解决方案，完美解决了这个问题。
思路 在鼠标移入目标元素的时候，启用定时操作，我目前设置的为 1/10 秒，也就是说，当鼠标如果在目标元素区域停留了满&amp;gt;足我预设值的时间范围内的话，我就执行动画效果，否则没有达到预设值的时间范围便移出来目标元素的话，便取消延&amp;gt;时执行的操作。简单的说，满足定时条件执行，否则取消操作。
具体代码：
HTML 部分：
1: &amp;lt;ul id=&amp;#34;nav&amp;#34;&amp;gt; 2: &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;menu1&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 3: &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;menu2&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 4: &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;menu3&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 5: &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;#&amp;#34;&amp;gt;menu4&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; 6: &amp;lt;span id=&amp;#34;slide_1&amp;#34; class=&amp;#34;slidebar&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; 7: &amp;lt;/ul&amp;gt; 未添加延时操作的 JS 代码 1: 2: //导航菜单一监听hover效果 3: $(&amp;#34;#nav li a&amp;#34;).mouseenter(function() { 4: $(&amp;#34;#slide_1&amp;#34;).animate( { 5: left : $(this).offset().left 6: },200); 7: }); 添加延时操作的 JS 代码 1: //加延迟处理的导航条2 2: var tId = null,ele;//时间ID，当前元素 3: $(&amp;#34;#nav1 li a&amp;#34;).mouseenter(function() { 4: ele = $(this); 5: //设置定时操作，并记录时间ID，用于清除定时器 6: tId = setTimeout(function() { 7: $(&amp;#34;#slide_2&amp;#34;).</description></item><item><title>SpringMVC 中 HttpMessageConverter 简介和 Http 请求 415 Unsupported Media Type 的问题</title><link>//imziv.com/posts/2013/springmvc-%E4%B8%ADhttpmessageconverter%E7%AE%80%E4%BB%8B%E5%92%8Chttp%E8%AF%B7%E6%B1%82415-unsupported-media-type%E7%9A%84%E9%97%AE%E9%A2%98/</link><pubDate>Thu, 05 Dec 2013 15:12:00 +0000</pubDate><guid>//imziv.com/posts/2013/springmvc-%E4%B8%ADhttpmessageconverter%E7%AE%80%E4%BB%8B%E5%92%8Chttp%E8%AF%B7%E6%B1%82415-unsupported-media-type%E7%9A%84%E9%97%AE%E9%A2%98/</guid><description>一、概述 　本文介绍且记录如何解决在 SpringMVC 中遇到 415 Unsupported Media Type 的问题，并且顺便介绍 Spring MVC 的 HTTP 请求信息转换器 HttpMessageConverter。
二、问题描述 　在 SprinvMVC 的 Web 程序中，我在页面发送 Ajax 的 POST 请求，然后在服务器端利用@requestBody 接收请求 body 中的参数，当时运行过程中，我想服务器发送 Ajax 请求，浏览器一直反馈 415 Unsupported Media Type 或者 400 的状态码，以为是 Ajax 写的有问题。便查找了半天资料，才发现 spring-mvc.config 文件的配置中少了东西，当然也有可能是你真的在 Ajax 中缺少了对 Content-Type 参数的设置。分析后应该是我 springMVC-config.xml 文件配置有问题。
（注）：400：（错误请求） 服务器不理解请求的语法。 415：（不支持的媒体类型） 请求的格式不受请求页面的支持。
三、解决方法 　在 springMVC-config.xml 文件中，增加了一个 StringHttpMessageConverter 请求信息转换器，配置片段如下：
&amp;lt;!--- StringHttpMessageConverter bean --&amp;gt; &amp;lt; bean id = &amp;#34;stringHttpMessageConverter&amp;#34; class = &amp;#34;org.</description></item><item><title>一个可以模拟 GET，POST，PUT，DELET 请求的 HTTP 在线工具</title><link>//imziv.com/posts/2013/%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E6%A8%A1%E6%8B%9Fgetpostputdelet%E8%AF%B7%E6%B1%82%E7%9A%84http%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/</link><pubDate>Tue, 03 Dec 2013 19:02:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E6%A8%A1%E6%8B%9Fgetpostputdelet%E8%AF%B7%E6%B1%82%E7%9A%84http%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/</guid><description>一个简陋的 HTTP 请求工具，UI 比较丑陋。0.0，可以用于接口调试。
　之前在调试公司的远程接口的时候用的是 curl,后来也在网上找到几种 Http 请求模拟的客户端程序。当时后来发现 google app 里面有很多在线版的模拟工具，觉得很不错。后来自己也想做一个在线版便动手做的，有问题可以联系我，欢迎交流。
访问地址：http://httptool.duapp.com/
首先温习一下 Http 请求的内容（内容来自于互联网），标准 Http 协议支持六种请求方法：
GET：GET 可以说是最常见的了，它本质就是发送一个请求来取得服务器上的某一资源。资源通过一组 HTTP 头和呈现数据（如 HTML 文本，或者图片或者视频等）返回给客户端。GET 请求中，永远不会包含呈现数据；
HEAD：HEAD 和 GET 本质是一样的，区别在于 HEAD 不含有呈现数据，而仅仅是 HTTP 头信息。有的人可能觉得这个方法没什么用，其实不是这样的。想象一个业务情景：欲判断某个资源是否存在，我们通常使用 GET，但这里用 HEAD 则意义更加明确；
PUT：这个方法比较少见。HTML 表单也不支持这个。本质上来讲， PUT 和 POST 极为相似，都是向服务器发送数据，但它们之间有一个重要区别，PUT 通常指定了资源的存放位置，而 POST 则没有，POST 的数据存放位置由服务器自己决定。举个例子：如一个用于提交博文的 URL，/addBlog。如果用 PUT，则提交的 URL 会是像这样的”/addBlog/abc123”，其中 abc123 就是这个博文的地址。而如果用 POST，则这个地址会在提交后由服务器告知客户端。目前大部分博客都是这样的。显然，PUT 和 POST 用途是不一样的。具体用哪个还取决于当前的业务场景；
DELETE：删除某一个资源。基本上这个也很少见，不过还是有一些地方比如 amazon 的 S3 云服务里面就用的这个方法来删除资源；
POST：向服务器提交数据。这个方法用途广泛，几乎目前所有的提交操作都是靠这个完成；
OPTIONS：它用于获取当前 URL 所支持的方法。若请求成功，则它会在 HTTP 头中包含一个名为“Allow”的头，值是所支持的方法，如“GET, POST”。
通常我们会利用 GET，PUT，POST，DELETE 几个请求去模拟服务器对数据库的增删改查操作：</description></item><item><title>利用 link 标签的 disabed 属性大面积的对其他标签元素的 CSS 样式进行替换操作</title><link>//imziv.com/posts/2013/%E5%88%A9%E7%94%A8link%E6%A0%87%E7%AD%BE%E7%9A%84disabed%E5%B1%9E%E6%80%A7%E5%A4%A7%E9%9D%A2%E7%A7%AF%E7%9A%84%E5%AF%B9%E5%85%B6%E4%BB%96%E6%A0%87%E7%AD%BE%E5%85%83%E7%B4%A0%E7%9A%84css%E6%A0%B7%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%9B%BF%E6%8D%A2%E6%93%8D%E4%BD%9C/</link><pubDate>Sat, 23 Nov 2013 11:50:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E5%88%A9%E7%94%A8link%E6%A0%87%E7%AD%BE%E7%9A%84disabed%E5%B1%9E%E6%80%A7%E5%A4%A7%E9%9D%A2%E7%A7%AF%E7%9A%84%E5%AF%B9%E5%85%B6%E4%BB%96%E6%A0%87%E7%AD%BE%E5%85%83%E7%B4%A0%E7%9A%84css%E6%A0%B7%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%9B%BF%E6%8D%A2%E6%93%8D%E4%BD%9C/</guid><description>由于平时对元素样式的控制基本上只是 3，4 个，所以一般用 Jquery 的时候直接使用$(element).css();这个方法，或者使用$(element).addClass()方法完成样式操作。对于小范围元素的操作来说，这是非常方便的。但是当针对众多元素同时进行操作的时候呢，这 2 个方法让代码看起来就比较重量级了，代码的可读性也比较小。
　过程起初，我先尝试了一种方式，就是在 JS 代码中动态插入 link 标签，引入新的样式文，但是很遗憾的是根本就不起作用，因为那个时候浏览器已经把样式渲染到页面元素了，新引入的样式文件根本就不会被浏览器执行渲染。所以我选择了另外一种方式，就是把 2 个样式文件同时先加载完毕，然后先禁用其中一个文件，等到在需要出现的时候，利用 JS 代码控制其启用，从而达到整体控制。
HTML 代码片段：
&amp;lt;link href=&amp;#34;/public/stylesheets/page/application/first.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; &amp;gt; &amp;lt;link id=&amp;#34;second_css&amp;#34; disabled=&amp;#34;true&amp;#34; href=&amp;#34;/public/stylesheets/page/application/second.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; &amp;gt; 代码中我用了 2 个 link 标签，注意看到第二个 link 标签中我添加了 ID 属性和 disabled 这 2 个属性。ID 当时是用于 JS 便于操控，disabled 用于在需要的时候取消禁用，需要的时候启动禁用，从而覆盖原有样式。由于在实际开发中，我的第一个样式文件中包含了其他许多不需要被大面积操作元素的样式，所以在操作的时候我并没有采用这种思路：
采用 first.css 文件 —&amp;gt;禁用 second.css 文件 或者 采用 second.css 文件—&amp;gt;禁用 first.css 文件 而是
　我在 second.css 文件中，把样式属性值都添加了!important 属性值，从而增加其显示的优先级，达到覆盖 first.css 文件中的样式。也就是单独的只对 second.css 的样式文件进行操作，当然你也可以纯粹的对 2 个文件进行直接操作，不需要在第二个样式文件中添加!</description></item><item><title>作为 WEB 工程师，我们是不是应该积极的推进一下用户浏览器的使用体验？</title><link>//imziv.com/posts/2013/%E4%BD%9C%E4%B8%BAweb%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%88%91%E4%BB%AC%E6%98%AF%E4%B8%8D%E6%98%AF%E5%BA%94%E8%AF%A5%E7%A7%AF%E6%9E%81%E7%9A%84%E6%8E%A8%E8%BF%9B%E4%B8%80%E4%B8%8B%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link><pubDate>Thu, 14 Nov 2013 15:24:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E4%BD%9C%E4%B8%BAweb%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%88%91%E4%BB%AC%E6%98%AF%E4%B8%8D%E6%98%AF%E5%BA%94%E8%AF%A5%E7%A7%AF%E6%9E%81%E7%9A%84%E6%8E%A8%E8%BF%9B%E4%B8%80%E4%B8%8B%E7%94%A8%E6%88%B7%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid><description>为什么会写这篇文章，其实是有原因的。目前我工作的公司的 Web 网站仅支持 IE8 以上的版本，然后我们经常接到客户的反馈，说为什么在他浏览器当中 flash 怎么显示不了，或者为什么在他浏览器中有这样那样的问题。有时候的确是一件很恼怒的事情。
　我很想知道为什么在中国，使用 IE6 浏览器的人为什么还有这么多，为什么用户不愿意升级到体验更好，使用更方便的浏览器当中。其实我仔细想想，毕竟用户打交道的 web 都是出自我们之手，虽然很多用户对有些互联网产品并不了解，但是我们作为开发者是可以比较好的去引导用户去提升使用体验。这无论是对用户，产品，开发者来说都是有益的。下图是 13 年 CNZZ 关于浏览器使用的一个统计： 　老版本的浏览器在体验上并不好，而且漏洞又多，对于这个鱼龙混杂的互联网时代来说，对自己隐私，财产也是有不小的安全隐患，同时无论是对于用户，产品，开发者来说这都是一件不好的事情。尤其是还有很多用户停留在的 IE6 浏览器。无论其加载速度，渲染效果，还是对 css3 和 HTML5 等等新特性的支持上都不好，然后这些新特性，在新版本的浏览器中都得到了实现，其用户体验是老版本 IE 所不能比的。所以从用户体验的角度而言，作为开发者本身就是为用户服务的，我们更应该促使用户去升级浏览器，去增强体验和用户感受。当时据我观察，我们大部分 web 工程师并没有这样干，或者说干的并不好。
　通常我们针对 IE6 就是这样处理的：
　1.兼容到 IE8，放弃 IE6；（我目前的做法）
　2.兼容 IE6，并没有引导用户升级；
　3.做到兼容，并且引导用户升级或者更换其他更好体验的浏览器。（这样做的目前我见到的网站很少）
　总结：
　很明显，如果我们开发人员能在开发产品的时候，去引导用户升级体验的话，我相信可以帮助很多用户获取更好的体验，从而提升产品的体验。这同时也能减轻开发者处理兼容性问题的负担。由于很多中国互联网用户在浏览器产品上面缺乏一定的常识，所以很多人不知道也不会如何升级产品，如果我们能做出更人性化的引导，我相信至少还是有些作用的。</description></item><item><title>我快成为了我一直讨厌的那种人（说好的回来好好做人呢？）</title><link>//imziv.com/posts/2013/%E6%88%91%E5%BF%AB%E6%88%90%E4%B8%BA%E4%BA%86%E6%88%91%E4%B8%80%E7%9B%B4%E8%AE%A8%E5%8E%8C%E7%9A%84%E9%82%A3%E7%A7%8D%E4%BA%BA%E8%AF%B4%E5%A5%BD%E7%9A%84%E5%9B%9E%E6%9D%A5%E5%A5%BD%E5%A5%BD%E5%81%9A%E4%BA%BA%E5%91%A2/</link><pubDate>Mon, 28 Oct 2013 19:41:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E6%88%91%E5%BF%AB%E6%88%90%E4%B8%BA%E4%BA%86%E6%88%91%E4%B8%80%E7%9B%B4%E8%AE%A8%E5%8E%8C%E7%9A%84%E9%82%A3%E7%A7%8D%E4%BA%BA%E8%AF%B4%E5%A5%BD%E7%9A%84%E5%9B%9E%E6%9D%A5%E5%A5%BD%E5%A5%BD%E5%81%9A%E4%BA%BA%E5%91%A2/</guid><description>文章使用这个标题别无他意，主要是本身对自己当前的学习和生活状态非常的不满，算是自嘲且提醒勉励自己。计划的生活，从来没有按计划去实施过，马上快工作一年了，除了刚开始的几个月进步比较快，但如今却感觉自己好像遇到了瓶颈，技术学习上一直没有太多的进步。下面来看看我是怎么计划好自己每周学习计划的：
周一至周五：除去每天白天的正常上班时间，完成自己的份内的工作外，且在工作中记录一些典型的问题。晚上回家阅读有关技术方面的书籍，包括算法，操作系统，javascript,java 等基础的内容； 周六：我会根据平时工作内容的记录，做相应的学习总结，然后记录博文，也就是说一星期起码有一篇总结性的文章。另外我会尝试去翻译国外大牛的博文或者其他开源技术的教程，学习增加英文水平。其他时间我会去写写自己的小工具，尝试写小的 js 插件什么的； 周日：由于个人比较喜欢音乐，由于之前不久买了一把吉他，所以想好好学习一下这个乐器，另外一值也想学习几首英语歌曲，一是为学习英语增加兴趣，另一点也是因为喜欢音乐，个人也比较喜欢看电影，偶尔去影院看场电影，略作点评。 上面的计划看起来很美好对不对？我也觉得很美好，但是！我基本没有做好任何一件事情！针对以上简略的学习计划，我买了一本 Javascript 书籍，然后从同事那边借来了各种设计模式等等计算机的书，浏览器也收藏了各种技术博客，开源网站。买的那本 JS 书籍本来一个月就可以看完的，我却迟迟到 9 月底才看完。好吧，看看我是怎么完成计划的吧：
周一～周五：工作基本上是完成了，但是效率相比以前降低了不少，具体原因在此不做分析。至于工作记录，做过，但是很少，且并没有做整理和分析。书籍，晚上偶尔看几页书，坚持不了很久就睡觉。然后大部分时间就是看电视剧或者看别人打游戏，好吧，电视剧是我曾经鄙视别人看的那些（不过没有神马偶像剧！），游戏自己不玩，但是喜欢看别人打，这就更可悲了～不谈了，太惨淡了。 周六：赫赫～早上起来的比较晚，基本上洗刷完就差不多得去买菜，然后回来做饭吃饭，上午的时间就没有了。下午有时候犯困，接着睡～博文周六很少写，偶尔会去看看博文，逛逛一些技术社区。然后继续看电视剧。差不多一天就又这样过去了。翻译目前我就翻译了 2 篇，而且很短的那种。尝试写很多工具，插件，但是都是开了头，没有过程，更谈不上结尾～shit! 周日：除了近期有好电影回去观看以外，。其他时间与周日差不多，其他除了认识了几根弦，手指怎么拨，便没有什么进展了。英语歌尝试过，但是没有坚持，至今很多只会一句 2 句，还是高潮部分。shit! shit! 今天为什么会这样吐槽自己，实在是有些忍受不了自己了。说好走完 318 回来好好做人的。。。。
　也是由于今天巧合的看到了一些同行，同龄人的博客，看到了他们记录自己的人生和故事，我更是忍受不了当今自己的行径，跟他们比，我完全差的太远了。本身感觉自己最近一直没有太多的进步，生活乏味，没有目标，尤其是对 js 的学习产生兴趣后，便发现这就像是一个无底洞～各种各样的开源框架，先不说早期的 Jquery，dojo 什么的，什么 AngularJS，Nodejs,backbone,乱七八糟，今天想学这个，明天想学那个，搞了这么久，都是仅仅做了一个了解，连个皮毛都算不上。所以最近的学习也是相当的彷徨～
　想起自己大一刚入学那个时候，当时那个学习状态时相当的疯狂，每天写代码，看书。记得大一春节那会回家，带了一本 java 基础的书，由于条件原因，我每天拿着本子超代码，吃完饭就回房间看书超代码。爸妈也不知道我在干什么，反正我不想任何人打扰我，那个时候在学校整体混迹于各种论坛，看到各种牛人和技术，觉得自己太弱太弱了，觉得自己有学不完的东西，所以也是相当的卖力，想追赶，想去学习各种高端的技术。回到学校每天也是写 C 语言，练习数据结构和算法，有时候在路上走路，脑袋还会想一些算法问题。可是到大二的时候情况又有些变化，那会和同学一起玩上了英雄联盟，所以写代码，看书也就没有以前那么多了，不过我每天还是在坚持。但是明显进步速度下降了一大截。后来当大二要结束的时候，出去找实习工作期间，才发现自己各种不足。后来利用一个暑假，恶补了一些技术漏洞，最后才顺利找到工作。
　工作了将近一年，发现自己并没有太多的进步，看看自己以前有过的疯狂学习劲头，看看如今自己的低靡颓废，有点过于安于现状，安于生活了。今天看到同样的一名 90 后，通过自己的努力，大学期间在 google,微软实习过，毕业后拿到 twitter 和 facebook 的 offer，看到他博客中记录自己从中学到大学的学习经历，觉得自己简直弱爆了，太弱了，视野太狭隘了，真的，太狭隘了。有兴趣的同学可以点击进去看看： https://www.byvoid.com/zhs/blog/my-highschool-1。
　尤其今天看了很多前辈的博文，写记录自己过去一路走来的文章，然后看到这位同样 90 后的同行，看看现在自己的生活，看看自己曾经美好的计划，我就对自己喊了，shit~!真心讨厌现在的自己。简直看不下去。也许我有些激进了，但自己的确太差了。。。
　吐槽的文字就先写到这吧，多余的不说了，有和我同样境况的同学一起加油吧～也欢迎和我交流。</description></item><item><title>程序员的 318 骑行之旅</title><link>//imziv.com/posts/2013/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84318%E9%AA%91%E8%A1%8C%E4%B9%8B%E6%97%85/</link><pubDate>Tue, 15 Oct 2013 10:39:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84318%E9%AA%91%E8%A1%8C%E4%B9%8B%E6%97%85/</guid><description>马上到十一月了，算上实习的时段，即是我踏上社会工作一年时间了。今年 6 月份还回到母校拿去了我的毕业证，便依依不舍得继续回到了工作的岗位，继续码农的日子。拿毕业证期间，总共也就请了 3 天假，从南京回到武汉，想在毕业的时候好好玩一下，可是却什么也没有做，只是和同学吃了吃饭，叙叙旧，然后大家就各奔东西了。
大概 8 月份的时候，在网上看到了一朋友的召集帖，关于 9 月中旬骑行 318 国道去拉萨的信息。那段时间工作状态实属不好，效率也不高。想想今年自己刚刚毕业，说了好多次要疯狂一把却一直没有去实现，大学有时间的时候那会没钱，毕业工作有点钱却没有时间，确实是一件很纠结的事情。不过仔细研究了下 9 月份的时间，正是中秋和国庆假期在一起的时间，心中便盘算请半个月假，加上这些假期便刚刚够骑行 318 整个行程了。是的，我联系朋友了，决定加入这次旅行了～！大概在出发前半个月，我向老板提出了请假的请求，其实当时心中很忐忑，不知道老板会不会答应，不过最终老板同意了我的请假，当时也是非常大高兴，再次感谢老板的支持，让我拥有了这次刺激，欢乐，无数美景相伴的 318 骑行之旅～
　9 月 12 号，我坐上了去成都的火车，在车上满满想的是对这次旅程的幻想。其实在这次骑行之前好多年我没怎么骑自行车了，大概大学的时候偶尔和同学出去骑骑自行车玩玩，然后就是在出发前一个月每晚尽量出去骑 15 公里左右，最远的估计也就是 20 多公里而已。当时骑行 318 国道从成都到拉萨，总路程是 2100 公里左右，平均每天 100 公里左右，攻略骑行周期是 24 天，其中翻越 4000 海拔以上的山峰有 12 座，包括 2 座 5000 海拔的山。有些路段的路都是泥浆，还伴随这滑坡，而旁边就是峭壁与大河。
　在 9 月 13 号我已是到达了这座天府之城—成都。在成都简略的修整，然后做了些最后的准备，补给了一些装备，买了些保暖的衣物。在成都遇见些从拉萨过来的驴友，说那边天气有点冷，所以要准备些保暖的装备。9 月 15 号是我们出发的日子，浩浩荡荡的 15 个人便从成都出发，第一程 150 公里到雅安。那天早晨在成都买了 4 个包子，吃了一口实在难吃，我便全部扔了，这一顿早餐不吃，害的我一整天吃尽了亏，也是给我后来的行程上了一课！整个路程中队伍保持每小时 25 公里的时速，大约到中午的时候，骑行了将近 60 公里左右，离中午补给点还有 20 公里左右的时候，体力出现严重下滑，肚子相当空虚，任凭我怎么打起精神，就是没劲，怎么怎么就是踩不动，之后被大部队甩开了 10 公里左右，没办法，在后面我只能慢慢踩，后来发现一些被我们超越的队伍也是骑上来了，还有女汉子，对我我加油，当时心里难受的很，竟然被女汉子给超越了！只好停下车吃了吃随带的饼干，当时貌似并没有起太大的作用，当我骑到补给点的时候，大部队的午饭已经吃完了，我炒了一个餐，猛猛的吃了几碗饭，吃完大约调整了下，下午的 80 公里就又开始了。
　吃完饭果然还是不一样，不过大概骑了 40 公里左右的时候，体力又出现下滑，还伴随着拉肚子，一路上不断的吃，喝红牛（大家都说只能是心理作用）。在离雅安市还有几公里，爬最后一个山坡的时候，已经 8 点钟了，队伍大部分人已经到了，而那个时候天已经黑了，我一个在后面拼命的爬那个坡，这个坡我骑上去，掉下来，骑上去，掉下来了我自己记不得有多少次，当时心里太难受了，想到了为什么没有人来帮我，想到了父母，真的，心里相当的难受，很无助。当时自己可能心有点太急了，因为比较晚了，天也黑了，人生地不熟，最后慢慢的终于推了上去，当看到最后几公里都是下坡的时候，一阵轻松，下去的时候连刹车也是没有带，一口气下去了。住到旅社的时候，下了驮包，人胃不知为何有点恶心想吐的感觉，找了张床，一动不动的躺了半个多小时，然后去洗澡，洗衣服，吃完饭就立马躺下休息了，那一夜下了一晚的大雨。</description></item><item><title>简谈“开放平台”设计中的一些感悟</title><link>//imziv.com/posts/2013/%E7%AE%80%E8%B0%88%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/</link><pubDate>Wed, 28 Aug 2013 14:21:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E7%AE%80%E8%B0%88%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F/</guid><description>从 2012 年 11 月份实习开始，到现在 2013 年 9 月已经算是工作将近一年时间了,个人是从工作中学到了不少东西的。刚进公司的时候主要是负责平台服务器开发，后来由于我对前端的一些偏向，所有年后不久就转到公司前台业务的 Web 开发。因为我从公司开放平台服务的开发，然后到公司 web 产品的开发这 2 个部分都有参与，所以自己对公司的这个架构设计上和业务层面的一些设计也是有了自己比较深刻的感受。其中开发过程中发现公司开发平台设计中，由于一些不合理的设计，造成了公司之后的一些依赖开放平台服务器的项目的开发成本严重的增加，并影响了整个开放平台的生态和布局。仅此写文总结，并无他意，希望对自己之后的工作有帮助。下面让我细细讲解我的一些理解。
开放平台的理解　 　开放平台简而言之即是一个可提供数据接口的服务器，什么样的数据就要根据具体的业务了。如今各大公司都有自己相应的开放平台，例如新浪微博的开放平台，百度开放平台等等。开放平台主要是给开发者提供了丰富的数据接口，让开发者在利用已有的开放平台的基础上可以轻松的开发出满足自己业务设计的程序。所有一个开放平台的设计如果不合理会直接导致开发者的开发成本直接翻倍。开放平台本身是为了简化并降低开发者的开发成本的，如果由于设计的不合理，返回会造成帮倒忙情况。
公司的开放平台的现状 　公司开放平台的主要功能是为开发者和公司用户提供数据支持，其中主要存贮处理的是从远程硬件设备上面采集过来的传感器数据，并支持对相应的设备进行远程控制。当然，平台支持开发者注册接入自己的传感器和控制设备的，并提供公司项目和产品的支持。起初，这个平台包含的内容比较少，只是对简单的传感器，控制设备进行的管理和数据处理。后来由于公司在开发一些项目时候，由于业务的需求，逐渐抽象了一些新的概念，例如：场景，权限。当时平台团队为了适应更多的项目，并且为了满足公司 web 项目组和手机项目组的接口需求，在没有慎重考虑的情况下，决定把业务性的东西给设计到了开发平台当中，但是当时只是迎合了当前的项目，对广泛的需求欠缺了考虑。而后果是可想而知的。下面是平台对外数据支持的一个结构图：
　在平台为了适应项目上的一些需求的同时，由于融入了相应的业务概念后，当为了满足公司移动端和 web 产品更多的项目开发需要的时候，平台组不得不为了不断的需求变动对平台的设计再三的更改，同时也需要提供越来越多的接口。由于平台在业务上过多的设计，导致的一个很明显的结果就是，发现开放平台总是不能满足新项目的需求，而平台开发团队老是要重新的设计和开发。具体后遗症我总结的有下面几条：
开放平台由于不小心融入了过度的业务性设计，开放平台一点都不开放！有强烈的业务定制化性质！ 平台陷入了重新设计开发的恶性循环，增加了平台团队后期的开发成本和维护成本 开发者发现开放平台并不能满足自己项目的业务需求 公司 web 项目组每次的开发周期并未得到缩短，反而由于每次项目上的问题，在平台接口上花费了大量的精力 开放平台丢失了为开发者提供开放接口的本质 由于整个平台支撑着公司所有产品与项目的运营，同时目标是对外开放，所有由于这些设计上的失误，对公司的整个产品线的影响是相当大的。个人体会是前期对这种开发平台的设计时一定要慎重考虑，不然后果是相当的麻烦的。</description></item><item><title>jquery 实现文件异步上传</title><link>//imziv.com/posts/2013/jquery%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0/</link><pubDate>Wed, 07 Aug 2013 18:18:00 +0000</pubDate><guid>//imziv.com/posts/2013/jquery%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0/</guid><description>前言 这里用了 2 个 JS 插件，一个是 Jquery 原生 js，我的版本是 jquery-1.7.2.min.js，另一个是 jquery.form.js。这个 form.js 是关键，不可少哦。另外，
我的服务器端用的是 Play Framework,版本是 2.1。下面是代码部分，贴出的是关键部分：
前端代码 html: &amp;lt;form id=&amp;#34;form1&amp;#34; method=&amp;#34;POST&amp;#34; action=&amp;#34;/image/upload&amp;#34; ENCTYPE=&amp;#34;multipart/form-data&amp;#34;&amp;gt; &amp;lt;input id=&amp;#34;uploadFile&amp;#34; type=&amp;#34;file&amp;#34; name=&amp;#34;myfile&amp;#34; /&amp;gt; &amp;lt;/from&amp;gt; Javascript:
$(&amp;#34;#uploadFile&amp;#34;).change(function(){ var message = &amp;#34;t&amp;#34;; $(&amp;#34;#form1&amp;#34;).ajaxSubmit({ method : &amp;#34;POST&amp;#34;, success : function(data){ //成功　if(data == &amp;#34;ok&amp;#34;){ alert(&amp;#34;上传成功&amp;#34;) }else{　alert(&amp;#34;上传失败&amp;#34;);　} }, error : function(){ alert(&amp;#34;网络错误，请稍后重新尝试！&amp;#34;); } }); }); 服务端代码 public static void upload(File myfile){ String msg = &amp;#34;fail&amp;#34;; try{ //图片写入路径,此处我的位置是项目的根目录 File temp = new File(myfile.</description></item><item><title>Httpclient 实现带参文件上传</title><link>//imziv.com/posts/2013/httpclient-%E5%AE%9E%E7%8E%B0%E5%B8%A6%E5%8F%82%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</link><pubDate>Wed, 07 Aug 2013 17:13:00 +0000</pubDate><guid>//imziv.com/posts/2013/httpclient-%E5%AE%9E%E7%8E%B0%E5%B8%A6%E5%8F%82%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</guid><description>这里直接贴出的是我封装好的 doPostFile 方法,httpclient 的版本是 3.1。
public static String doPostFile(String url, Part[] parts){ String response = null; PostMethod postMethod = new PostMethod(url); try{ //设置请求实体 postMethod.setRequestEntity(new MultipartRequestEntity(parts,postMethod.getParams())); HttpClient client = new HttpClient(); //设置连接超时限度 client.getHttpConnectionManager().getParams().setConnectionTimeout(5000); client.executeMethod(postMethod); if(postMethod.getStatusCode() == HttpStatus.SC_OK){ response = new String(postMethod.getResponseBodyAsString().getBytes(&amp;#34;utf-8&amp;#34;)); } } catch(Exception e){ LOGGER.error(&amp;#34;HttpServiceSender.doPostFile()&amp;#34;,e.getMessage()); } finally { postMethod.releaseConnection(); } return response; } 调用此方法的代码，注意参数的传递方式
public String uploadImage(File file,String id,String name){ String result = null; try{ //文件part,new FilePart添加的是File类型的文件，后面StringPart则为字符串参数 Part[] parts = { new FilePart(&amp;#34;file&amp;#34;, file), new StringPart(&amp;#34;id&amp;#34;, id), new StringPart(&amp;#34;id&amp;#34;,name)}; result = HttpServiceSender.</description></item><item><title>Javascript 的字面量对象以及如何拆解字面量对象</title><link>//imziv.com/posts/2013/javascript%E7%9A%84%E5%AD%97%E9%9D%A2%E9%87%8F%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%8B%86%E8%A7%A3%E5%AD%97%E9%9D%A2%E9%87%8F%E5%AF%B9%E8%B1%A1/</link><pubDate>Thu, 18 Jul 2013 14:28:00 +0000</pubDate><guid>//imziv.com/posts/2013/javascript%E7%9A%84%E5%AD%97%E9%9D%A2%E9%87%8F%E5%AF%B9%E8%B1%A1%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%8B%86%E8%A7%A3%E5%AD%97%E9%9D%A2%E9%87%8F%E5%AF%B9%E8%B1%A1/</guid><description>简单的说，字面量对象提供了一直非常方便构建新对象的方式，它的格式非常简单且容易阅读。是大多数前端程序员在构建对象时比较推崇的一种方式。
格式 var person = { name : &amp;#34;ziv&amp;#34;, sex : &amp;#34;男&amp;#34;, age : &amp;#34;22&amp;#34; } 注意字面量对象最后一个属性是不需要逗号的
访问字面量对象的属性值 person.name //或者采用数组形式传入属性的key取得value person[name] 获取字面量对象的所有 key 值的集合： 获取子字面量对象的所有 key 值，通常可以调用 Object 对象的 getOwnPropertyNames();这个方法，示例如下：
var arr = Object.getOwnPropertyNames(literals); arr 为一个数组对象，取得 name 的值 arr[index];
如何遍历字面量对象 方法一，也是推荐的一种方法，for&amp;hellip;in 循环
var style = &amp;#34;&amp;#34;; for(var property in literals){ console.log(property); //属性值 console.log(literals[property]); //key值 style = style+property+&amp;#34;:&amp;#34;+literals[property]+&amp;#34;;&amp;#34;; } console.log(style); //组合成一个样式串 方法二，比较笨，可以先获取 property 集合值，然后通过遍历 property 获取 key 的值
var propertys = Object.</description></item><item><title>什么是 CouchDB？</title><link>//imziv.com/posts/2013/%E4%BB%80%E4%B9%88%E6%98%AFcouchdb/</link><pubDate>Fri, 05 Jul 2013 11:16:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E4%BB%80%E4%B9%88%E6%98%AFcouchdb/</guid><description>本文对 CouchDB 的解释是来自 Apache CouchDB 的官网的译文，如果有什么问题，请指正。
1.CouchDB 简介
CouchDB 是一种利用 JSON 文件，javascript 作为 MapReduce 查询，以及常规 HTTP 作为 API 的一种数据库系统。
2.CouchDB，一个为 Web 而生的数据库
CouchDB 是一个完全为了 web 而生的数据库，它利用了 JSON 文件来存贮数据。CouchDB 利用你的 web 浏览器，通过 HTTP，查询，结合来处理这些 JSON 文件，并且利用 Javascript 来传输这些数据。CouchDB 在现代浏览器以及移动浏览器上面的支持是非常好的，你甚至可以直接利用 CouchDB 来服务于你的 web 应用。你可以有效的利用 CouchDB 的增量复制特性去分发你的数据或者你的应用。CouchDB 利用了自动冲突检测功能，支持 master-master 的安装。
CouchDB 另外附增了一系列的特性，例如动态的文档转换，和实时的变更通知，CouchDB 的这些特性掀起了一股 web 应用开发的小风波。CouchDB 甚至携有一种简单的使用 web 管理控制的方式。这种特性直接由 CouchDB 提供。我们担心着大量的分布式扩展，CouchDB 是高可用性和分区容忍的，同时也是保持最终一致性的。我们一值都大量的关心着用户的数据。CouchDB 拥有着一个容错引擎，它将把你数据的安全始终放在第一位的。
※更多关于 CouchDB 请访问 Apach CouchDB 官网，此文意在简单介绍 CouchDB，一个利用了现代 web 的技术。http://couchdb.apache.org/</description></item><item><title>JS 模拟 Alert 与 Confirm 对话框</title><link>//imziv.com/posts/2013/js%E6%A8%A1%E6%8B%9Falert%E4%B8%8Econfirm%E5%AF%B9%E8%AF%9D%E6%A1%86/</link><pubDate>Sun, 09 Jun 2013 13:09:00 +0000</pubDate><guid>//imziv.com/posts/2013/js%E6%A8%A1%E6%8B%9Falert%E4%B8%8Econfirm%E5%AF%B9%E8%AF%9D%E6%A1%86/</guid><description>这 2 个例子都是用原生 JS 写的，主要是用 JS 拼接了界面，并未做过多的事件监听。，样式用了 Css3 的一些特性。
调用方式则为：
//Alert Alert.show(&amp;#39;我警告你哦~&amp;#39;); //Confirm Confirm.show(&amp;#39;我是确认对话框&amp;#39;,function(){ doSomething(); }); 组件详情看下面的具体代码：
1.CSS 样式
由于这 2 个组件的样式差不多，所用共用了一样的 css，样式代码如下：
/** * dialog */ .dialog { top:40%; left:40%; width: 250px; min-height: 100px; position:fixed; z-index:9999; text-align: center; padding:10px; border:solid #bcc5c1 1px; background:#FFF; border-radius:3px; -moz-border-radius:3px; -webkit-border-radius:3px; padding:0px; behavior: url(PIE.htc); } .dialog .dialog-header { position:relative; width:100%; height:30px; margin:0px; background:#0CF; background:linear-gradient(top,#d1d4d3 0%,#c4c7c8 100%); background:-webkit-linear-gradient(top,#d1d4d3 0%,#c4c7c8 100%); background:-moz-linear-gradient(top,#d1d4d3 0%,#c4c7c8 100%); border-radius:3px 3px 0px 0px; -moz-border-radius:3px 3px 0px 0px; -webkit-border-radius:3px 3px 0px 0px; behavior: url(PIE.</description></item><item><title>详解 CSS 样式的 position 属性</title><link>//imziv.com/posts/2013/%E8%AF%A6%E8%A7%A3css%E6%A0%B7%E5%BC%8F%E7%9A%84position%E5%B1%9E%E6%80%A7/</link><pubDate>Sun, 09 Jun 2013 13:09:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E8%AF%A6%E8%A7%A3css%E6%A0%B7%E5%BC%8F%E7%9A%84position%E5%B1%9E%E6%80%A7/</guid><description>平时在写 css 样式的时候 position 是我们比较常用的一个属性。有时候会弄不清其几个属性值的真正区别。不过用的时间久了，也就慢慢的明白了。不过其实想用好 position 有时候还是需要些技巧的。写篇博文总结下自己。
position 的作用：用于设置对 html 元素的定位方式　position 属性的值：
值名称 描述 static position 的默认值，设置此属性时，元素按照正常的流式布局往下排列 inherit 继承父元素的 position 值 relative 相对于其他元素的定位 absolute 相对于采用 static 定位的父元素的绝对定位 fixed 相对于浏览器的绝对定位 备注：如果给元素才用了 top,left 等定位属性时，只有 relative,absolute,fixed 才会有效果。
3.应用实例
　这里主要记录是 absolute 和 fixed 属性值。absolute 与 fixed 的好处主要就是它的定位不拘束于其它同级元素，不想其它几种布局自己的定位会被其它元素所影响。所以像做一些动画效果，div 浮动效果的时候，这个两个属性值就尤为适合了。
　结合 z-index 的使用
　z-index 用于控制元素在页面中层级的位置，就跟高楼大厦的楼层一样，z-index 则可用于控制所在的楼层。absolute 与 fixed 都支持 z-index 属性。所以当几个元素采用 absolute 或者 fixed 属性时，为了达到层次显示的效果，z-index 属性就很方便了。</description></item><item><title>Play Framework 常用标签 list,set,如何遍历 list、map 类型数据</title><link>//imziv.com/posts/2013/play-framework%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BElistset%E5%A6%82%E4%BD%95%E9%81%8D%E5%8E%86listmap%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/</link><pubDate>Tue, 29 Jan 2013 10:52:00 +0000</pubDate><guid>//imziv.com/posts/2013/play-framework%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BElistset%E5%A6%82%E4%BD%95%E9%81%8D%E5%8E%86listmap%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE/</guid><description>最近一段时间的项目都是在 Play 这个框架上进行开发的，挺强大的，但不足之处也挺多的。今天分享下 play 中强大的标签，遍历 list,map 类型的数据的用法。
遍历单纯的 list 数据,例如：Listpeoples;
#{list peoples,as:&amp;#39;people&amp;#39;} //peoples为list对象，people为实体变量名 ，name则为实体相对应的属性值 ${people.name} #{/list} 遍历list中泛化的map类型，例如：List&amp;lt;Map&amp;lt;People&amp;gt;&amp;gt; peoples; #{list peoples,as:&amp;#39;people&amp;#39;} //peoples为list对象，people为实体变量名 ，name则为实体相对应的属性值 #{list people,as:&amp;#39;map&amp;#39;}${map.value.property}#{/list} //第二个list将people再次转换，map取值则像正常的取值，value为map的value,可是对象类型，property则为对象类型的属性值 #{/list} 遍历单纯的 Map 类型，例如：Map&amp;lt;id,People&amp;gt; people;
//如果知道map的key值，则可以直接通过一下方式获取： ${people.get(key).name} //如果是要遍历一个map,同样适用list标签 #{list people,as:&amp;#39;peo&amp;#39;} ${peo.value.name} //peo为map变量，value为key的值，name为属性值 #{/list} //如果id是一个对象的话，获取其对象的值则可以这样： #{list people,as:&amp;#39;peo&amp;#39;} ${peo.key.name} //peo为map变量，key为对象，key为实体对象，name为属性值 #{/list} 遍历 map 与 list 的组合，例如：Map&amp;lt;id,List&amp;gt; people;
//知道ID的情况下可以这样,通过get方法获取对象 #{list people.get(id),as:&amp;#39;peo&amp;#39;} ${peo.name} #{list} //如果people是多个map对象，则可以 #{list people,as: &amp;#39;map&amp;#39;} #{list map.value,as:&amp;#39;people&amp;#39; set,if,break 标签的使用:
//模拟遍历list时的计数器 #{set count:0}//设置变量count #{list data,as:&amp;#39;li&amp;#39;} &amp;lt;h1&amp;gt;${count}&amp;lt;/h1&amp;gt; #{if count == 2} &amp;lt;% break %&amp;gt; //跳出 #{/if} #{ifelse count == 3} &amp;lt;h1&amp;gt;${count}&amp;lt;/h1} #{/ifelse} #{else} &amp;lt;h1&amp;gt;${count}&amp;lt;/h1&amp;gt; #{/else} #{set count:count+1}//自增 #{/list}</description></item><item><title>我所理解的团队</title><link>//imziv.com/posts/2013/%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84%E5%9B%A2%E9%98%9F/</link><pubDate>Tue, 29 Jan 2013 10:52:00 +0000</pubDate><guid>//imziv.com/posts/2013/%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84%E5%9B%A2%E9%98%9F/</guid><description>对于团队这个概念，我小时候的理解就是像国家体育队这样的团体，例如篮球队，或者足球队等。各个运动员在团体中相互发挥自己的优势，从而使整个队伍能发挥出最好的实力。而在我读大学的时候，我选择了软件这个专业，从这个专业中我了解到软件实际工作中，软件开发也是一个非常讲究团队概念的一个工作。只有拥有出色的团队，才能做出优秀的软件产品，然而当我真正踏入这个行业后，对这句话更是深信不疑。
在我大一的时候我遇到了我人生中非常重要的一只团队——班级篮球队。可能大家都有过这么个小小的经历，而我把它作为了我的论资。但的确我想表达的是当时的我们真的很团结，很包容。我们不会过分计较个人的失误，我们不会相互埋怨谁，也不会贪图所谓的功劳，有的只是鼓励，相互帮助。正因为如此，我们这支篮球团队在当时才可取得战无不胜的成绩。从此我爱上了团队这词，我觉得团队的力量是无限大的，团队让我们更有成就感。所以当我把这个观念转移到软件开发团队上的时候，我就有了另一些想法，或许是称得上梦想的想法吧。我想某一天我可以身在这样的一直开发团队中，我们创意无限，热爱技术，相互协作的完成各种有创意，有意义的事情，也许能做些在正面影响人们生活的事情。
在如今这样一个缺乏凝聚力的社会，如果我们身在的工作岗位上处处是勾心斗角，各种埋怨，我不知道这样工作有什么意思，我也想象不出可以完成什么样的杰作。如果身在一个有凝聚力的团队，相互包容，相互为梦想，为共同的目标去奋斗，不管成功是否，我觉得都是有意思，有意义的。
不求在我做程序员的岁月里在多么伟大或者怎样的公司呆过，但求我在这样一支包容，鼓励，团结的团队中为共同目标战斗过！</description></item><item><title>fileloder.js+struts2 实现文件异步上传，无页面刷新效果。</title><link>//imziv.com/posts/2012/fileloder.js+struts2%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%97%A0%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E6%95%88%E6%9E%9C/</link><pubDate>Thu, 01 Nov 2012 11:11:00 +0000</pubDate><guid>//imziv.com/posts/2012/fileloder.js+struts2%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%97%A0%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E6%95%88%E6%9E%9C/</guid><description>一、前言 　之前在写一个 web 的文件上传的功能时，希望在 web 前端对文件的大小，及类型用 js 给验证掉，然后提交到服务器保存入数据库，同时要求达到页面无刷新的异步效果。在网上也看到有很多用 iframe 的方式实现了这样的无刷新效果。不过我在这里给大家介绍的是一款 js 插件，非常强大。在用这款插件前，在网上查询了好久关于 js 对文件类型的验证，当然这样的方法很多，大多数通过正则表达式对文件后缀验证的方式，只不过对文件大小验证这项功能上网上贴出的大多数代码都不靠谱，很多浏览器根本就不支持很多属性操作，比喻说 filesize 这项，而且浏览器的兼容性上考虑起来非常麻烦。不过所幸后来我找到了 fileloader.js 这个插件，前身好像是 ajaxfileupload.js，这款插件可通过 js 提交验证文件的大小及类型、支持拖拽上传。有时间把它的源码研究下也跟大家分享下。fileloader.js 官方地址是：&amp;laquo;http://fineuploader.com/&amp;gt;。当然上面也有很多 DEMO&amp;gt;，大家可以自己去看。
二、工作准备 　添加 strut2 框架；将下载的 fileloader.js 的文件添加到页面；将 fileloader.css 文件添加到页面；添加 jquery 包。
三、HTML 页面代码 &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;文件上传&amp;lt;/title&amp;gt; &amp;lt;link href=&amp;#34;css/fileuploader.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; /&amp;gt; &amp;lt;script language=&amp;#34;javascript&amp;#34; type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;js/jquery-1.8.0.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script language=&amp;#34;javascript&amp;#34; type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;js/fileuploader.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script language=&amp;#34;javascript&amp;#34; type=&amp;#34;text/javascript&amp;#34;&amp;gt; $(document).ready(function() { var thumbnailuploader = new qq.FileUploader({　//new fileuploader object element: $(&amp;#39;#thumbnail-fine-uploader&amp;#39;)[0],　//选定页面div元素，这里用了jquery的选择器 action: &amp;#39;service/uploadImage&amp;#39;,　//提交的action地址 debug: true, multiple: false, allowedExtensions: [&amp;#39;jpeg&amp;#39;, &amp;#39;jpg&amp;#39;, &amp;#39;gif&amp;#39;, &amp;#39;png&amp;#39;],　//允许上传的文件类型 sizeLimit: 500*1024,　//允许上传文件的大小，这里是500KB，500kb = 500*1024KB uploadButtonText:&amp;#39;图片上传&amp;#39;,　//在页面显示上传按钮 inputName: &amp;#39;myFile&amp;#39;,　//在input标签中的name属性设置为myFile messages:{　//设置的提示信息，包括大小类型等的操作 typeError:&amp;#39;只允许jpeg,jpg,gif,png格式的图片文件{file}&amp;#39;, sizeError:&amp;#39;文件大小不能超过{sizeLimit}。{file}&amp;#39;, emptyError:&amp;#39;文件不可为空{file}&amp;#39;, onLeave:&amp;#39;文件正在上传，离开将终止上传操作？&amp;#39; }, showMessage:function(message){　//显示信息 alert(message); }, // 设置返回从服务器反馈的error信息，不过我这里利用这个responseProperty属性反馈msg信息， // 具体的msg内容在服务中设置。 failedUploadTextDisplay: { mode: &amp;#39;custom&amp;#39;, maxChars: 40, responseProperty: &amp;#39;msg&amp;#39;, enableTooltip: true } }); })　&amp;lt;/scripte&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;fieldset&amp;gt; &amp;lt;legend&amp;gt;&amp;lt;span&amp;gt;您可以上传一张不超过500kb的图片&amp;lt;/span&amp;gt;&amp;lt;/legend&amp;gt; &amp;lt;div&amp;gt; &amp;lt;div id=&amp;#34;thumbnail-fine-uploader&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/fieldset&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 三、Action 服务器端代码 提示：我在项目中使用了 S2SH 框架，所以注意下自己写代码时候的区别。</description></item><item><title>Struts2+Hibernate+Spring 在 mysql 更新 Blob 类型的数据</title><link>//imziv.com/posts/2012/struts2+hibernate+spring-%E5%9C%A8mysql%E6%9B%B4%E6%96%B0blob%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE/</link><pubDate>Thu, 06 Sep 2012 11:43:00 +0000</pubDate><guid>//imziv.com/posts/2012/struts2+hibernate+spring-%E5%9C%A8mysql%E6%9B%B4%E6%96%B0blob%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE/</guid><description>看了好多别人写的，不是写的很复杂，就是写的简单的不靠谱。其实很简单 0 0.
以下的代码是更新指定 id 里面的 image 文件的方法。具体代码如下：
public boolean updateImage(Image image) { // 这里我用的是Spring 的HibernateTemplate 模板 Session session = template.getSessionFactory().openSession(); // 当然你可以直接用Hibernate获取session对象 Transaction transaction = session.beginTransaction(); session.saveOrUpdate(image); session.flush(); transaction.commit(); session.close(); return true; } 下面是我的 Image class
public class Image { private int id; private Blob image; public int getId() { return id; } public void setId(int id) { this.id = id; } public Blob getImage() { return image; } public void setImage(Blob image) { this.</description></item><item><title>Strut2 与 Hibernate 的一个 web 分页功能</title><link>//imziv.com/posts/2012/strut2%E4%B8%8Ehibernate%E7%9A%84%E4%B8%80%E4%B8%AAweb%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/</link><pubDate>Thu, 06 Sep 2012 11:32:00 +0000</pubDate><guid>//imziv.com/posts/2012/strut2%E4%B8%8Ehibernate%E7%9A%84%E4%B8%80%E4%B8%AAweb%E5%88%86%E9%A1%B5%E5%8A%9F%E8%83%BD/</guid><description>代码没有进行过多的封装，可能看起来有点 action 代码部分，hibernate 在这里只起到了一个查询记录集的作用。
import java.util.ArrayList; import java.util.List; import java.util.Map; import org.apache.struts2.interceptor.SessionAware; import org.hibernate.Criteria; import org.hibernate.Session; import com.HibernateSessionFactory; import com.hibertest1.dto.MyMessage; public class FenYeAction implements SessionAware{ private int start = 0; public int getStart() { return start; } public void setStart(int start) { this.start = start; } public String getMessage(){ List&amp;lt;MyMessage&amp;gt; msgs = new ArrayList&amp;lt;MyMessage&amp;gt;(); Session se = HibernateSessionFactory.getSession(); Criteria crit = se.createCriteria(MyMessage.class); //创建Criteria 对象 msgs = crit.list(); int size = msgs.</description></item><item><title>Struts2 与 Spring 的整合</title><link>//imziv.com/posts/2012/struts2%E4%B8%8Espring%E7%9A%84%E6%95%B4%E5%90%88/</link><pubDate>Thu, 06 Sep 2012 11:32:00 +0000</pubDate><guid>//imziv.com/posts/2012/struts2%E4%B8%8Espring%E7%9A%84%E6%95%B4%E5%90%88/</guid><description>今天倒腾了半天，终于是把这个两个框架整合到一起了。还是要写一下总结，同时给大家一些帮助。
开发环境：myeclipse 9.0(不好用！）tomcat6.0 1.准备工作
需要导入的包：struts2 与 spring 基本的包就不用说了，我用的是 struts2.1 Spring 3.0，
尤其要注意 别少导入的几个是:Spring3.0 Web Libraries ; struts 支持 spring 的插件：struts2-spring-plugin-2.1.8.1.jar 将这个 jar 文件放到 lib 目录下 2.web.xml 的配置
除了 struts2 的核心配置外，我们还要加入 spring 的配置，代码如下：
&amp;lt;!--指明spring配置文件的位置!--&amp;gt; &amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;classpath*:applicationContext*.xml&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt; &amp;lt;!-加载spring的配置文件!--&amp;gt; &amp;lt;listener&amp;gt; &amp;lt;listener-class&amp;gt; org.springframework.web.context.ContextLoaderListener &amp;lt;/listener-class&amp;gt; &amp;lt;/listener&amp;gt; 注：如果你在运行的时候发现有 no found class org.springframework.web.context.LoaderListener 的异常 ，那你要注意你的 Spring3.0 Web 包的导入了
3.application.xml 的配置
&amp;lt;beans&amp;gt; &amp;lt;bean id=&amp;#34;userService&amp;#34; class=&amp;#34;com.test.service.UserServiceImpl&amp;#34;&amp;gt;&amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;userAction&amp;#34; class=&amp;#34;com.test.action.UserAction&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;userService&amp;#34;&amp;gt; &amp;lt;ref bean=&amp;#34;userService&amp;#34;/&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/beans&amp;gt; 4.UserAction 类 这个不用多说，注意的是 userService 属性的 getter 和 setter 方法</description></item><item><title>也许我不是个有天赋的程序员</title><link>//imziv.com/posts/2012/%E4%B9%9F%E8%AE%B8%E6%88%91%E4%B8%8D%E6%98%AF%E4%B8%AA%E6%9C%89%E5%A4%A9%E8%B5%8B%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/</link><pubDate>Thu, 06 Sep 2012 11:32:00 +0000</pubDate><guid>//imziv.com/posts/2012/%E4%B9%9F%E8%AE%B8%E6%88%91%E4%B8%8D%E6%98%AF%E4%B8%AA%E6%9C%89%E5%A4%A9%E8%B5%8B%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/</guid><description>当我刚刚接触到编程这个词汇的时候，经常会听到某某大牛的技术怎么样怎么样，然而当我步入大学后，我决然的选择了我向往已经的专业—软件开发。
我一直认为，只要通过自己努力，什么技术的一样我可以学的很好，就算高中的时候数学不好，英语也不是很好，但是我同样可以学习，来填充自己，就算我不是一个在编程方面有特别天赋的人，或者说我可能并不是很适合编程，其实我自己也不知道，可是我知道我自己喜欢编程这件事情。那些技术的大牛就像武侠中的高手，可以深藏不漏的隐居生活，也可以扬名立万，总之技术在我眼里就像武学一样，各种技术就是各种武学。所以，作为男孩子的我，当然向往这种感觉，喜欢做大侠的感觉。我喜欢把自己的各种想法，用自己喜欢的方式做成 web，去实现它，然后和他人分享我的东西，我喜欢这种感觉，我喜欢弄出不一样的东西，用编程做出有创造性的东西是我喜欢它的一个很重要的原因。
　我不得不承认我在数学方面没有太多的天赋，从小学的时候到大学，我的数学就是一般般，可能也是由于自己当时没有认真学习吧，因为我发现我的逻辑思维还是可以的。我一直觉得，我并不想成为编程界的多么有成就的人物，数学不好我可以学，所以这并不能阻挡我成为一个高手的动力。经过了 2 年多的学习，事实证明，我可以完成很多同学都不能完成的作品，或许是他们不愿意学习去做的原因吧，因为我觉得，如果他们愿意，这些同样难倒不了他们。同样我也不断的在学习着英语，因为英语决定了我将来可以站在多高的舞台上面，理所当然我想变的更好。
　也许我不是一个有天赋的程序员，对于某些算法的东西，对于有天赋的人来说，他们可能一个小时就可以搞定，可是我可能需要 2 个小时，或者更久等等，但是我并没有放弃对问题的思索，对答案的渴求。所以我一直觉得只要努力，可能你并不是一个有天赋的程序员，但至少你也可以成为一位优秀的程序员，stay hungry ,stay foolish.
　马上就要毕业了，就要踏上社会，找到适合的工作，可能找到适合自己的工作很难，这仅仅只是一个开始，希望能保持自己的初衷，在这条道路中不断的探索，前进！</description></item><item><title>将 mysql 中的 Blob 的图片在 jsp 中显示</title><link>//imziv.com/posts/2012/%E5%B0%86mysql%E4%B8%AD%E7%9A%84blob%E7%9A%84%E5%9B%BE%E7%89%87%E5%9C%A8jsp%E4%B8%AD%E6%98%BE%E7%A4%BA/</link><pubDate>Thu, 06 Sep 2012 11:32:00 +0000</pubDate><guid>//imziv.com/posts/2012/%E5%B0%86mysql%E4%B8%AD%E7%9A%84blob%E7%9A%84%E5%9B%BE%E7%89%87%E5%9C%A8jsp%E4%B8%AD%E6%98%BE%E7%A4%BA/</guid><description>本来我的例子是用 Struts2+Hibernate+Spring 三个框架搭建的，但是没有什么大碍，我们只有知道核心部分在怎么实现的就行。
以下是我的 Action 的代码：
//show image private static Image image = new Image(); public Image getImage() { return image; } public void setImage(Image image) { this.image = image; } //imageDao对象我是Spring注入进来的，你可以用new创建 public static void showImage(){ byte[] itemImage = null; HttpServletResponse response = ServletActionContext.getResponse(); response.reset(); response.setContentType(&amp;#34;image/jpeg&amp;#34;); try { image.setId(0); //通过getBytes()方法将获取的Blob类型数据转换 itemImage = imageDao.getImage(image). getBytes(1, (int)imageDao.getImage(image).length()); OutputStream out = response.getOutputStream(); out.write(itemImage); out.flush(); out.close(); } catch (SQLException e) { // TODO Auto-generated catch block e.</description></item><item><title>浅聊这 2 各月的学习</title><link>//imziv.com/posts/2012/%E6%B5%85%E8%81%8A%E8%BF%992%E5%90%84%E6%9C%88%E7%9A%84%E5%AD%A6%E4%B9%A0/</link><pubDate>Thu, 06 Sep 2012 11:32:00 +0000</pubDate><guid>//imziv.com/posts/2012/%E6%B5%85%E8%81%8A%E8%BF%992%E5%90%84%E6%9C%88%E7%9A%84%E5%AD%A6%E4%B9%A0/</guid><description>从今年的 7 月份学校放暑假，到如今马上又要开学，忽然间 2 个月的时间已匆匆过去。这两天也没有做出什么具有效率成果的事情，编写一文章做点总结吧。
当暑假即将来临的那会，我已经在着急忙忙的四处寻找能够实习的机会，希望能找到一个能尽快提升自己技术的公司来充实 2 个月的自己，无论工资多少，但我想一 定得在技术上面有一定的突破，这是我最初所期望的。但是事实总是曲折的，在寻找实习期间，遇到大多数的电话都是培训机构的，不过当时海辉当时打电话应聘我 Android 的实习生，但很不幸的是我当时一时的激动还是说错了几个问题，这也让我最终意识到自己的不足。培训机构始终给我的感觉就是如果自己去培训就 是对自己的不肯定、不自信，而我更觉得搞技术还是要靠自己的摸索和自学。培训只不过是给自己的路找个台阶罢了，而我，不需要。我要靠自己。
接下来的日子让我意识到了一些问题。首先，对于我这样一位才大二刚刚毕业的学生来讲，企业是不希望招到一位实习玩 2 月的未毕业的学生就开溜大吉的，也不希 望要一位没有生产能力的员工。其次，那个时候的我主要是 java，熟练 js,servlet,jsp,+struts2 框架的开发，在学校中做了很多相关 数据库操作的小型项目的练习（例如：宠物系统、考试系统），其次还会 c#,.net 但后者并不是我的拿手项。其实后来做了几次面试试卷，发现自己在 java 实战开发上确实还是有一定的经验，但 java 基础并没有自己想象的那么牢固，很多 知识我都还是理解的不够深、不够透，比喻一些修饰符的应用，一些包、类的作用，区别，等等。所以我决心利用暑假两个月，好好修炼自己，而地点则是在学校寝 室里面。
在放假之前我计划给自己搭建一个博客的，也是自己用 struts2 这么一个框架写的，非常简单的一些功能，例如常见的：分页，相册，和常见的数据增删改查 操作。但并未过多的应用 js+Ajax 技术。大约用了 1 到 2 个星期的时间，我把这个简单的博客给完成了，采用了我一贯喜欢的简洁风格，最后找了一个适用的 Linux 服务器，在上面测试了一段时间，也发现了不少问题，也相继的修复了些 Bug.还是挺有意思的，之后的时间我想把这博客尽量的完善。
其次，我发现 Ajax 技术还有 Spring，Hibernate 这几个技术在实际开发中的应用是非常频繁，而且也是非常重要的。Ajax 主要在 Web 页面 的体验上面做出来很好的表现，Spring 的话则主要对整个系统的性能上有很大的改善，而 Hibernate 则让我们对数据库的开发上变的更的心应手。所 以我觉得接下来的时间把这 3 个技术搞定，然后做一些小项目，同时提升自己的实战经验。 大约花了半个多月的时间，我差不多把 Ajax，Spring,Hibernate 的基本应用给搞清楚了，其中包括 Spring+Hibernate 的整 合，Spring+Struts2 的整合，在网上看了很多人写的博客，最好整合后，自己也写了些自己整合的经验总结。
在学完这 2 个框架的基本开发后，我便拿着这两个框架去完成自己脑袋中的一些小小的创想，在实际中完整自己知识，让我对这 2 个框架有更进一步的学习和认识。 我觉得通过这种拿自己的创想去完成一些东西也成为了自己的一种小小动力。项目期间同时也把之前的纯 javascript 用 Jquery 这个技术引入了页面 的开发，渐渐让自己的页面变得更生动，js 代码更加简洁。总之收获很多。</description></item></channel></rss>