<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>前端工程化 on 让美的事情发生</title><link>//imziv.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</link><description>Recent content in 前端工程化 on 让美的事情发生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2012-2020 Ziv小威</copyright><lastBuildDate>Sun, 26 Apr 2015 11:27:16 +0000</lastBuildDate><atom:link href="//imziv.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><item><title>利用 Gulp 优化部署 Web 项目</title><link>//imziv.com/posts/2015/%E5%88%A9%E7%94%A8gulp%E4%BC%98%E5%8C%96%E9%83%A8%E7%BD%B2web%E9%A1%B9%E7%9B%AE/</link><pubDate>Sun, 26 Apr 2015 11:27:16 +0000</pubDate><guid>//imziv.com/posts/2015/%E5%88%A9%E7%94%A8gulp%E4%BC%98%E5%8C%96%E9%83%A8%E7%BD%B2web%E9%A1%B9%E7%9B%AE/</guid><description>Gulp Gulp是一款项目自动化的构建工具，与Grunt一样可以通过创建任务（Task）来帮助我们自动完成一些工作流的内容。当然，今天我们的内容并不是讨论这二者的区别，仅仅是介绍介绍如何利用 Gulp 来优化我们的 Web 项目中前端自动化工作流。
引言 相信不少人看过百度大牛张云龙的那篇讲解大公司里怎样开发和部署前端代码?的文章，如果没有阅读的朋友请戳。由于在项目部署时，我们需要对项目 js，css,image 等文件进行压缩，合并处理，从而减少客户端对服务 Http 请求，已达到增强页面的加载速度，优化服务器带宽压力等等目的。所以本文主要讲的是利用 Gulp 优化我们 Web 部署优化工作。
安装&amp;amp;初始化 首先你得确保你的电脑上面是否已经安装了 Nodejs, 如果没有安装的话，那么请移步。假定有如下一个 Nodejs 的 Web 项目（当然你也可以是其他的例如 Java，.Net 的 Web 项目，且具体开发目录如下：
|- project |- src // 前端项目的源文件 |- js |- html |- images |- css |- bower_component // bower 前端依赖包管理 |- node_component // nodejs 插件 |- server |- api |- views |- app |- assets // 前端静态文件存放目录 |- js |- css |- images |- templates |- .</description></item><item><title>利用 javascript 和 WebGL 绘制地球 【翻译】</title><link>//imziv.com/posts/2015/%E5%88%A9%E7%94%A8javascript%E5%92%8Cwebgl%E7%BB%98%E5%88%B6%E5%9C%B0%E7%90%83-%E7%BF%BB%E8%AF%91/</link><pubDate>Sun, 22 Mar 2015 01:43:59 +0000</pubDate><guid>//imziv.com/posts/2015/%E5%88%A9%E7%94%A8javascript%E5%92%8Cwebgl%E7%BB%98%E5%88%B6%E5%9C%B0%E7%90%83-%E7%BF%BB%E8%AF%91/</guid><description>原翻译：利用 javascript 和 WebGL 绘制地球 【翻译】
在我们所有已知的 HTML5API 中，WebGL可能是最有意思的一个，利用这个 API 我们能够在浏览器中创造出炫酷 3D 场景的能力。本文将完整的向你展示一些炫酷是如何实现的。
需要特别指出的是，这篇教程我们将会构建一个地球行星模型，这个模型可以像一个兴奋的人一样环绕的旋转，另外，它可能使我们可以获得一些其他程序员的称赞，好吧，就这么多了。
准备 这篇教程我们将会用到一个令人着迷的WebGL插件:three.js. 这个插件跟 JQuery 有点像，不过它是针对WebGL的，它将很多复杂的原生 API 访问接口进行了抽象，从而让我们可以更轻易的利用WebGL的特性。
在 HTML 中，我们的可以通过正常的 script 标签引入这个插件，如下：
&amp;lt;script src=&amp;#34;//cdnjs.cloudflare.com/ajax/libs/three.js/r63/three.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 此处我们引用的是 CDN 版本，如果你有必要，可以使用本地的方法引入。然后我们需要确保WebGL有东西可以在上面进行渲染。这里我们有个灵活的做法：我们可以直接将一般的 Div 或者 Canvas 写到 HTML 中，或者我们可以另外用 JS 创建并且追加 canvas 元素到 Dom 里后再去渲染。这里我们采用第一种容易点的方法，如下：
&amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;container&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;earth.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; 添加完script标签连接到 Dom 中后，我们的 HTML 部分差不多就完成了。
下一步 Tree.js 本身是趋向把东西做的非常接近真实的 3D 桌面程序的。我们拥有一个场景，有一些东西现场直播，然后通过摄像机去浏览，然后有些灯光，特效，渲染在整场景上面，当然他们自身也全都是 3D 对象。这个场景的元素列表似乎有点吓人，在我们的earth.js文件里，所有的这些元素都可以当成形状变量，Javascript文件如下：
var scene, camera, light, renderer, earthObject; var WIDTH = window.</description></item></channel></rss>