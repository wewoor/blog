<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Typescript on 让美的事情发生</title><link>//imziv.com/tags/typescript/</link><description>Recent content in Typescript on 让美的事情发生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2012-2020 Ziv小威</copyright><lastBuildDate>Thu, 25 Jul 2019 21:51:40 +0000</lastBuildDate><atom:link href="//imziv.com/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>了解和实践 Typescript 的泛型 （Generics）</title><link>//imziv.com/posts/2019/%E4%BA%86%E8%A7%A3%E5%92%8C%E5%AE%9E%E8%B7%B5-typescript-%E7%9A%84%E6%B3%9B%E5%9E%8B-generics/</link><pubDate>Thu, 25 Jul 2019 21:51:40 +0000</pubDate><guid>//imziv.com/posts/2019/%E4%BA%86%E8%A7%A3%E5%92%8C%E5%AE%9E%E8%B7%B5-typescript-%E7%9A%84%E6%B3%9B%E5%9E%8B-generics/</guid><description>考虑如下场景 我们现在自己封装了一个 Table 组件，该组件提供 data 和 columns 两个属性，我们希望用户在使用组件时，编辑器能针对 data与column的值类型进行约束，而不是任意的一个值, 如下图所示：
public render() { const users = [{ name: &amp;#39;ziv&amp;#39;, birth: &amp;#34;1991&amp;#34; }]; const columns = [ { Key: &amp;#34;id&amp;#34;, name: &amp;#34;ID&amp;#34;, dataIndex: &amp;#34;id&amp;#34; }, { key: &amp;#34;name&amp;#34;, name: &amp;#34;姓名&amp;#34;, dataIndex: &amp;#34;name&amp;#34; }, ]; return ( &amp;lt;div&amp;gt; &amp;lt;Table data={users} columns={columns}/&amp;gt; &amp;lt;/div&amp;gt; ); } 正如上图所示，我columns中取数据的dataIndex字段，在传入的 users列表中是不存在的，所以结果是数据无法正常获取。 那么有没有办法在代码执行前就检测出这个问题呢？让我们看看用泛型如何解决这个问题。
泛型的基本语法 泛型（Generic）提供了一种在消费API对象时按需添加约束类型的能力，从而不必固定在某个单一的类型约束上，而是按使用的实际情况时具体约束。
基本用法如下：
函数（function) 语法
function A&amp;lt;T&amp;gt; {} function B&amp;lt;T,K&amp;gt; {} 使用
function getProperty&amp;lt;T, K extends keyof T&amp;gt;(obj: T, key: K) { return obj[key]; } let x = { a: 1, b: 2, c: 3, d: 4 }; getProperty(x, &amp;#34;a&amp;#34;); // okay getProperty(x, &amp;#34;m&amp;#34;); // error: Argument of type &amp;#39;m&amp;#39; isn&amp;#39;t assignable to &amp;#39;a&amp;#39; | &amp;#39;b&amp;#39; | &amp;#39;c&amp;#39; | &amp;#39;d&amp;#39;.</description></item></channel></rss>