<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>异步加载 on 让美的事情发生</title><link>//imziv.com/tags/%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/</link><description>Recent content in 异步加载 on 让美的事情发生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2012-2020 Ziv小威</copyright><lastBuildDate>Mon, 27 Jun 2016 11:01:48 +0000</lastBuildDate><atom:link href="//imziv.com/tags/%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/index.xml" rel="self" type="application/rss+xml"/><item><title>实现图片的异步加载</title><link>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%9A%84%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/</link><pubDate>Mon, 27 Jun 2016 11:01:48 +0000</pubDate><guid>//imziv.com/posts/2016/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%9A%84%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/</guid><description>图片异步加载功能是现在 web 中非常常见的一个针对 web 做优化的方法。尤其是在移动端，面对大量的图片列表的时候，如果没有做相应的优化，会直接导致页面滑动和加载的卡顿，而且用户会莫名的发现当前应用占用的流量会很大，因为他可能都没有浏览到很多图片，而程序就自动加载了所以的图片，对于一个流量吃紧的人来讲，这个也是很讨厌的。所以实现按浏览需求加载时十分有必要的。
其实实现图片异步加载的核心思路十分简单，就是通过判断当图片元素是否出现在视窗范围内后，则去加载图片资源，否则不加载。所以我们需要首先解决判断 img 元素是否处于视图范围内的这个核心问题。让我们看看下面的图：
通过抓取 img 元素，js 提供了相应的方法让我们可以获取到 img 元素距离视图 top，和 left 的距离，viewport 的高度和宽度等数据。然后通过监听窗口滚动事件，当页面滚动的时候，我们就去动态检测 img 元素的 top 和 left 值，与视窗的高度和宽度作比较，从而判断当前的 img 是否处于视窗范围。计算如下：
处于垂直范围： 图片距离视窗顶部距离 &amp;gt; 0 &amp;amp;&amp;amp; 图片距离视窗顶部距离 &amp;lt;= 视窗高度 处于水平范围： 图片距离视窗左边距离 &amp;gt; 0 &amp;amp;&amp;amp; 图片距离视窗左边距离 &amp;lt;= 视窗宽度
解决了这个判断图片在可视范围内的核心问题后，那么其他的问题都是否简单了。我们看下详细代码：
获取视窗的高度和宽度 var _viewPortHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0), _viewPortWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0); 是否处于垂直范围 function isOnVerticalViewPort(ele) { var rect = ele.getBoundingClientRect(); // 获取距离视窗的位置信息 return rect.</description></item></channel></rss>