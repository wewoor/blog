<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>前端技术 on 让美的事情发生</title><link>//imziv.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/</link><description>Recent content in 前端技术 on 让美的事情发生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2012-2020 Ziv小威</copyright><lastBuildDate>Fri, 05 Jan 2018 21:54:33 +0000</lastBuildDate><atom:link href="//imziv.com/tags/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml"/><item><title>Webassembly 技术的探索与实践</title><link>//imziv.com/posts/2018/webassembly-%E6%8A%80%E6%9C%AF%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5/</link><pubDate>Fri, 05 Jan 2018 21:54:33 +0000</pubDate><guid>//imziv.com/posts/2018/webassembly-%E6%8A%80%E6%9C%AF%E7%9A%84%E6%8E%A2%E7%B4%A2%E4%B8%8E%E5%AE%9E%E8%B7%B5/</guid><description>简介 Webassembly 是一种可以在浏览器端运行二进制格式代码的技术，他的目标则是想提供接近Native code的执行效率的技术体验。 相较于文本类型的Javascirpt而言，它拥有更小的体积，更短的加载时间，和更好的执行性能等特点 。Webassembly 允许你使用Rust或者C/C++等静态语言来编写，并生成目标文件后缀为wasm的二进制格式文件。通过Fetch或者Ajax与Webassembly提供的 API ，我们可以实现Javascipt与wasm模块的混用。
asm.js 与 wasm 相信很多人跟我一样有些疑问，asm.js 和wasm的关系，asm.js是Mozila工程师ALON ZAKAI提出的一种将静态语言编译为javascript的一种解决方案，这里有官方的PPT。而 asm.js 则实际上是 Javascript 的一个子集，通过在已有Javascript语法特上性进行可行的提前优化和性能改进（例如强制类型的一致性、手动的内存管理），从而达到编译器对Javascript代码提前优化的目的。所以，asm.js 实际上是一种针对Javascript编译器进行优化过的Javascript文本代码，而wasm则是浏览器直接支持的一种二进制格式文件，所以在加载速度上，文件体积上，执行效率上有更多优势。编写符合规范的asm.js代码，通过Emscripten编译工具来将静态语言编译为asm.js目标即可。
c语言源程序 int f (int var) { return var + 1; } 编译后的asm.js目标文件 // 通过`|0`提前声明变量和函数的返回类型。 function f(i) { i = i|0; return (i + 1)|0; } C/C++ 文件编译为 asm.js 目标文件的过程 注：LLVM 为底层虚拟机（Low Level Virtual Machine）的缩写，一种用 C++编写的, 可以用于优化任何静态语言（例如 Java，Go, Rust, Swift）的底层编译器基础技术。具体的编写和编译asm.js的方法可以查看 Emscripten 官方相关教程。
wasm 文件与 Javascript 生成机器码的区别 对比 2 种文件生成机器码的流程会发现，Javascript 文件生成机器码需要经过语法解析，代码优化，最后才转换成机器码等过程，而wasm的优势是本身就是通过编译器并优化过后的二进制文件，可以直接转换为机器码，省去了Javascript需要解析，优化的工作，所以在加载和执行上本身就具有优势。接下来我们尝试用C/C++写一个wasm模块。
用 C/C++ 编写一个 wasm 模块 搭建和安装 wasm 编写环境的步骤这里就不写了，具体可以查看官方， 这里我会编写一个模块，然后通过浏览器浏览运行结果。在这里我们利用递归算法，编写一个阶乘计算的模块factorial.</description></item></channel></rss>