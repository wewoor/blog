<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工作流 on 让美的事情发生</title><link>//imziv.com/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81/</link><description>Recent content in 工作流 on 让美的事情发生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2012-2020 Ziv小威</copyright><lastBuildDate>Thu, 01 Nov 2018 20:52:46 +0000</lastBuildDate><atom:link href="//imziv.com/tags/%E5%B7%A5%E4%BD%9C%E6%B5%81/index.xml" rel="self" type="application/rss+xml"/><item><title>利用 Atomic 构建 React 项目工作流</title><link>//imziv.com/posts/2018/%E5%88%A9%E7%94%A8-atomic-%E6%9E%84%E5%BB%BA-react-%E9%A1%B9%E7%9B%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/</link><pubDate>Thu, 01 Nov 2018 20:52:46 +0000</pubDate><guid>//imziv.com/posts/2018/%E5%88%A9%E7%94%A8-atomic-%E6%9E%84%E5%BB%BA-react-%E9%A1%B9%E7%9B%AE%E5%B7%A5%E4%BD%9C%E6%B5%81/</guid><description>原文地址: http://imziv.com/blog/article/read.htm?id=89
用过 React 的朋友都知道，React 项目文件夹的划分是有很多种的，在 React 官方关于文件结构这个部分给出了一些社区比较常见的构建方式的示例。例如有通过 features 或者 routes 进行分组的，也有通过模块类型（type) 划分的。在文档提到了一种针对 components 进行细化组织的方法 —— Atomic Design。如果还没了解过这个设计方法的朋友，不妨来看一看。
什么是 Atomic Atomic 是一套指导设计前端组件（Components）架构的方法。在我们的日常工作中，如何更好的划分和管理前端组件常常会是我们碰到的问题。Atomic 通过一系列设计思想和原则，可以很好指导我们的项目架构。用 Atomic 作者自己的话说，这套设计方法的灵感是来自于自己曾经学习过的化学课，以及对自然知识本身的思考。作者通过原子（Atoms)、分子(Molecules)、 有机体(Organisms)、模板(Templates), 页面(Pages) 这 5 种基本类型组件，通过灵活的组合，从而来满足我们日常的页面开发需求。 让我们先一一了解这 5 中不同类型的组件类型。
原子（Atoms) 正如化学知识中所表述的，原子（Atoms)是元素能保持其化学性质的最小单位，所以正好利用原子的概念，可以用来组件系统中的最小单位的组件，或者说抽象到最小粒度的组件，即我们在 HTML 中常见的一些基本元素，例如：按钮（buttons)，表单标签(labels)，输入控件（input)等等。既然是最小单位，Atom 类型的组件显然是无法再进行任何拆分了，如果能继续拆分，那么该组件应该被划分为分子组件（Molecules）。
分子（Molecules) 我们都知道，在化学概念中，分子是有若干原子组成。通过组合各种原子组件，我们可以轻易的可以组合出某种功能的分子组件。例如通过组合 input 控件和 button 组件，我们可以得到一个搜索（Search)分子组件，通过组合 button 和 a 标签，可以可以组合分页（Pagination）组件。
有机体（Organisms) 仅靠分子组件和分子组件的抽象，仍然是不能满足我们实际工作中对组件复用的需求，例如我们我们大部分项目中都有导航栏（Navigation Bar)、页头（Header)、页脚（Footer)、边栏（Sidebar)、列表（List) 等等组件，显然可以根据需要可以抽象成独立组件，以便后来的项目可以直接使用。可以看到的是，在有原子和分子组件的情况下，我们通过灵活组合这些原子、分子组件的方式，便可轻易达到我们的需求。而通过这类方式组合的组件类型我们便称之为有机体组件（Organisms)。
模板（Templates) 到这里，模板层就很好理解了。很显然，模板层是原子、分子、有机组件的结合体。例如包含头部（Header、Content、Footer)常见部分的首页模板、又或者各种左右上下布局模板组件等等。
页面（Pages) 页面这一层可能是复用率最低的一层了，因为业务需求大部分时候各不相同的，当然也不排除有复用页面的情况。页面组件自然就是个包含了其他四种组件类型的综合体了。有了前几层组件的抽象，可以轻松的应对各种业务页面，并且不断地可以丰富新组件到各类型自己中去，以便后面的项目中持续使用。
综合看下来，通过这 5 种组件的划分，就可以很好的满足我们实际项目中对页面组件进行划分和管理了。
Atomic 实践 根据 Atomic 的思路, 以 src 目录为基础，在 React 项目中，我可以得到了类似如下的开发目录：</description></item></channel></rss>