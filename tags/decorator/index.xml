<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Decorator on 让美的事情发生</title><link>//imziv.com/tags/decorator/</link><description>Recent content in Decorator on 让美的事情发生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2012-2020 Ziv小威</copyright><lastBuildDate>Sun, 05 Nov 2017 14:36:35 +0000</lastBuildDate><atom:link href="//imziv.com/tags/decorator/index.xml" rel="self" type="application/rss+xml"/><item><title>Decorator 简介及实战</title><link>//imziv.com/posts/2017/decorator-%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%AE%9E%E6%88%98/</link><pubDate>Sun, 05 Nov 2017 14:36:35 +0000</pubDate><guid>//imziv.com/posts/2017/decorator-%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%AE%9E%E6%88%98/</guid><description>前言 用过 Java 的朋友都知道，装饰器（Decorator)是一种十分非常方便改变类运行是行为的一种方式，例如在 Spring 框架中我们用到比较多的注解（@Autowired), 通过它可以自动实例化对象，从而可以精简代码。装饰器是典型的 AOP(Aspect-Oriented-Programming) 编程的应用，类似的 CSS 对于 HTML 的样式也是类似于这种思想，即从切面来改变和影响主对象的行为。
Decorator 简介 Decorator 是一种通过注解表达式就可以扩展类或者方法的函数。Decorator 可以应用到任何一个 class 或者 property 上。列如:
@myDecorator class A {} // 作用class @myDecorator doSomething() {} // 作用表达式 Javascript Decorator 目前任然是 ES7 提案状态，更多该特性的进度可以访问proposal-decorators查看。
Decorator 原理 说到更改对象的属性或者方法，大家肯定会想到Object.defineProperty(obj, prop, descriptor)方法，通过该方法，我们可以轻易的修改或者重写对象的行为或者属性，之前 Vue 中提到的双向绑定，即是通过重写set和get方法来实现的。所以在我们还未正式用上 Decorator 前，都是通过 Object.defineProperty 方法来实现。先来简单的认识下这个方法：
/** * obj : 需要修改属性的对象 * prop : 需要修改对象的属性名称 * descriptor: 用来定义属性具体行为的描述对象 **/ Object.defineProperty(obj, prop, descriptor) descriptor 属性说明 configurable : 定义属性对象是否可以被配置，即如果为 false ，定义修改的描述操作（writeable, get 等等）都无效</description></item></channel></rss>