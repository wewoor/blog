<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HTML5 on 让美的事情发生</title><link>//imziv.com/tags/html5/</link><description>Recent content in HTML5 on 让美的事情发生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2012-2020 Ziv小威</copyright><lastBuildDate>Thu, 07 May 2015 23:11:53 +0000</lastBuildDate><atom:link href="//imziv.com/tags/html5/index.xml" rel="self" type="application/rss+xml"/><item><title>HTML5 文件异步上传 — h5uploader.js</title><link>//imziv.com/posts/2015/html5-%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0-h5uploader.js/</link><pubDate>Thu, 07 May 2015 23:11:53 +0000</pubDate><guid>//imziv.com/posts/2015/html5-%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0-h5uploader.js/</guid><description>之前写过一篇 H5 异步文件上传的文章, 但是很多朋友看着我的这个教程还是出现很多问题，文章写的不是很好，比较早了。其实通过 H5 做异步上传已经非常简单了，通过查看文档，便可以很轻松的完成这个功能，当然，如果你不愿意查看文档自己动手的话，那么就用插件咯。h5uploader是我最近封装的 HTML5 上传插件，代码才白来行，使用的话也比较简单，支持文件大小，类型，progress 等等功能。本篇教程，将向你展示 Nodejs,Java 两种服务端的上传方法，并且附有源代码示例。
插件下载 如果你是bower的用户的话，可以直接通过以下命令：
bower install h5uploader --save 当然也可以直接从 Github Clone 此项目：
git clone https://github.com/wewoor/h5uploader.git HTML 代码 &amp;lt;input type=&amp;#34;file&amp;#34; id=&amp;#34;myfile&amp;#34; value=&amp;#34;&amp;#34; name=&amp;#34;myfile&amp;#34; multiple=&amp;#34;multiple&amp;#34;/&amp;gt; &amp;lt;button id=&amp;#34;uploader&amp;#34;&amp;gt;Upload&amp;lt;/button&amp;gt; 以上是一个 file 类型的 input 元素以及一个上传触发按钮，后面带有 multiple 属性，表示次处支持文件多选上传，当然，你也可以一次提交多个 input 元素，例如：
&amp;lt;input type=&amp;#34;file&amp;#34; id=&amp;#34;myfile&amp;#34; value=&amp;#34;&amp;#34; name=&amp;#34;myfile&amp;#34; multiple=&amp;#34;multiple&amp;#34;/&amp;gt; &amp;lt;input type=&amp;#34;file1&amp;#34; id=&amp;#34;myfile1&amp;#34; value=&amp;#34;&amp;#34; name=&amp;#34;myfile&amp;#34; multiple=&amp;#34;multiple&amp;#34;/&amp;gt; &amp;lt;button id=&amp;#34;uploader&amp;#34;&amp;gt;Upload&amp;lt;/button&amp;gt; 这种方法同样是可以的，只不过服务端解析的时候要更麻烦。
Javascript &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;html5uploader.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; var uploader = document.getElementById(&amp;#39;uploader&amp;#39;); uploader.addEventListener(&amp;#34;click&amp;#34;, function(e) { H5Uploader.</description></item><item><title>随笔-家</title><link>//imziv.com/posts/2015/html5-%E5%85%A8%E5%B1%8F%E7%89%B9%E6%80%A7/</link><pubDate>Sat, 24 Jan 2015 21:56:59 +0000</pubDate><guid>//imziv.com/posts/2015/html5-%E5%85%A8%E5%B1%8F%E7%89%B9%E6%80%A7/</guid><description>全屏功能是浏览器很早就支持的一项功能了，可以让你页面中的 video, image ,div 等等子元素实现全屏浏览，从而带来更好的视觉体验，来看看怎么使用吧。先来看看有哪些 API 和事件支持。
API // 元素请求全屏显示 element.requestFullscreen() // 检测文档的当前状态是否允许执行全屏操作 document.fullscreenEnabled() //当前显示的元素是否处于全屏状态，如果处于，则返回为非空对象，否则返回null document.fullscreenElement() //元素退出全屏显示 document.exitFullscreen() 上面除了RequestFullscreen()是支持element 对象以外，其他 3 个都只是支持document.
Event fullscreenchange // 全屏状态更改时触发 fullscreenerror // 执行全屏错误时触发 由于每个浏览器实现的方式不一样，所以我们实际的调用中还不能直接这样写，需要针对不同的浏览器做支持检测，下面跟着详细的例子看下具体兼容代码。
html &amp;lt;body&amp;gt; &amp;lt;img id=&amp;#34;imgFS&amp;#34; src=&amp;#34;&amp;#34;/&amp;gt; &amp;lt;a id=&amp;#34;btnFS&amp;#34; href=&amp;#34;javascript:;&amp;#34;&amp;gt; FullScreen &amp;lt;/a&amp;gt; &amp;lt;/body&amp;gt; javascript var fullScreen = document.getElementById(&amp;#39;btnFS&amp;#39;); fullScreen.addEventListener(&amp;#34;click&amp;#34;, function(){ var status = document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullscreenEnabled || document.msFullscrrenEnabled; if (status) { var img = document.getElementById(&amp;#34;imgFS&amp;#34;); if (img.requestFullscreen) { img.requestFullscreen(); } else if (img.</description></item></channel></rss>