<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CSS on 让美的事情发生</title><link>//imziv.com/tags/css/</link><description>Recent content in CSS on 让美的事情发生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2012-2020 Ziv小威</copyright><lastBuildDate>Sun, 17 Apr 2016 20:27:24 +0000</lastBuildDate><atom:link href="//imziv.com/tags/css/index.xml" rel="self" type="application/rss+xml"/><item><title>CSS3 实现自定义 Checkbox</title><link>//imziv.com/posts/2016/css3-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89-checkbox/</link><pubDate>Sun, 17 Apr 2016 20:27:24 +0000</pubDate><guid>//imziv.com/posts/2016/css3-%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89-checkbox/</guid><description>之前我写了一篇自定义 checkbox 的文章，通过 css3 实现自定义的 checkbox，并没有使用当今流行的 Reactjs, 或者 Vuejs 之类的进行组件化。但是很显然，这样封装的 checkbox 组件复用的时候非常麻烦。如果在新项目中使用的话，可能需要同时拷贝 css 和 html 文件进行整合。从 html 语义角度上讲，代码的易读性也不是很强，显然这样的组件显然不利于维护。
其实 Web Component 是前端界一直非常热衷的一个领域，因为原生的 HTML 在维护复杂网页应用时，实在是太差了。所以才出现了诸如 Google 的Ploymer、Facebook 的Reactjs等等。而且很多MVVM的框架也自带组件化的方案,例如Angularjs的指令，但貌似ng的这个用起来太复杂。用第三方组件化的框架去实现的话，你需要依赖框架本身很多东西，很多时候我们只是简单的几个组件，不是很大，也不是很多，所以为了保证组件的轻量，简单,其实这个时候我们并不想采用第三方的框架。接下来我会介绍使用Shadow DOM和registerElement的方式去实现组件化。
先看看实现后的调用方式：
&amp;lt;div class=&amp;#34;line&amp;#34;&amp;gt; &amp;lt;label&amp;gt;checkbox1 &amp;lt;/label&amp;gt; &amp;lt;check-box class=&amp;#34;mycheck&amp;#34; checked=&amp;#34;true&amp;#34; id=&amp;#34;ComCheckbox&amp;#34;&amp;gt;&amp;lt;/check-box&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;line&amp;#34;&amp;gt; &amp;lt;label&amp;gt;checkbox2 &amp;lt;/label&amp;gt; &amp;lt;check-box class=&amp;#34;mycheck&amp;#34; checked=&amp;#34;false&amp;#34; id=&amp;#34;ComCheckbox1&amp;#34; value=&amp;#34;2&amp;#34;&amp;gt;&amp;lt;/check-box&amp;gt; &amp;lt;/div&amp;gt; 看起来是不是很简洁，调用自定义的checkbox组件不需要那么多扰乱阅读的元素，只需要一个明确的check-box标签，既可以表示checkbox组件。效果如下：
好了看了效果，我们来看看具体怎么实现的吧。在线 demo 查看
组件的组成 通常情况下，我们一个组件一般是由html模板，css样式，js脚本逻辑三部分组成的。他们的作用我就不多废话了。至于当前组件的 css 样式自定义方法请看我上一篇文章CSS3 实现自定义 checkbox，这里我就不重复这部分了。
在项目工作区新建一个component-checkbox.html文件， 这个文件会被当做整个组件，在我们需要引用的页面中通过link标记动态的引入。 component-checkbox.html文件即包含了 HTML 模板，CSS 样式，JS 三个部分，他们在组件文件中的分布如下： &amp;lt;template&amp;gt; &amp;lt;style&amp;gt;// 放CSS样式定义&amp;lt;/style&amp;gt; // 放HTML标记 &amp;lt;/template&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; // JS脚本逻辑 &amp;lt;/script&amp;gt; 具体 HTML/CSS 定义 &amp;lt;template id=&amp;#34;CheckBox&amp;#34;&amp;gt; &amp;lt;style&amp;gt; .</description></item></channel></rss>