<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>struts2 on 让美的事情发生</title><link>//imziv.com/tags/struts2/</link><description>Recent content in struts2 on 让美的事情发生</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>2012-2020 Ziv小威</copyright><lastBuildDate>Thu, 01 Nov 2012 11:11:00 +0000</lastBuildDate><atom:link href="//imziv.com/tags/struts2/index.xml" rel="self" type="application/rss+xml"/><item><title>fileloder.js+struts2 实现文件异步上传，无页面刷新效果。</title><link>//imziv.com/posts/2012/fileloder.js+struts2%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%97%A0%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E6%95%88%E6%9E%9C/</link><pubDate>Thu, 01 Nov 2012 11:11:00 +0000</pubDate><guid>//imziv.com/posts/2012/fileloder.js+struts2%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%97%A0%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0%E6%95%88%E6%9E%9C/</guid><description>一、前言 　之前在写一个 web 的文件上传的功能时，希望在 web 前端对文件的大小，及类型用 js 给验证掉，然后提交到服务器保存入数据库，同时要求达到页面无刷新的异步效果。在网上也看到有很多用 iframe 的方式实现了这样的无刷新效果。不过我在这里给大家介绍的是一款 js 插件，非常强大。在用这款插件前，在网上查询了好久关于 js 对文件类型的验证，当然这样的方法很多，大多数通过正则表达式对文件后缀验证的方式，只不过对文件大小验证这项功能上网上贴出的大多数代码都不靠谱，很多浏览器根本就不支持很多属性操作，比喻说 filesize 这项，而且浏览器的兼容性上考虑起来非常麻烦。不过所幸后来我找到了 fileloader.js 这个插件，前身好像是 ajaxfileupload.js，这款插件可通过 js 提交验证文件的大小及类型、支持拖拽上传。有时间把它的源码研究下也跟大家分享下。fileloader.js 官方地址是：&amp;laquo;http://fineuploader.com/&amp;gt;。当然上面也有很多 DEMO&amp;gt;，大家可以自己去看。
二、工作准备 　添加 strut2 框架；将下载的 fileloader.js 的文件添加到页面；将 fileloader.css 文件添加到页面；添加 jquery 包。
三、HTML 页面代码 &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;文件上传&amp;lt;/title&amp;gt; &amp;lt;link href=&amp;#34;css/fileuploader.css&amp;#34; rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; /&amp;gt; &amp;lt;script language=&amp;#34;javascript&amp;#34; type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;js/jquery-1.8.0.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script language=&amp;#34;javascript&amp;#34; type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;js/fileuploader.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script language=&amp;#34;javascript&amp;#34; type=&amp;#34;text/javascript&amp;#34;&amp;gt; $(document).ready(function() { var thumbnailuploader = new qq.FileUploader({　//new fileuploader object element: $(&amp;#39;#thumbnail-fine-uploader&amp;#39;)[0],　//选定页面div元素，这里用了jquery的选择器 action: &amp;#39;service/uploadImage&amp;#39;,　//提交的action地址 debug: true, multiple: false, allowedExtensions: [&amp;#39;jpeg&amp;#39;, &amp;#39;jpg&amp;#39;, &amp;#39;gif&amp;#39;, &amp;#39;png&amp;#39;],　//允许上传的文件类型 sizeLimit: 500*1024,　//允许上传文件的大小，这里是500KB，500kb = 500*1024KB uploadButtonText:&amp;#39;图片上传&amp;#39;,　//在页面显示上传按钮 inputName: &amp;#39;myFile&amp;#39;,　//在input标签中的name属性设置为myFile messages:{　//设置的提示信息，包括大小类型等的操作 typeError:&amp;#39;只允许jpeg,jpg,gif,png格式的图片文件{file}&amp;#39;, sizeError:&amp;#39;文件大小不能超过{sizeLimit}。{file}&amp;#39;, emptyError:&amp;#39;文件不可为空{file}&amp;#39;, onLeave:&amp;#39;文件正在上传，离开将终止上传操作？&amp;#39; }, showMessage:function(message){　//显示信息 alert(message); }, // 设置返回从服务器反馈的error信息，不过我这里利用这个responseProperty属性反馈msg信息， // 具体的msg内容在服务中设置。 failedUploadTextDisplay: { mode: &amp;#39;custom&amp;#39;, maxChars: 40, responseProperty: &amp;#39;msg&amp;#39;, enableTooltip: true } }); })　&amp;lt;/scripte&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;fieldset&amp;gt; &amp;lt;legend&amp;gt;&amp;lt;span&amp;gt;您可以上传一张不超过500kb的图片&amp;lt;/span&amp;gt;&amp;lt;/legend&amp;gt; &amp;lt;div&amp;gt; &amp;lt;div id=&amp;#34;thumbnail-fine-uploader&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/fieldset&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 三、Action 服务器端代码 提示：我在项目中使用了 S2SH 框架，所以注意下自己写代码时候的区别。</description></item><item><title>Struts2 与 Spring 的整合</title><link>//imziv.com/posts/2012/struts2%E4%B8%8Espring%E7%9A%84%E6%95%B4%E5%90%88/</link><pubDate>Thu, 06 Sep 2012 11:32:00 +0000</pubDate><guid>//imziv.com/posts/2012/struts2%E4%B8%8Espring%E7%9A%84%E6%95%B4%E5%90%88/</guid><description>今天倒腾了半天，终于是把这个两个框架整合到一起了。还是要写一下总结，同时给大家一些帮助。
开发环境：myeclipse 9.0(不好用！）tomcat6.0 1.准备工作
需要导入的包：struts2 与 spring 基本的包就不用说了，我用的是 struts2.1 Spring 3.0，
尤其要注意 别少导入的几个是:Spring3.0 Web Libraries ; struts 支持 spring 的插件：struts2-spring-plugin-2.1.8.1.jar 将这个 jar 文件放到 lib 目录下 2.web.xml 的配置
除了 struts2 的核心配置外，我们还要加入 spring 的配置，代码如下：
&amp;lt;!--指明spring配置文件的位置!--&amp;gt; &amp;lt;context-param&amp;gt; &amp;lt;param-name&amp;gt;contextConfigLocation&amp;lt;/param-name&amp;gt; &amp;lt;param-value&amp;gt;classpath*:applicationContext*.xml&amp;lt;/param-value&amp;gt; &amp;lt;/context-param&amp;gt; &amp;lt;!-加载spring的配置文件!--&amp;gt; &amp;lt;listener&amp;gt; &amp;lt;listener-class&amp;gt; org.springframework.web.context.ContextLoaderListener &amp;lt;/listener-class&amp;gt; &amp;lt;/listener&amp;gt; 注：如果你在运行的时候发现有 no found class org.springframework.web.context.LoaderListener 的异常 ，那你要注意你的 Spring3.0 Web 包的导入了
3.application.xml 的配置
&amp;lt;beans&amp;gt; &amp;lt;bean id=&amp;#34;userService&amp;#34; class=&amp;#34;com.test.service.UserServiceImpl&amp;#34;&amp;gt;&amp;lt;/bean&amp;gt; &amp;lt;bean id=&amp;#34;userAction&amp;#34; class=&amp;#34;com.test.action.UserAction&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;userService&amp;#34;&amp;gt; &amp;lt;ref bean=&amp;#34;userService&amp;#34;/&amp;gt; &amp;lt;/property&amp;gt; &amp;lt;/bean&amp;gt; &amp;lt;/beans&amp;gt; 4.UserAction 类 这个不用多说，注意的是 userService 属性的 getter 和 setter 方法</description></item></channel></rss>